<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Axios的基本使用</title>
    <url>/archives/41a21076.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://github.com/axios/axios">Axios</a> 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中，在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p>
<span id="more"></span>

<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js">使用 npm<span class="token operator">:</span>
npm install axios
使用 yarn<span class="token operator">:</span>
yarn add axios
使用 jsDelivr <span class="token constant">CDN</span><span class="token operator">:</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
使用 unpkg <span class="token constant">CDN</span><span class="token operator">:</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向给定ID的用户发起请求</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 处理成功情况</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 处理错误情况</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 上述请求也可以按以下方式完成（可选）</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 支持async/await用法</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="发起多个并发请求"><a href="#发起多个并发请求" class="headerlink" title="发起多个并发请求"></a>发起多个并发请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> acct <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> perm <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="API集合"><a href="#API集合" class="headerlink" title="API集合"></a>API集合</h2><p>为了方便起见，已经为所有支持的请求方法提供了别名</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h1><p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>GET</code> 方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
  <span class="token comment">// `url` 是用于请求的服务器 URL</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>
  <span class="token comment">// `method` 是创建请求时使用的方法</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token comment">// 默认值</span>
  <span class="token comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。可以通过设置 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span>

  <span class="token comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span>
  <span class="token comment">// 它只能用于 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span>
  <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 对发送的 data 进行任意转换处理</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>
  <span class="token literal-property property">transformResponse</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 对接收的 data 进行任意转换处理</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token comment">// 自定义请求头</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'X-Requested-With'</span><span class="token operator">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// `params` 是与请求一起发送的 URL 参数</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span>
  <span class="token function-variable function">paramsSerializer</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">arrayFormat</span><span class="token operator">:</span> <span class="token string">'brackets'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// `data` 是作为请求体被发送的数据</span>
  <span class="token comment">// 仅适用 'PUT', 'POST', 'DELETE 和 'PATCH' 请求方法</span>
  <span class="token comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span>
  <span class="token comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>
  <span class="token comment">// - 浏览器专属: FormData, File, Blob</span>
  <span class="token comment">// - Node 专属: Stream, Buffer</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Fred'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 发送请求体数据的可选语法</span>
  <span class="token comment">// 请求方式 post</span>
  <span class="token comment">// 只有 value 会被发送，key 则不会</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'Country=Brasil&amp;City=Belo Horizonte'</span><span class="token punctuation">,</span>

  <span class="token comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 默认值是 `0` (永不超时)</span>

  <span class="token comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>
  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// default</span>

  <span class="token comment">// `auth` HTTP Basic Auth</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'janedoe'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'s00pers3cret'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h1><p>一个请求的响应包含以下信息</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
  <span class="token comment">// `data` 由服务器提供的响应</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// `status` 来自服务器响应的 HTTP 状态码</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span>
  <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>
  <span class="token comment">// `headers` 是服务器响应头，所有的 header 名称都是小写，而且可以使用方括号语法访问</span>
  <span class="token comment">// 例如: `response.headers['content-type']`</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// `config` 是 `axios` 请求的配置信息</span>
  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// `request` 是生成此响应的请求</span>
  <span class="token comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)；在浏览器中则是 XMLHttpRequest 实例</span>
  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当使用 <code>then</code> 时，将接收如下响应：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h1><p>可以指定默认配置，它将作用于每个请求</p>
<h2 id="全局axios-默认"><a href="#全局axios-默认" class="headerlink" title="全局axios 默认"></a>全局axios 默认</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建实例时配置默认值</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'https://api.example.com'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建实例后修改默认值</span>
instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AUTH_TOKEN</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.axios-http.cn/docs/intro">起步 | Axios 中文文档 | Axios 中文网 (axios-http.cn)</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript概念辨析</title>
    <url>/archives/62403f8d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如何理解宏任务、微任务？</p>
<span id="more"></span>

<h1 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h1><p> JS 引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</p>
<h2 id="如何理解宏任务、微任务？"><a href="#如何理解宏任务、微任务？" class="headerlink" title="如何理解宏任务、微任务？"></a>如何理解宏任务、微任务？</h2><p>JavaScript代码执行顺序：</p>
<ol>
<li>先执行同步代码</li>
<li>遇到异步宏任务则将放入宏任务队列中，遇到异步微任务则将放入微任务队列中</li>
<li>当所有同步代码执行完毕后</li>
<li>将异步微任务从队列中调入主线程执行</li>
<li>再将异步宏任务从队列中调入主线程执行（宏任务执行中会产生微任务，这些微任务会在下一个宏任务执行前就完成掉）</li>
<li>循环往复…</li>
</ol>
<p>结论：在异步任务中：微任务先于宏任务</p>
<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>在事件循环中，每进行一次循环操作称为 tick，关键步骤如下：</p>
<ul>
<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>
<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>
<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>
<li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li>
<li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li>
</ul>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>(macro)task，可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）</p>
<p>浏览器为了能够使得JS内部(macro)task与DOM任务能够有序的执行，会在一个(macro)task执行结束后，在下一个(macro)task 执行开始前，对页面进行重新渲染，流程如下：</p>
<p>(<strong>macro</strong>)task-&gt;渲染-&gt;(<strong>macro</strong>)task-&gt;…</p>
<p>宏任务具体包括：</p>
<pre class="line-numbers language-none"><code class="language-none">script(整体代码)
计时器结束的回调，setTimeout、setInterval
事件回调、http 回调等绝大部分异步函数进入宏队列
I&#x2F;O
UI交互事件
postMessage
MessageChannel
setImmediate(Node.js 环境)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>new Promise在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的</strong></p>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>在当前 task 执行结束后立即执行的任务。在当前task任务后，下一个task之前，在渲染之前。</p>
<p>在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕</p>
<p>具体包括：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span>then
Object<span class="token punctuation">.</span>observe
MutationObserver
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>js 环境<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>案例</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>整体script作为第一个宏任务进入主线程，遇到setTimeout入栈处理，发现是异步函数（宏任务），出栈，移交给Web API处理，0秒等待后，将回调函数加到宏任务队列尾部；</li>
<li>遇到new Promise,入栈处理，发现是同步任务，直接执行，console输出1；</li>
<li>遇到then，入栈处理，发现是异步函数（微任务），出栈，移交给Web API处理，将回调函数加入微任务队列尾部；</li>
<li>遇到console.log(2)，入栈处理，同步任务，直接console输出2, 出栈;</li>
<li>栈已清空，检查微任务队列；</li>
<li>取出第一个回调函数，入栈处理，发现是同步任务，直接console输出3, 出栈；</li>
<li>继续从取微任务队列中取下一个，发现微任务队列已清空，结束第一轮事件循环；</li>
<li>从宏任务队列中取出第一个宏任务，入栈处理，发现是同步任务，直接console输出4；</li>
</ol>
<p>所以，最终输出结果为：1 &gt; 2 &gt; 3 &gt; 4</p>
<h1 id="JavaScript异步解决方案"><a href="#JavaScript异步解决方案" class="headerlink" title="JavaScript异步解决方案"></a>JavaScript异步解决方案</h1><ol>
<li>回调函数，解决同步问题，但是带来回调地狱</li>
<li>promise，解决回调地狱，但是无法取消promise，错误需要用回调函数来捕获</li>
<li>generator，控制函数的执行</li>
<li>async/await，代码清晰，不用写一堆then链</li>
</ol>
<h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><h1 id="最后一遍说-bind、call、apply"><a href="#最后一遍说-bind、call、apply" class="headerlink" title="最后一遍说 bind、call、apply"></a>最后一遍说 bind、call、apply</h1><p>区别一：call、apply是立即执行、bind是返回一个新的函数</p>
<p><strong>bind 返回的是一个新的函数，你必须调用它才会被执行</strong></p>
<pre class="line-numbers language-none"><code class="language-none">obj.myFun.call(db)；　　　　&#x2F;&#x2F; 德玛年龄 99
obj.myFun.apply(db);　　　 &#x2F;&#x2F; 德玛年龄 99
obj.myFun.bind(db)();　　　&#x2F;&#x2F; 德玛年龄 99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>区别二：</p>
<p>call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，<strong>第二个参数差别</strong></p>
<p>call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔</p>
<p>apply 的所有参数都必须放在一个数组里面传进去</p>
<p>bind 除了返回是函数以外，它 的参数和 call 一样</p>
<pre class="line-numbers language-none"><code class="language-none">obj.myFun.call(db,&#39;成都&#39;,&#39;上海&#39;)；　　　　 &#x2F;&#x2F; 德玛 年龄 99  来自 成都去往上海
obj.myFun.apply(db,[&#39;成都&#39;,&#39;上海&#39;]);      &#x2F;&#x2F; 德玛 年龄 99  来自 成都去往上海  
obj.myFun.bind(db,&#39;成都&#39;,&#39;上海&#39;)();       &#x2F;&#x2F; 德玛 年龄 99  来自 成都去往上海
obj.myFun.bind(db,[&#39;成都&#39;,&#39;上海&#39;])();　　 &#x2F;&#x2F; 德玛 年龄 99  来自 成都, 上海去往 undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>





<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://juejin.cn/post/7072666354402197540#heading-6">宏任务与微任务 - 掘金 (juejin.cn)</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6教程</title>
    <url>/archives/cbbc6216.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>ES6 是 JavaScript 语言的下一代标准，使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言</p>
<p>ES6是有史以来最实质的升级,特性涵盖范围甚广，小到受欢迎的语法糖，例如箭头函数(arrow functions)和简单的字符串插值(string interpolation)，大到烧脑的新概念，例如代理(proxies)和生成器(generators)；它将彻底改变程序员们编写JS代码的方式。</p>
<p>ps：es6是基础走向进阶必须学的</p>
<span id="more"></span>

<h1 id="变量声明let、const"><a href="#变量声明let、const" class="headerlink" title="变量声明let、const"></a>变量声明let、const</h1><p>代码块内如果存在 let 或者 const，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 代码块内，在声明变量 PI 之前使用它会报错。</span>
<span class="token keyword">var</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Cannot access 'PI' before initialization</span>
  <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token string">"3.1415926"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 声明的变量<strong>只在 let 命令所在的代码块内有效</strong>，<strong>只能声明一次</strong>，<strong>可以重新赋值</strong>，重复声明会报错；<strong>不存在变量提升</strong>，在声明变量前调用，会报错！</p>
<p>for 循环计数器很适合用 let，使用var就需要立即执行函数，let不需要</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//ReferenceError: a is not defined</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"banana"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。声明必须初始化，否则会报错</p>
<p>const 保证的不是该变量值不得改动，而是变量指向的内存地址所保存的数据不得改动。</p>
<p>对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量；</p>
<p>对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的，并不能确保改变量的结构不变</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>6点区别：</p>
<p>变量提升、暂时性死区、块级作用域、重复声明、修改声明变量、使用</p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>解构赋值是对赋值运算符的扩展。解构的源，解构赋值表达式的右边部分。解构的目标，解构赋值表达式的左边部分。</p>
<h2 id="数组结构的解构赋值"><a href="#数组结构的解构赋值" class="headerlink" title="数组结构的解构赋值"></a>数组结构的解构赋值</h2>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 可嵌套
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// a = 1   b = 2   c = 3</span>

<span class="token number">2.</span> 可忽略
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// a = 1   b = 3</span>

<span class="token number">3.</span> 不完全解构
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">// a = 1, b = undefined</span>

<span class="token number">4.</span> 剩余运算符
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//a = 1   b = [2, 3]</span>

<span class="token number">5.</span> 字符串等（解构的目标若为可遍历对象，皆可进行解构赋值）
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello1231'</span><span class="token punctuation">;</span>
<span class="token comment">// a = 'h'</span>
<span class="token comment">// b = 'e'</span>
<span class="token comment">// c = 'l'</span>
<span class="token comment">// d = 'l'</span>
<span class="token comment">// e = 'o'</span>

<span class="token number">6.</span> 解构默认值
当解构模式有匹配结果，且匹配结果是 <span class="token keyword">undefined</span> 时，会触发默认值作为返回结果。
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a = 2</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// a = 3, b = 3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// a = 1, b = 1</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a = 1, b = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="对象模型的解构赋值"><a href="#对象模型的解构赋值" class="headerlink" title="对象模型的解构赋值"></a>对象模型的解构赋值</h2><ul>
<li>对象模型的解构赋值需要<strong>保持 键名统一</strong></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 可嵌套可忽略
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'world'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token comment">// x = 'hello'</span>
<span class="token comment">// y = 'world'</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'world'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token comment">// x = 'hello'</span>

<span class="token number">2.</span> 不完全解构
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'world'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> x <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token comment">// x = undefined</span>
<span class="token comment">// y = 'world'</span>

<span class="token number">3.</span> 剩余运算符
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// a = 10</span>
<span class="token comment">// b = 20</span>
<span class="token comment">// rest = &#123;c: 30, d: 40&#125;</span>

<span class="token number">4.</span> 解构默认值
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// a = 3; b = 5;</span>
<span class="token keyword">let</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> aa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> bb <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// aa = 3; bb = 5;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p><strong>新的原始数据类型</strong>  Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名。</p>
<ul>
<li>Symbol 函数栈不能用 new 命令，因为 Symbol 是原始数据类型，不是对象。</li>
<li>Symbol 接受一个字符串作为参数，为新创建的 Symbol 提供描述</li>
<li>相同参数生成的 symbol 值不相等</li>
</ul>
<p>Symbol 常作为属性名来使用，每一个 Symbol 的值都是不相等的，可以保证属性不重名</p>
<p>Symbol 作为对象属性名时不能用.运算符，要用方括号，因为.运算符后面是字符串，所以取到的是字符串 sy 属性，而不是 Symbol 值 sy 属性。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> syObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
syObject<span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"kk"</span><span class="token punctuation">;</span>
 
syObject<span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// "kk"</span>
syObject<span class="token punctuation">.</span>sy<span class="token punctuation">;</span>   <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Symbol.for 方法可以检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>需要注意的是</strong>：</p>
<p>Symbol 值作为属性名时，不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。</p>
<p>如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>当一个复杂对象中含有多个属性的时候，很容易将某个属性名覆盖掉，利用 Symbol 值作为属性名可以很好的避免这一现象</li>
<li>模拟类的私有方法，ES6 中的类是没有 private 关键字来声明类的私有方法和私有变量的，但是我们可以利用 Symbol 的唯一性来模拟。</li>
</ol>
<h1 id="Map-与-Set"><a href="#Map-与-Set" class="headerlink" title="Map 与 Set"></a>Map 与 Set</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 对象保存键值对，任何值(对象或者原始值) 都可以作为一个键或一个值。如果你需要“键值对”的数据结构，Map比Object更合适。</p>
<h3 id="Maps-和-Objects-的区别"><a href="#Maps-和-Objects-的区别" class="headerlink" title="Maps 和 Objects 的区别"></a>Maps 和 Objects 的区别</h3><ul>
<li>一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。</li>
<li>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</li>
<li>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</li>
<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li>
</ul>
<h3 id="Map的构建"><a href="#Map的构建" class="headerlink" title="Map的构建"></a>Map的构建</h3><ul>
<li><p>map的键可以是字符串、对象、函数、NaN</p>
</li>
<li><p>Map的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键，在扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p>
</li>
</ul>
<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var myMap &#x3D; new Map();
var keyObj &#x3D; &#123;&#125;, 
 
myMap.set(keyObj, &quot;和键 keyObj 关联的值&quot;);

myMap.get(keyObj); &#x2F;&#x2F; &quot;和键 keyObj 关联的值&quot;
myMap.get(&#123;&#125;); &#x2F;&#x2F; undefined, 因为 keyObj !&#x3D;&#x3D; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>!!!虽然 NaN 和任何值甚至和自己都不相等(NaN !== NaN 返回true)，NaN作为Map的键来说是没有区别的。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">"not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "not a number"</span>
 
<span class="token keyword">var</span> otherNaN <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>otherNaN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "not a number"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>作为构造函数，Map也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'Author'</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span>size <span class="token comment">// 2</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment">// "张三"</span>

<span class="token comment">//接受数组作为参数，实际上执行的算法</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>只有对同一个对象的引用，Map结构才将其视为同一个键</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token comment">// 表面是针对同一个键，但实际上这是两个值，内存地址是不一样的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Map-实例属性方法"><a href="#Map-实例属性方法" class="headerlink" title="Map 实例属性方法"></a>Map 实例属性方法</h3><ul>
<li><strong>size属性</strong></li>
<li><strong>set(key, value)</strong></li>
<li><strong>get(key)</strong></li>
<li>**has(key)**，返回布尔值</li>
<li>**delete(key)**，返回布尔值</li>
<li>**clear()**，没有返回值</li>
</ul>
<h3 id="Map-遍历方法"><a href="#Map-遍历方法" class="headerlink" title="Map 遍历方法"></a>Map 遍历方法</h3><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><p>对 Map 进行遍历键值对</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 这个 entries 方法返回一个新的 Iterator 对象，它按插入顺序包含了 Map 对象中每个元素的 [key, value] 数组。 */</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对 Map 进行遍历键对、值对</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结合数组方法"><a href="#结合数组方法" class="headerlink" title="结合数组方法"></a>结合数组方法</h4><p>Map结构转为数组结构，比较快速的方法是结合使用扩展运算符（<code>...</code>），结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现Map的遍历和过滤（Map本身没有<code>map</code>和<code>filter</code>方法）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> map0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token operator">...</span>map0<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 产生Map结构 &#123;1 => 'a', 2 => 'b'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>Map还有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历。forEach方法还可以接受第二个参数，用来绑定this</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reporter <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">report</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Key: %s, Value: %s"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> reporter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Map对象的操作"><a href="#Map对象的操作" class="headerlink" title="Map对象的操作"></a>Map对象的操作</h3><h4 id="Map和Array的转换"><a href="#Map和Array的转换" class="headerlink" title="Map和Array的转换"></a>Map和Array的转换</h4><p>Map转为数组最方便的方法，就是使用扩展运算符（…），也可以使用 Array.from 函数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token comment">// Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象</span>
<span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> outArray1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> outArray2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Map-的克隆"><a href="#Map-的克隆" class="headerlink" title="Map 的克隆"></a><strong>Map 的克隆</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> myMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>myMap1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>original <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 打印 false。 Map 对象构造函数生成实例，迭代出新的对象。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Map-的合并"><a href="#Map-的合并" class="headerlink" title="Map 的合并"></a><strong>Map 的合并</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'uno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'dos'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three var merged = new Map([...first, ...second]);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 对象允许你存储<strong>任何类型</strong>的唯一值，无论是原始值或者是对象引用。</p>
<p>set判断值唯一性，也会考虑值的类型，相当用===</p>
<p>常用于去除数组重复成员</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 方法一
<span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token number">2.</span> 方法二
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Set属性方法"><a href="#Set属性方法" class="headerlink" title="Set属性方法"></a>Set属性方法</h3><p><strong>属性</strong></p>
<ul>
<li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li>
<li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><code>add(value)</code>：添加某个值，返回Set结构本身。</li>
<li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li>
<li><code>clear()</code>：清除所有成员，没有返回值。</li>
</ul>
<h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><p><strong><code>keys()</code>，<code>values()</code>，<code>entries()</code><strong>，</strong><code>forEach()</code></strong></p>
<p>Set结构键名和键值是同一个值，所以<code>key</code>方法和<code>value</code>方法的行为完全一致</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// red</span>
<span class="token comment">// green</span>
<span class="token comment">// blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Set-中的特殊值"><a href="#Set-中的特殊值" class="headerlink" title="Set 中的特殊值"></a>Set 中的特殊值</h3><p>Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>
<ul>
<li>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不重复；</li>
<li>undefined 与 undefined 是恒等的，所以不重复；</li>
<li>NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不重复。</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Array 转 Set    new Set()</span>
<span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set 转 Array   用...操作符</span>
<span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// String 转 Set</span>
<span class="token keyword">var</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Set(4) &#123;"h", "e", "l", "o"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="weakset和weakmap"><a href="#weakset和weakmap" class="headerlink" title="weakset和weakmap"></a>weakset和weakmap</h2><p>待补充</p>
<h1 id="Proxy-与-Reflect"><a href="#Proxy-与-Reflect" class="headerlink" title="Proxy 与 Reflect"></a>Proxy 与 Reflect</h1><p>Proxy 与 Reflect 是 ES6 为了操作对象引入的 API</p>
<ol>
<li>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</li>
<li>Reflect 对象的方法与 Proxy 对象的方法是一一对应的。所以 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作。</li>
</ol>
<p>作为构造函数，<code>Proxy</code>接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有<code>Proxy</code>的介入，操作原来要访问的就是这个对象；</p>
<p>第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span>receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">'年龄是保密的'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
proxy<span class="token punctuation">.</span>name     <span class="token comment">//return Tom</span>
proxy<span class="token punctuation">.</span>age 		<span class="token comment">//return 年龄是保密的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Proxy-支持的拦截操作"><a href="#Proxy-支持的拦截操作" class="headerlink" title="Proxy 支持的拦截操作"></a>Proxy 支持的拦截操作</h2><ul>
<li>target，目标对象 ；propKey，即key；receiver， Proxy 实例本身</li>
<li>ctx 表示目标对象上下文，args 表示目标对象的参数数组。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">get</span>
<span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>

<span class="token keyword">set</span>
<span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>

apply
<span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> args<span class="token punctuation">)</span>

has
<span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">)</span>
<span class="token comment">// 判断 target 对象是否存在 propKey 属性，此方法不判断一个属性是对象自身的属性，还是继承的属性。</span>

<span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'handle apply'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// handle apply   1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Reflect-的好处"><a href="#Reflect-的好处" class="headerlink" title="Reflect 的好处"></a>Reflect 的好处</h2><ol>
<li>target[key] = value，没有返回值，Reflect 有返回值，可以看设置是否成功</li>
<li>原来set get 都挂载在Object上，不方便做统一管理</li>
<li>Reflect 和 Proxy 使用方法上一一对应</li>
</ol>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="子串的识别"><a href="#子串的识别" class="headerlink" title="子串的识别"></a>子串的识别</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">"apple,banana,orange"</span><span class="token punctuation">;</span>
<span class="token comment">//找在哪</span>
string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token comment">// 0</span>
string<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token comment">// 15</span>

<span class="token comment">//找有没有</span>
<span class="token comment">//以下三个方法都可以接受两个参数，需要搜索的字符串，和可选的搜索起始位置索引。</span>
string<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
string<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
string<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>
string<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="字符串重复"><a href="#字符串重复" class="headerlink" title="字符串重复"></a>字符串重复</h2><p>repeat()：返回新的字符串，表示将字符串重复指定次数返回。</p>
<p>如果参数是小数，向下取整；参数是 负数、infinity 会报错；参数是 NaN，等同于 repeat 零次；传入字符串，先将字符串转化为数字</p>
<h2 id="字符串补全"><a href="#字符串补全" class="headerlink" title="字符串补全"></a>字符串补全</h2><p><strong>padStart</strong>：返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串。</p>
<p><strong>padEnd</strong>：返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串。</p>
<ul>
<li>参数：第一个参数是生成字符串最小长度，第二个参数是用来补全的字符串，若空用空格填充</li>
<li>如果指定的长度小于或者等于原字符串的长度，则返回原字符串</li>
<li>如果原字符串加上补全字符串长度大于指定长度，则截去超出位数的补全字符串</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "ooooh"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "hoooo"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// "    h"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "hello"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">",world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "hello,worl"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用反引号 <strong>`</strong> 除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中通过  ${}  的方式加入变量、表达式、函数</p>
<p>模板字符串中的换行和空格都是会被保留的</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">"have fun!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> string2<span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Game start,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Game start,have fun!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><p>模板字符串可以紧跟在一个函数后面，该函数将被调用来处理这个模板字符串，这种称为“标签模板”功能。</p>
<p>该函数依次会接收到多个参数</p>
<ul>
<li>所有静态文字都作为数组传递给第一个参数。</li>
<li>占位符表达式的所有值都作为其余参数传递。</li>
<li>变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">stringArr<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//等同于</span>
<span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">stringArr<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><p>二进制表示法新写法: 前缀 0b 或 0B；八进制表示法新写法: 前缀 0o 或 0O</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0b11</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0o11</span> <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 属性的简洁表示法: ES6允许对象的属性直接写变量，这时候属性名是变量名，属性值是变量值</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Amy"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token punctuation">,</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
person   <span class="token comment">//&#123;age: 12, name: "Amy"&#125;</span>

<span class="token comment">// 简写方法： </span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"Hi"</span>

<span class="token comment">// 属性名表达式: 允许用表达式作为属性名,但要将表达式放在方括号内。</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
 <span class="token punctuation">[</span><span class="token string">"he"</span><span class="token operator">+</span><span class="token string">"llo"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token string">"Hi"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"Hi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h2><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象，是一个非常常用的方法！</p>
<p>拓展运算符 后跟null、undefined、空对象，不会报错</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 基本用法</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Amy"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>person <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> someone<span class="token punctuation">;</span>  <span class="token comment">//&#123;name: "Amy", age: 15&#125;</span>

<span class="token comment">// 可用于合并对象，合并时 属性名相同时，后面的覆盖前面的</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Amy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>age<span class="token punctuation">,</span> <span class="token operator">...</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
person<span class="token punctuation">;</span>  <span class="token comment">//&#123;age: 15, name: "Amy"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="对象新方法"><a href="#对象新方法" class="headerlink" title="对象新方法"></a>对象新方法</h2><h3 id="Object-assign-target-source-1-···"><a href="#Object-assign-target-source-1-···" class="headerlink" title="Object.assign(target, source_1, ···)"></a>Object.assign(target, source_1, ···)</h3><ul>
<li><p>用法：将源对象的所有可枚举属性复制到目标对象中。</p>
</li>
<li><p>同名属性，遵循后面覆盖前面的原则</p>
</li>
<li><p>如果只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。</p>
<ul>
<li> null 和 undefined 放在第一个参数时，不能转化为对象，会报错</li>
<li> null 和 undefined 放在第二个参数或后面，会忽略而不会报错</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Number &#123;3&#125;</span>
<span class="token keyword">typeof</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "object"</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// TypeError: Cannot convert undefined or null to object</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Number &#123;1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>assign 的属性拷贝是浅拷贝，如果源对象某个属性值是对象，那么拷贝得到的是这个对象的引用</p>
</li>
</ul>
<p>数组的处理</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [5,3]</span>
<span class="token comment">//先将 [2,3] 转为 &#123;0:2,1:3&#125; ，然后再进行属性复制，所以源对象的 0 号属性覆盖了目标对象的 0。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Object-is-value1-value2"><a href="#Object-is-value1-value2" class="headerlink" title="Object.is(value1, value2)"></a>Object.is(value1, value2)</h3><p>用来比较两个值是否严格相等，与（===）基本类似</p>
<p>与（===）的两点区别：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//一是+0不等于-0</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
<span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span>  <span class="token comment">//true</span>

<span class="token comment">//二是NaN等于本身</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>Array.of</code>方法用于将一组值，转换为数组</p>
<p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Array.of()  将参数中所有值作为元素形成数组。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, '2', true]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>

<span class="token comment">// Array.from(arrayLike[, mapFn[, thisArg]])，将类数组对象或可迭代对象转化为数组</span>
<span class="token comment">// mapFn 可选函数参数，用于对每个元素进行处理，放入数组的是处理后的元素</span>
<span class="token comment">// thisArg  用于指定 map 函数执行时的 this 对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, undefined, 3]</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">do</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h2><ul>
<li>copyWithin()</li>
<li>find()、findIndex()</li>
<li>fill()，使用给定值，填充一个数组，第二、三个参数，指定填充的起始、结束位置</li>
<li>entries()，keys()，values()，遍历键值对，键 为  index，值为 value</li>
<li>includes()</li>
<li>flat()，flatMap()，将数组扁平化处理，返回一个新数组，对原数据没有影响</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>增加了默认参数，只有在未传递参数或undefined时，才使用默认参数，null被认为是有效的参数值</p>
<p>不定参数，用来表示不确定参数个数，形如，…变量名</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><strong>箭头函数</strong></h2><ul>
<li>箭头函数严格模式下this也指向window</li>
<li>箭头函数 忽略任何形式的this指向改变，静态this指向</li>
<li>箭头函数 不是个 构造器，不能new</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token parameter">参数</span> <span class="token operator">=></span> 函数体
<span class="token number">1.</span> 最基本写法：
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">;</span>
<span class="token number">2.</span> <span class="token function">当箭头函数没有参数或者有多个参数，要用</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> 括起来
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token number">3.</span> 当函数体有多行语句，用 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 包裹起来
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">let</span> result <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
 <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token number">4.</span> <span class="token function">当要返回对象的时候，要用</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> 将对象包裹起来
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>箭头函数 没有 this、super、arguments 和 new.target 绑定<ul>
<li>this，指向window</li>
<li>使用arguments ，会报错</li>
<li>不可以作为构造函数，不能使用 new 命令，否则会报错</li>
</ul>
</li>
</ul>
<p>箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象</p>
<h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h1><p>class 的本质是 function，可以看作一个语法糖，让对象原型的写法更加清晰，是构造函数的另一种写法</p>
<ul>
<li>class (类)作为对象的模板被引入，可以通过 class 关键字定义类；</li>
<li>类 不可以重复声明，类定义不会被提升</li>
<li><em>类里面的方法不加function关键字  方法与方法之间不用,号隔开</em></li>
</ul>
<h2 id="constructor关键字"><a href="#constructor关键字" class="headerlink" title="constructor关键字"></a>constructor关键字</h2><ul>
<li>constructor 方法是类的默认方法，通过 new 命令生成对象实例时，自动调用该方法</li>
<li>一个类必须有 constructor 方法，如果没有显式定义，一个空的 constructor 方法会被默认添加。类包含多个 constructor 的方法，则抛出 SyntaxError错误</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token comment">//constructor内定义的方法和属性是实例对象自己的，</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//而constructor外定义的方法和属性则是所有实例对象可以共享的 注意!</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span>         <span class="token comment">//funciton                </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span>  <span class="token comment">//true</span>
<span class="token keyword">let</span> jon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
jon<span class="token punctuation">.</span><span class="token function">hasOwnPrototype</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>     <span class="token comment">//true</span>
jon<span class="token punctuation">.</span><span class="token function">hasOwnPrototype</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span>      <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>不需要通过实例对象，可以直接通过类来调用的方法，其中的 this 指向类本身</p>
<ul>
<li>静态方法可以被子类继承</li>
<li>静态方法可以通过类名调用，不能通过实例对象调用，否则会报错</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token function">doSay</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
Person<span class="token punctuation">.</span><span class="token function">doSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//hello</span>

<span class="token comment">//静态方法可以被子类继承</span>
<span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span> 
<span class="token punctuation">&#125;</span>
Sub<span class="token punctuation">.</span><span class="token function">doSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>

<span class="token comment">//静态方法可以通过类名调用，不能通过实例对象调用，否则会报错</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Person<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>
p<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">//  TypeError p.sum is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>setter 和 getter</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">get</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'getter'</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setter'</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> jon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
jon<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jon'</span> <span class="token comment">// setter jon</span>
jon<span class="token punctuation">.</span>name         <span class="token comment">// getter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>super关键字用于访问和调用 父类上的函数，可以调用父类的构造函数 也可以调用父类的普通函数</p>
<ul>
<li><strong>super在调用父类的构造函数时，会将父类构造函数的属性方法绑定到子类实例的构造对象中！</strong>super()，相当于执行了 new Father()；</li>
<li>super方法必须放在子类构造函数this调用之前，不然new Father()会覆盖掉this调用生成的对象</li>
<li>super() 里面有参数，相当于给父类的构造函数传参数</li>
</ul>
<h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>子类可以继承父类中的一些 方法和属性</p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块化，为了确定模块的依赖关系，以及输入和输出的变量。</p>
<p>ES6 的模块化分为导出（export） @与导入（import）两个模块。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><p>ES6 的模块自动开启严格模式</p>
</li>
<li><p>模块中可以导入和导出各种类型的变量，如函数，对象，字符串，数字，布尔值，类等。</p>
</li>
<li><p>每个模块都有自己的上下文，每一个模块内声明的变量都是局部变量，不会污染全局作用域。</p>
</li>
<li><p>每一个模块只加载一次（是单例的）， 若再去加载同目录下同文件，直接从内存中读取。</p>
</li>
</ul>
<h2 id="export、import、as"><a href="#export、import、as" class="headerlink" title="export、import、as"></a>export、import、as</h2><ul>
<li>export 命令可以出现在模块的任何位置，但必需处于模块顶层。</li>
<li>import 命令会提升到整个模块的头部，首先执行。</li>
<li>as 对于模板内部变量重命名，可以导入重命名 也可以导出重命名</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*-----export [test.js]-----*/</span>
<span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> myName <span class="token keyword">as</span> exportName <span class="token punctuation">&#125;</span>
 
<span class="token comment">/*-----import [xxx.js]-----*/</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> exportName <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./test.js"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exportName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><ul>
<li><p><strong>只读属性</strong>：可以改写 import 变量类型为对象的属性值，不能改写 import 中基本类型的值。</p>
</li>
<li><p><strong>单例模式</strong>：多次重复执行同一句 import 语句，那么只会执行一次</p>
</li>
<li><p><strong>静态执行特性</strong>：import 是静态执行，所以不能使用表达式和变量。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token string">"f"</span> <span class="token operator">+</span> <span class="token string">"oo"</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"methods"</span><span class="token punctuation">;</span>
<span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><ul>
<li>在一个文件或模块中，export、import 可以有多个，export default 仅有一个。</li>
<li>export default 中的 default 是对应的导出接口变量。</li>
<li>通过 export 方式导出，在导入时要加{ }，export default 则不需要。</li>
<li>export default 向外暴露的成员，可以使用任意变量来接收。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"My name is Tom!"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span> <span class="token comment">// 仅有一个</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span> 
<span class="token comment">// error，default 已经是对应的导出变量，不能跟着变量声明语句</span>
 
<span class="token keyword">import</span> b <span class="token keyword">from</span> <span class="token string">"./xxx.js"</span><span class="token punctuation">;</span> <span class="token comment">// 不需要加&#123;&#125;， 使用任意变量接收  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h1><ul>
<li><p>Promise是解决异步流程化的一种手段，从语法上说，Promise 是一个对象</p>
</li>
<li><p>Promise 有三种状态：pending（进行中）、resolved（已成功）和 rejected（已失败）</p>
<ul>
<li>Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变</li>
</ul>
</li>
<li><p>Promise 是构造函数，需要new，只有一个函数参数 excutor执行器，执行器有两个参数，resolve接收成功，reject接收失败</p>
</li>
<li><p>promise接受then方法调用，接受两个函数参数，第一个函数接收resolve的参数，第二个参数接收reject参数</p>
</li>
<li><p>excutor是同步执行，then是异步调用，在 JavaScript 事件队列的当前运行完成之前，then回调函数永远不会被调用</p>
</li>
<li><p>通过 <strong>.then</strong> 形式添加的回调函数，是可以链式调用的，中间需要return出去</p>
</li>
<li><p>浏览器中不能终止的 Promise 链里的 rejection，建议后面都跟上 <strong>.catch(error =&gt; console.log(error));</strong></p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 第一个then // 1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 第二个then // 2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 第三个then // undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h1><p> Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。</p>
<p>Generator 有两个区分于普通函数的部分：</p>
<ul>
<li>函数名之前有个 * ； * 用来表示函数为 Generator 函数</li>
<li>函数内部有 yield 表达式，用来定义函数内部的状态</li>
</ul>
<p>Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">yield</span> <span class="token string">'1'</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">yield</span> <span class="token string">'2'</span><span class="token punctuation">;</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token string">'3'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

f <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// one</span>
<span class="token comment">// &#123;value: "1", done: false&#125;</span>
 
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// two</span>
<span class="token comment">// &#123;value: "2", done: false&#125;</span>
 
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// three</span>
<span class="token comment">// &#123;value: "3", done: true&#125;</span>
 
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123;value: undefined, done: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h1><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"helloAsync"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Promise &#123;&lt;resolved>: "helloAsync"&#125;</span>
 
<span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// helloAsync</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await 操作符用于等待一个 Promise 对象，async 函数中遇到 await 就会先暂停执行，等到触发 操作完成后，恢复 async 函数的执行并返回解析值</p>
<p>await 关键字仅在 async function 中有效。如果在 async function 函数体外使用 await ，你只会得到一个语法错误</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript设计模式</title>
    <url>/archives/11ecb80b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>探讨一些经典和现代的设计模式的JavaScript实现。</p>
<p>没有最好的，只有最合适的</p>
<span id="more"></span>

<p>设计模式一共分为3大类23种</p>
<table>
<thead>
<tr>
<th>模式类型</th>
<th>设计模式</th>
</tr>
</thead>
<tbody><tr>
<td>创建型模式</td>
<td>单例模式、工厂模式、建造者模式</td>
</tr>
<tr>
<td>结构型模式</td>
<td>适配器模式、装饰器模式、代理模式</td>
</tr>
<tr>
<td>行为型模式</td>
<td>策略模式、观察者模式、发布订阅模式、职责链模式、中介者模式</td>
</tr>
</tbody></table>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>一个类只有一个实例，并提供一个访问他的全局访问点</p>
<p><img data-src="https://s2.loli.net/2023/03/19/blH6onuzgIYkC2w.png" alt="image-20230319225821142"></p>
<ul>
<li><p><code>Singleton</code> ：特定类，这是我们需要访问的类，访问者要拿到的是它的实例；</p>
</li>
<li><p><code>instance</code> ：单例，是特定类的实例，特定类一般会提供 <code>getInstance</code> 方法来获取该单例；</p>
</li>
<li><p><code>getInstance</code> ：获取单例的方法；</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Singleton<span class="token punctuation">.</span>_instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          Singleton<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 如果这个唯一的实例已经存在，则直接返回</span>
        <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>_instance
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>Vuex 实现了一个全局的store用来存储应用的所有状态。这个store的实现就是单例模式的典型应用。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>如果一个类实例化过程消耗资源比较多，可以使用单例避免性能浪费</p>
</li>
<li><p>需要公共状态，可以使用单例保证访问一致性。</p>
</li>
</ol>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式：根据不同的参数，返回不同类的实例。将对象的创建与对象的实现分离。实现复杂，但使用简单。<strong>直接使用工厂提供的方法即可</strong></p>
<p><strong>优点：</strong></p>
<ol>
<li><p>良好的封装，访问者无需了解创建过程，代码结构清晰。</p>
</li>
<li><p>扩展性良好，通过工厂方法隔离了用户和创建流程，符合开闭原则。</p>
</li>
</ol>
<p><strong>缺点：</strong></p>
<p>给系统增加了抽象性，带来了额外的系统复杂度，不能滥用</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p><code>document.createElement</code> 创建 <code>DOM</code> 元素。这个方法采用的就是工厂模式，方法内部很复杂，但外部使用很简单。</p>
<h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li><p>对象创建比较复杂，访问者无需了解创建过程。</p>
</li>
<li><p>需要处理大量具有相同/类似属性的小对象。</p>
</li>
</ul>
<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>用于解决兼容问题，接口/方法/数据不兼容，将其转换成访问者期望的格式进行使用。</p>
<p><img data-src="https://s2.loli.net/2023/03/19/KbpEs3lXA2ag7xL.png" alt="image-20230319230730502"></p>
<p>场景特点：</p>
<ol>
<li>整合第三方SDK</li>
<li>封装旧接口</li>
</ol>
<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><ul>
<li>动态地给某个对象添加一些额外的职责，，是一种实现继承的替代方案</li>
<li>在不改变原对象的基础上，通过对其进行包装扩展，使原有对象可以满足用户的更复杂需求，而不会影响从这个类中派生的其他对象</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/03/19/EOimUhK5A3dT2Lp.png" alt="image-20230319230958645"></p>
<p>有点原型链的味道</p>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>为一个对象提供一个代用品或占位符，以便控制对它的访问</p>
<h2 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>ES6的proxy</li>
<li>jQuery.proxy()方法</li>
</ul>
<h1 id="装饰者与代理模式的区别"><a href="#装饰者与代理模式的区别" class="headerlink" title="装饰者与代理模式的区别"></a>装饰者与代理模式的区别</h1><ul>
<li>装饰者模式： 扩展功能，原有功能不变且可直接使用</li>
<li>代理模式： 显示原有功能，但是经过限制之后的</li>
</ul>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>定义一系列算法，根据输入的参数决定使用哪个算法。</p>
<p><img data-src="https://s2.loli.net/2023/03/19/mQDhOwGroEkgXCu.png" alt="image-20230319231627454"></p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>场景：双十一满减活动。满200-20、满300-50、满500-100。这个需求，怎么写？</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// if-else：臃肿，难改动</span>
<span class="token keyword">function</span> <span class="token function">priceCalculate</span><span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>discountType <span class="token operator">===</span> <span class="token string">'discount200-20'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price<span class="token operator">/</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>discountType <span class="token operator">===</span> <span class="token string">'discount300-50'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price<span class="token operator">/</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>userType <span class="token operator">===</span> <span class="token string">'discount500-100'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price<span class="token operator">/</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//策略模式改写，隐藏了算法，预留了增加策略的入口，便于拓展</span>

<span class="token keyword">const</span> priceCalculate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> discountMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'discount200-20'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">'discount300-50'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price<span class="token operator">/</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">'discount500-100'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> price <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>price<span class="token operator">/</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token function">addStategy</span><span class="token punctuation">(</span><span class="token parameter">stategyName<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>discountMap<span class="token punctuation">[</span>stategyName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            discountMap<span class="token punctuation">[</span>stategyName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">priceCal</span><span class="token punctuation">(</span><span class="token parameter">discountType<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> discountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> discountMap<span class="token punctuation">[</span>discountType<span class="token punctuation">]</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>优点：</p>
<ol>
<li>策略相互独立，可以互相切换。提高了灵活性以及复用性。</li>
<li>不需要使用<code>if-else</code>进行策略选择，提高了维护性。</li>
<li>可扩展性好，满足开闭原则。</li>
</ol>
<p>缺点：</p>
<ol>
<li>策略相互独立，一些复杂的算法逻辑无法共享，造成资源浪费。</li>
<li>用户在使用策略时，需要了解具体的策略实现。不满足最少知识原则，增加了使用成本。</li>
</ol>
<h2 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>算法需要自由切换的场景。</li>
<li>多个算法只有行为上有些不同，可以考虑策略模式动态选择算法。</li>
<li>需要多重判断，可以考虑策略模式规避多重条件判断。</li>
</ol>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>一个对象（称为subject）维持一系列依赖于它的对象（称为observer），将有关状态的任何变更自动通知给它们（观察者）。</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：目标变化就会通知观察者，这是观察者模式最大的优点。</p>
<p>缺点： 目标和观察者是耦合在一起的，要实现观察者模式，必须同时引入被观察者和观察者才能达到响应式的效果。</p>
<h2 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h2><p>假设B站用户就是观察者，B站up主是被观察者，有多个的B站用户关注了青春湖北这个up主，当这个up主更新视频时就会通知这些关注的B站用户。</p>
<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>基于一个主题，希望接收通知的对象（称为subscriber）通过自定义事件订阅主题，被激活事件的对象（称为publisher）通过发布主题事件的方式被通知。</p>
<h2 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h2><p>微信会关注很多公众号，公众号有新文章发布时，就会有消息及时通知我们文章更新了。</p>
<p>这个时候公众号为发布者，用户为订阅者，用户将订阅公众号的事件注册到事件调度中心，当发布者发布新文章时，会发布事件至事件调度中心，调度中心会发消息告诉订阅者。</p>
<h3 id="Vue-双向绑定中的发布订阅模式"><a href="#Vue-双向绑定中的发布订阅模式" class="headerlink" title="Vue 双向绑定中的发布订阅模式"></a>Vue 双向绑定中的发布订阅模式</h3><p><img data-src="https://s2.loli.net/2023/03/19/C7fZDAMiQeozbBU.png" alt="image-20230319232727395"></p>
<p><code>Vue</code> 双向绑定通过数据劫持和发布-订阅模式实现</p>
<ul>
<li><p>通过<code>DefineProperty</code>劫持各个数据的<code>setter</code>和<code>getter</code>，并为每个数据添加一个订阅者列表，这个列表将会记录所有依赖这个数据的组件。</p>
<p>响应式数据相当于消息的发布者。</p>
</li>
<li><p>每个组件都对应一个<code>Watcher</code>订阅者，当组件渲染函数执行时，会将本组件的<code>Watcher</code>加入到所依赖的响应式数据的订阅者列表中。</p>
<p>这个过程叫做“依赖收集”。</p>
</li>
<li><p>当响应式数据发生变化时，会出<code>setter</code>，<code>setter</code>负责通知数据的订阅者列表中的<code>Watcher</code>，<code>Watcher</code>触发组件重新渲染来更新视图。</p>
<p>视图层相当于消息的订阅者。</p>
</li>
</ul>
<h1 id="观察者模式和发布订阅的区别"><a href="#观察者模式和发布订阅的区别" class="headerlink" title="观察者模式和发布订阅的区别"></a>观察者模式和发布订阅的区别</h1><p>观察者是经典软件<code>设计模式</code>中的一种，但发布订阅只是软件架构中的一种<code>消息范式</code></p>
<table>
<thead>
<tr>
<th>观察者模式</th>
<th>发布订阅</th>
</tr>
</thead>
<tbody><tr>
<td>2个角色</td>
<td>3个角色</td>
</tr>
<tr>
<td>重点是被观察者</td>
<td>重点是发布订阅中心</td>
</tr>
</tbody></table>
<p>观察与被观察的关系是通过<code>被观察者主动</code>建立的，<code>被观察者</code>至少要有三个方法——添加观察者、移除观察者、通知观察者。</p>
<p>发布订阅基于一个中心来建立整个体系，其中<code>发布者</code>和<code>订阅者</code>不直接进行通信，而是发布者将要发布的消息交由中心管理，订阅者也是根据自己的情况，按需订阅中心中的消息。</p>
<p>发布订阅的实现内部利用了<code>观察者模式</code>，但由于<code>发布订阅中心</code>这一中间层的出现，对于生产方和消费方的通信管理变得更加的可管理和可拓展。</p>
<p><a href="https://juejin.cn/post/6978728619782701087#heading-17">理解【观察者模式】和【发布订阅】的区别 - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/7061987842473345061">JS 常用的六种设计模式介绍 - 掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字符串相等陷阱</title>
    <url>/archives/2f6e7165.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前两天在android开发中判断两个字符串相等的时候犯了个小错误，就是在判断两个相同字符串的变量的时候用的是==，但是结果一直返回的是false，折腾了好久，一百度才知道在Java中判断字符串内容相等需要用equals函数。<br>搜了搜其他的资料，做了一些总结拓展，内容如下：</p>
<span id="more"></span>
<h1 id="内容判断和地址判断"><a href="#内容判断和地址判断" class="headerlink" title="内容判断和地址判断"></a>内容判断和地址判断</h1><p>在Java中字符串的判断分为内容判断和地址判断</p>
<ol>
<li>内容判断<br>其实百分之九十九需要的都是内容上的判断相等与否，而且绝大部分错误也是在这~<br>内容上在用equals函数，即 s1.equals(s2)</li>
<li>地址判断<br>地址判断指的是比较这两个字符串是否具有相同的地址；<br>一般来说，有相同的地址 内容上就肯定相同，<br>反之，内容上相同地址上不一定相同，这得具体看定义的是不是同一个对象<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行得到的结果是：<br>true<br>false</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/archives/5d36ff15.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>优雅地沉浸式记录，专注内容而不是纠结排版</p>
</blockquote>

<p>Markdown是一种轻量级标记语言，常用标记符号不到十个，用于日常写作记录十分方便,下面对于一些常用的markdown语法进行介绍…</p>
<img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/markdown.3uk7anieerg0.webp" alt="" style="zoom: 50%;" />

<span id="more"></span>

<h1 id="如何标题-amp-分段"><a href="#如何标题-amp-分段" class="headerlink" title="如何标题 &amp; 分段"></a>如何标题 &amp; 分段</h1><p>1个#是一级标题，2个#是二级标题，以此类推…<br>代码示例：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span>
<span class="token title important"><span class="token punctuation">##</span> 二级标题</span>
<span class="token title important"><span class="token punctuation">###</span> 三级标题</span>
<span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>seems like：</p>


<p>如果分段的话，使用空白行将需要分段的文本进行分隔即可~<br><strong>不要使用制表符tabs缩进段落，那是word用的</strong></p>
<h1 id="如何强调"><a href="#如何强调" class="headerlink" title="如何强调"></a>如何强调</h1><p>通过设置特定的文本形式来强调其重要性</p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>倾斜的文字左右1个*</p>
<h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p>加粗的文字左右2个*</p>
<h2 id="倾斜加粗"><a href="#倾斜加粗" class="headerlink" title="倾斜加粗"></a>倾斜加粗</h2><p>倾斜并且加粗的文字左右3个*</p>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>加删除线的文字左右2个~</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-none"><code class="language-none">*倾斜体*
**加粗体**
***倾斜且加粗***
~~删除线~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>seems like：</p>


<h1 id="如何引用"><a href="#如何引用" class="headerlink" title="如何引用"></a>如何引用</h1><ol>
<li>在需要的文字前添加一个&gt;符号</li>
<li>引用可以嵌套，比如加&gt;&gt;,也可以加&gt;&gt;&gt;</li>
<li>如果引用内有分段，在段落之间的空白行添加一个&gt;符号<br>引用内可以包含其他格式的元素，比如 -</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-none"><code class="language-none">&gt; 天青色等烟雨
&gt;
&gt; 而我在等你
&gt;&gt; - 翠烟袅袅升起
&gt;&gt; - 隔江千万里
&gt;&gt; - 如传世的青花瓷
&gt;&gt; - 自顾自美丽<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>seems like：</p>


<h1 id="如何使用列表"><a href="#如何使用列表" class="headerlink" title="如何使用列表"></a>如何使用列表</h1><p>列表分为有序和无序两种</p>
<h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><p>列表项前添加数字并紧跟1个<strong>英文</strong>句号，数字应当从1开始</p>
<h2 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h2><p>在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+)，通过缩进可创建嵌套列表</p>
<h2 id="嵌套其他元素"><a href="#嵌套其他元素" class="headerlink" title="嵌套其他元素"></a>嵌套其他元素</h2><p>在使用前缩进4个空格或者1个制表符（tab）</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-none"><code class="language-none">* 打开窗 最后望一望
* 今夜的月亮要去的地方
    留恋吗 所有的旧时光
* 什么也挽不回 就留下吧
    - 忘了吧伤心的那一天
    - 孤单的邮差送来的那份悲哀
    1. 忘了冷冷的大街上
    2. 冷冷的人群丢失的岁月皑皑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>seems like：</p>


<h1 id="如何使用链接"><a href="#如何使用链接" class="headerlink" title="如何使用链接"></a>如何使用链接</h1><p><code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><br>这里的title指的是 鼠标悬停在链接上时会出现的文字，是可选项，与地址之间以空格分隔<br>eg：</p>
<pre class="line-numbers language-none"><code class="language-none">[这是一个bing官网](https:&#x2F;&#x2F;www.bing.com &quot;bingbingbing&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://www.bing.com/" title="bingbingbing">这是一个bing官网</a></p>
<p>也可以使用尖括号 将URL直接变成可点击的链接<br>eg：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;https:&#x2F;&#x2F;www.bing.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://www.bing.com/">https://www.bing.com</a></p>
<h1 id="如何使用图片"><a href="#如何使用图片" class="headerlink" title="如何使用图片"></a>如何使用图片</h1><p><code>![图片alt](图片链接 &quot;图片title&quot;)</code></p>
<ul>
<li>图片alt：图片加载失败时你看到的东西</li>
<li>图片链接: 图片链接</li>
<li>图片title：鼠标悬停在图片上时会出现的文字</li>
</ul>
<p>eg:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token punctuation">[</span>markdown<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>gh<span class="token operator">/</span>ych<span class="token operator">-</span>chen<span class="token operator">/</span>image_hosting@main<span class="token operator">/</span>content<span class="token operator">/</span>markdown<span class="token punctuation">.</span>3uk7anieerg0<span class="token punctuation">.</span>webp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/markdown.3uk7anieerg0.webp" alt="markdown" style="zoom:50%;" />

<h1 id="几个注意项"><a href="#几个注意项" class="headerlink" title="几个注意项"></a>几个注意项</h1><ul>
<li>以上格式语法之间基本上都是可以混用的，比如强调可以用在链接上，列表里也可以插入图片…随意DIY</li>
<li>很多时候没有意料中的结果，都是因为在符号和文本之间少了一个空格</li>
<li>hexo并不支持markdown格式的图片引用方法</li>
<li>使用完列表后，记得空一行继续写作，不然下一行就归为列表下属内容了</li>
<li>…</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://markdown.com.cn/">Markdown官方教程</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch学习笔记</title>
    <url>/archives/6859e29c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>科研所迫，开始入坑深度学习。<br>之前断断续续的学过一些，了解一些概念，但没怎么敲过代码，看源码笔记费劲，更别谈复现了<br>好友给我推荐了一个通俗易懂的pytorch教程，花了三天看了一遍，这个教程讲得真的很好，为小土堆点赞</p>
<p>今后忘记了再去看一遍视频又十分耗时间，所以在此做一下学习笔记，一是加深印象，二是方便自己后面随时复习</p>
<p><img data-src="https://s2.loli.net/2022/03/17/KmlhoFEewVQ8Ab3.png"></p>
<span id="more"></span>

<h1 id="cuda的安装检查"><a href="#cuda的安装检查" class="headerlink" title="cuda的安装检查"></a>cuda的安装检查</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>返回Ture，即GPU可用</p>
<p>返回Flase，即GPU不可用，需要去好好检查一下了。</p>
<h1 id="Python两大法宝函数"><a href="#Python两大法宝函数" class="headerlink" title="Python两大法宝函数"></a>Python两大法宝函数</h1><p>以torch.cuda.is_available()这个函数为例</p>
<pre class="line-numbers language-none"><code class="language-none">dir(torch.cuda.is_available)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以列表的形式返回 torch.cuda.is_available 所有的子函数or方法，具体效果如图所示：</p>
<img data-src="https://s2.loli.net/2022/03/17/Y6Rwh87aBV4GcNi.png" style="zoom:50%;" />

<pre class="line-numbers language-none"><code class="language-none">torch.cuda.is_available?? <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在函数后加2个？，不要再加括号，即可返回该函数的具体用法，方便用户查看，具体效果如图所示：</p>
<img data-src="https://s2.loli.net/2022/03/18/YNaCLUhJjuogxty.png" style="zoom: 50%;" />

<h1 id="Pytorch加载数据"><a href="#Pytorch加载数据" class="headerlink" title="Pytorch加载数据"></a>Pytorch加载数据</h1><h2 id="Dataset-定义自己的数据类"><a href="#Dataset-定义自己的数据类" class="headerlink" title="Dataset 定义自己的数据类"></a>Dataset 定义自己的数据类</h2><p>torch.utils.data.Dataset 提供一种方式去获取数据及其label，方便用户去定义自己的数据类。在重写dataset抽象类的时候，需要定义<code>__getitem__和__len__</code>这个两个函数</p>
<p><img data-src="https://s2.loli.net/2022/03/17/FbDdlzPN7wCRUSG.png"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> os

<span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root_dir<span class="token punctuation">,</span>label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#  后面的变量都需要一开始在这初始化</span>
        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir
        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span> label_dir
        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>

        
    <span class="token comment">#  __getitem__ 是必须要的重写函数，不要写错了</span>
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
         img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
         img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">,</span>img_name<span class="token punctuation">)</span>
         img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>
         label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir
         <span class="token comment"># 返回的是一个数组</span>
         <span class="token keyword">return</span> img<span class="token punctuation">,</span>label

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span>

<span class="token comment"># r表示不转义(python基础)</span>
root_dir <span class="token operator">=</span> <span class="token string">r"hymenoptera_data\train"</span>
ants_label_dir <span class="token operator">=</span> <span class="token string">"ants"</span>
bees_label_dir <span class="token operator">=</span> <span class="token string">"bees"</span>
ants_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span>ants_label_dir<span class="token punctuation">)</span>
bees_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span>bees_label_dir<span class="token punctuation">)</span>   

<span class="token comment"># 返回的是一个数组，所以a = img ，b = label (python基础)</span>
a<span class="token punctuation">,</span>b <span class="token operator">=</span> bees_dataset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img data-src="https://s2.loli.net/2022/03/17/o9CavfKeWTLmjw2.png" style="zoom:67%;" />

<h2 id="dataloader如何处理数据集中的数据"><a href="#dataloader如何处理数据集中的数据" class="headerlink" title="dataloader如何处理数据集中的数据"></a>dataloader如何处理数据集中的数据</h2><p>torch.utils.data.dataloader 官方文档解释为：</p>
<p>Combines a dataset and a sampler, and provides an iterable over the given dataset.</p>
<p>简而言之：在后面的步骤中，如何去处理数据集中的数据，常用的参数有</p>
<ul>
<li><p>dataset：需要加载的是数据集是哪个 dataset from which to load the data.</p>
</li>
<li><p>batch_size：一次要加载多少个数据 how many samples per batch to load，default: <code>1</code></p>
</li>
<li><p>shuffle：每轮加载是否打乱顺序，set to <code>True</code> to have the data reshuffled at every epoch (default: <code>False</code>).</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

<span class="token comment">#加载内置的数据集</span>
test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> trans_tensor <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment">#在后面的步骤中如何去处理数据集的数据呢，每次去64个，每轮采用中不打乱</span>
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> test_set<span class="token punctuation">,</span> batch_size <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> shuffle <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>
    <span class="token comment"># 一个data里有64个img，64个targets</span>
    imgs<span class="token punctuation">,</span>targets <span class="token operator">=</span> data
    
    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="https://s2.loli.net/2022/03/17/et4qQZK8rCEJfyI.png"></p>
<p>可以看到，imgs.shape = [64, 3, 32, 32] ，64张照片，3个通道，32*32像素</p>
<p>targets是一个64个数字的列表</p>
<p>由此验证，一个data里有64个img，64个targets。</p>
<h1 id="TensorBoard的使用"><a href="#TensorBoard的使用" class="headerlink" title="TensorBoard的使用"></a>TensorBoard的使用</h1><h2 id="what-is-TensorBoard"><a href="#what-is-TensorBoard" class="headerlink" title="what is TensorBoard"></a>what is TensorBoard</h2><p>对大部分人而言，深度神经网络就像一个黑盒子，其内部的组织、结构、以及其训练过程很难理清楚，这给深度神经网络原理的理解和工程化带来了很大的挑战。</p>
<p>TensorBoard是tensorflow内置的一个可视化工具，现在在pytorch也可以使用，具体可以做：</p>
<ul>
<li>跟踪和可视化损失及准确率等指标</li>
<li>可视化模型图（操作和层）</li>
<li>查看权重、偏差或其他张量随时间变化的直方图</li>
<li>将嵌入投射到较低的维度空间</li>
<li>显示图片、文字和音频数据</li>
<li>……</li>
</ul>
<h2 id="how-to-use-TensorBoard-in-pytorch"><a href="#how-to-use-TensorBoard-in-pytorch" class="headerlink" title="how to use TensorBoard in pytorch"></a>how to use TensorBoard in pytorch</h2><p>直接在代码里记录吧</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

<span class="token comment"># 给本次的可视化结果命个名，运行代码之后会发现多一个logs文件夹</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 在可视化结果添加一个表格，表格名字为"y=2x"，纵坐标为2*i，横坐标为i</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"y=2x"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span>

image_path <span class="token operator">=</span> <span class="token string">r"hymenoptera_data\train\ants\0013035.jpg"</span>
image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>

image_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span>

<span class="token comment"># 在可视化结果添加一张照片，表格名字为"y=2x"，纵坐标为img_tensor ，横坐标为step第几步骤了</span>
<span class="token comment"># If you have non-default dimension setting, set the dataformats argument.</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">,</span>img_tensor <span class="token operator">=</span> image_array<span class="token punctuation">,</span>global_step  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>dataformats<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"HW3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img data-src="https://s2.loli.net/2022/03/17/KJQqxlf2yLpg7ER.png" style="zoom:80%;" />



<p>我对TensorBoard的理解是一个嵌入式的强大Excel，方便我们对于训练过程的理解</p>
<h1 id="transform的使用"><a href="#transform的使用" class="headerlink" title="transform的使用"></a>transform的使用</h1><p>torchvision.transforms是pytorch中的图像预处理包，包含了很多种对图像数据进行变换的函数</p>
<p>就是将图像数据的格式做各种转化，满足后续的使用</p>
<p>下面写一下常用的变换方法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>

<span class="token comment"># 加载一张照片进来做测试</span>
image_path <span class="token operator">=</span> <span class="token string">r"hymenoptera_data\train\ants\892108839_f1aad4ca46.jpg"</span>
image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>

<span class="token comment"># ToTensor</span>
<span class="token comment"># Convert a PIL Image or numpy.ndarray to tensor.</span>
trans_tensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>
img_tensor <span class="token operator">=</span> trans_tensor<span class="token punctuation">(</span>image<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"ToTensor"</span><span class="token punctuation">,</span>img_tensor<span class="token punctuation">)</span>

<span class="token comment"># Normalize逐channel的对图像进行标准化（均值变为0，标准差变为1），可以加快模型的收敛</span>
trans_norm <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
img_norm <span class="token operator">=</span> trans_norm<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Normalize"</span><span class="token punctuation">,</span>img_norm<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># Resize</span>
trans_resize <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
img_resize <span class="token operator">=</span> trans_resize<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Resize"</span><span class="token punctuation">,</span>img_resize<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment"># Compose 把多个transforms的功能按照列表集合到一起</span>
trans_resize_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1026</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
trans_compose <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_resize_2<span class="token punctuation">,</span>trans_tensor<span class="token punctuation">]</span><span class="token punctuation">)</span>
img_resize_2 <span class="token operator">=</span> trans_compose<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Compose"</span><span class="token punctuation">,</span>img_resize_2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># RandomCrop 随机裁剪，不按照比例进行缩放</span>
trans_RandomCrop <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
trans_compose_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_RandomCrop<span class="token punctuation">,</span>trans_tensor<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img_crop <span class="token operator">=</span> trans_compose_2<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"RandomCrop"</span><span class="token punctuation">,</span>img_crop<span class="token punctuation">,</span>i<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="数据集的使用"><a href="#数据集的使用" class="headerlink" title="数据集的使用"></a>数据集的使用</h1><p>pytorch提供了很多自带的开源数据集，我们只需要通过很简单的几行代码即可调用</p>
<p>方便初期的学习使用，后期就需要构建自己的数据集</p>
<p>影像数据集地址：<a href="https://pytorch.org/vision/stable/datasets.html">https://pytorch.org/vision/stable/datasets.html</a></p>
<p>CIFAR10论文地址：<a href="https://www.cs.toronto.edu/~kriz/cifar.html">https://www.cs.toronto.edu/~kriz/cifar.html</a></p>
<p>这里我们以CIFAR10为例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

<span class="token comment"># 把我们加载进来的图片转变成tensor格式，方便后续处理</span>
trans_tensor <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>

train_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> trans_tensor <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> trans_tensor <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不同数据集参数的调用上会有一些差别，基本大同小异，这里以CIFAR10为例;</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">root：数据集路径在哪
train：这是数据集中的训练集吗
transform：需要对数据集中的数据做哪些预处理吗，我这里的ToTensor就是变换张量处理
download：是否需要从网络上下载该数据集，如果下载过慢可以自己去相应的下载地址里用<span class="token constant">IDM</span>等工具主动下载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="神经网络的搭建"><a href="#神经网络的搭建" class="headerlink" title="神经网络的搭建"></a>神经网络的搭建</h1><p>可以把以下代码当成个模板，有什么内容在里面填充即可</p>
<p>以下只涉及了<strong>前向反馈</strong>，是最简单的模板</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn

<span class="token comment"># nn.Module：Base class for all neural network modules.</span>
<span class="token comment"># 所有的模型都必须继承这个类</span>
<span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token comment"># 所有的模型都必须继承这个类</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 把输入的加个1再返回出去</span>
        output <span class="token operator">=</span> <span class="token builtin">input</span><span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">return</span> output

<span class="token comment"># 初始化这个类</span>
module <span class="token operator">=</span> Module<span class="token punctuation">(</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> module<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面一一往框架里填充内容，让我们的神经网络丰富起来~</p>
<h1 id="卷积层的使用"><a href="#卷积层的使用" class="headerlink" title="卷积层的使用"></a><strong>卷积层的使用</strong></h1><h2 id="如何去理解卷积层"><a href="#如何去理解卷积层" class="headerlink" title="如何去理解卷积层"></a>如何去理解卷积层</h2><p>学过数字图像处理应该就很好理解这个概念，就是拿一个模板去遍历图像里的栅格，得到一个处理过的新图像。</p>
<p>更为详细的理解就不赘述了，在网上有很多很好的视频教程。</p>
<ul>
<li><p><a href="https://pytorch.org/docs/stable/nn.html#convolution-layers">https://pytorch.org/docs/stable/nn.html#convolution-layers</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?p=17">https://www.bilibili.com/video/BV1hE411t7RN?p=17</a></p>
</li>
</ul>
<p>我们在官方文档的介绍里看到有很多种卷积层结构，1d即为一维卷积核，2d即为二维卷积核，我们以最常用的二维卷积核为代码实例</p>
<img data-src="https://s2.loli.net/2022/03/17/1jPUzN5esZ4J2Sv.png" style="zoom: 50%;" />

<h2 id="如何去使用卷积层"><a href="#如何去使用卷积层" class="headerlink" title="如何去使用卷积层"></a>如何去使用卷积层</h2><p>结合上文里学到的知识点做一次代码实操记录</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

<span class="token comment"># 引入数据集</span>
dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 每次中数据集中取64张照片</span>
dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset <span class="token punctuation">,</span>batch_size  <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 先在__init__定义好conv1之后才可以在后续中调用</span>
        <span class="token comment"># Conv2d参数含义往下看</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

module <span class="token operator">=</span> Module<span class="token punctuation">(</span><span class="token punctuation">)</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">'CIFAR10'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span>targets <span class="token operator">=</span> data
    <span class="token builtin">input</span> <span class="token operator">=</span> imgs
    output <span class="token operator">=</span> module<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    
    <span class="token comment"># torch.size([64,3,32,32])</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"Conv2d"</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># torch.size([64,6,30,30]) -> [-1,3,30,30]</span>
    <span class="token comment"># add_images不支持加载6通道的Tensor，所以需要做一下reshape，reshape之后变成了[128,3,30,30]</span>
    <span class="token comment"># -1的意思是 这个位置的大小自动计算出</span>
    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"Conv2d"</span><span class="token punctuation">,</span>output<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

    step <span class="token operator">+=</span> <span class="token number">1</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Conv2d具体参数含义：</p>
<ul>
<li>in_channels：输入通道数，一般照片都是3，在遥感影像里就要多注意</li>
<li>out_channels：卷积后的通道数</li>
<li>kernel_size：卷积核的长*宽，kernel_size = 3 即 3*3的卷积核</li>
<li>stride：卷积核每次<strong>移动的格数</strong>，默认都是1</li>
<li>padding：边缘填充格数，这决定了输入的图像尺寸大小，<strong>这个参数由卷积核的大小和输入图像尺寸决定</strong>，画图一看就很好理解，不要去背公式！</li>
</ul>
<p>result：</p>
<p>这里明显可以看出，输入的图像是64张，输入变成了128张</p>
<p>卷积之后的图片也变得面目全非~这就算是一次特征变换吧</p>
<img data-src="https://s2.loli.net/2022/03/17/YIEdVKMT5pNOLJX.png" style="zoom:50%;" />

<h1 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h1><h2 id="如何去理解池化层"><a href="#如何去理解池化层" class="headerlink" title="如何去理解池化层"></a>如何去理解池化层</h2><p>池化层一般来说就是降采样。有很多种池化方式，最常见的是最大池化</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1hE411t7RN?p=19">https://www.bilibili.com/video/BV1hE411t7RN?p=19</a></li>
<li><a href="https://pytorch.org/docs/stable/nn.html#pooling-layers">https://pytorch.org/docs/stable/nn.html#pooling-layers</a></li>
</ul>
<p>以最大池化为例：将输入的图像划分为若干个矩形区域，对每个子区域输出最大值，如下图所示</p>
<img data-src="https://s2.loli.net/2022/03/17/8rD7cqdtwLiFTJR.png" style="zoom: 80%;" />

<p>从上面的例子可以看出，池化层的引入明显就是一种对于数据的压缩，为什么要引入池化层呢</p>
<ul>
<li><strong>降维、去除冗余信息、对特征进行压缩、简化网络复杂度</strong></li>
<li><strong>在一定程度上也控制了过拟合</strong></li>
</ul>
<h2 id="如何去使用池化层"><a href="#如何去使用池化层" class="headerlink" title="如何去使用池化层"></a>如何去使用池化层</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset <span class="token punctuation">,</span>batch_size  <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 在__init__定义好MaxPool2d</span>
        <span class="token comment"># 参数见下</span>
        self<span class="token punctuation">.</span>maxP2d <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxP2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

module <span class="token operator">=</span> Module<span class="token punctuation">(</span><span class="token punctuation">)</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">'CIFAR10'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span>targets <span class="token operator">=</span> data
    <span class="token builtin">input</span> <span class="token operator">=</span> imgs
    output <span class="token operator">=</span> module<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token comment"># torch.size([64,3,32,32])</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"maxpool"</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># torch.size([64,3,16,16]) </span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"maxpool"</span><span class="token punctuation">,</span>output<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>MaxPool2d具体参数含义：基本和卷积层很像</p>
<ul>
<li>kernel_size：层化核的长*宽，kernel_size =2 即 3*3的层化核</li>
<li>stride：层化核每次<strong>移动的格数</strong></li>
<li>padding：边缘填充格数，这决定了输入的图像尺寸大小，<strong>这个参数由卷积核的大小和输入图像尺寸决定</strong>，画图一看就很好理解，不要去背公式！</li>
</ul>
<p>图像池化之后很明显的变模糊了，因为像素格数发生了变化  [3,32,32] –&gt; [3,16,16]</p>
<p><img data-src="https://s2.loli.net/2022/03/17/csja6AeYC4nDMxB.png"></p>
<h1 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h1><h2 id="什么是非线性激活"><a href="#什么是非线性激活" class="headerlink" title="什么是非线性激活"></a>什么是非线性激活</h2><p>就是引入激活函数，使得神经网络有拟合非线性函数的能力，这样就可以任意逼近任何非线性函数，从而应用到众多的非线性模型中。</p>
<h2 id="常见的激活函数"><a href="#常见的激活函数" class="headerlink" title="常见的激活函数"></a>常见的激活函数</h2><p>先列着，以后深刻理解了各自的应用场景之后再来补充</p>
<h3 id="Sigmoid激活函数"><a href="#Sigmoid激活函数" class="headerlink" title="Sigmoid激活函数"></a>Sigmoid激活函数</h3><img data-src="https://pic4.zhimg.com/80/v2-eadc7f0dac07fe2d5f45c1e409694b13_720w.jpg" style="zoom:50%;" />

<p>函数式： <img data-src="https://www.zhihu.com/equation?tex=f(x)=%5Csigma=%5Cfrac%7B1%7D%7B1+e%5E%7B-x%7D%7D"><br>导数式： <img data-src="https://www.zhihu.com/equation?tex=f%5E%7B%27%7D(x)=%5Csigma(1-%5Csigma)"></p>
<p>值域：（0，1)</p>
<h3 id="ReLU激活函数"><a href="#ReLU激活函数" class="headerlink" title="ReLU激活函数"></a>ReLU激活函数</h3><p>ReLU又叫“修正线性单元”，或者“线性整流函数”。</p>
<img data-src="https://pic4.zhimg.com/80/v2-e4618f7c8ba93dd4b7f7ac684f7cb5f3_720w.jpg" style="zoom: 67%;" />

<p>函数式： <img data-src="https://www.zhihu.com/equation?tex=f(x)=max(0,x)" alt="[公式]"><br>导数式： <img data-src="https://www.zhihu.com/equation?tex=f%5E%7B%27%7D(x)+=++%5Cbegin%7Bcases%7D+++++1+&+%5Ctext%7B(x%3E=0)%7D++%5C%5C++++0+++++++&+%5Ctext%7B(x%3C0)%7D++%5Cend%7Bcases%7D%5C%5C" alt="[公式]"><br>值域：[0，+∞)</p>
<h2 id="激活函数的使用"><a href="#激活函数的使用" class="headerlink" title="激活函数的使用"></a>激活函数的使用</h2><p>就不重复写一大堆了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 先声明好</span>
        self<span class="token punctuation">.</span>ReLU <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>Sigmoid <span class="token operator">=</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>
 	<span class="token comment"># 再调用</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们用的是Sigmoid，看值域压缩到（0,1），看一下对比结果</p>
<p>可以发现压缩之后就仿佛蒙上了<strong>一层蒙版</strong>，雾里看图的感觉</p>
<img data-src="https://s2.loli.net/2022/03/17/nWH7OiTbvw6xMRV.png" alt="image-20220317230130950" style="zoom:67%;" />

<h1 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h1><p>线性层又称为全连接层，其每个神经元与上一个层所有神经元相连，实现对前一层的线性组合或线性变换</p>
<p>我对线程层的理解就是最后的分类，<em>不知道对不对</em></p>
<p>让我们简单看个例子</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Linear
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root <span class="token operator">=</span> <span class="token string">'./CIFAR10'</span><span class="token punctuation">,</span>train <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset <span class="token punctuation">,</span>batch_size  <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>drop_last <span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 定义线性层</span>
        self<span class="token punctuation">.</span>Linear <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">196608</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

module <span class="token operator">=</span> Module<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span>targets <span class="token operator">=</span> data

    <span class="token comment"># torch.size([64,3,32,32])</span>
    <span class="token builtin">input</span> <span class="token operator">=</span> imgs
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

    <span class="token comment"># torch.size([196608])</span>
    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

    <span class="token comment"># torch.size([10])</span>
    output1 <span class="token operator">=</span> module<span class="token punctuation">(</span>output<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>output1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Linear(196608,10) 第一个参数196608是由输入图像的特征所得到的</p>
<p>即 <strong>64,3,32,32</strong> 四个数相乘 = 196608，</p>
<p>为什么要 在module(output)之前 加一个flatten呢？就是对高维张量tensor做一个压缩，这样才能满足Linear的参数格式</p>
<p>Linear的用法很直接，最终打印的tensor.shape也和我们预想的一样</p>
<p><img data-src="https://s2.loli.net/2022/03/17/xQhGsE6lkrDnKJf.png"></p>
<h1 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h1><p>Sequential就是一种简化表达</p>
<p>如果你的模型很复杂，有很多中间层，没有Sequential，写起来可能就是这样</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxpool2 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> 
        self<span class="token punctuation">.</span>maxpool3 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>flatten <span class="token operator">=</span> Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>Linear1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>Linear2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了Sequential，写起来就是这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码的简洁明了很重要</p>
<h1 id="损失函数-amp-反向传播"><a href="#损失函数-amp-反向传播" class="headerlink" title="损失函数 &amp; 反向传播"></a>损失函数 &amp; 反向传播</h1><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p>神经网络的训练过程一般来说就是 在已经x和y（又称标签）的训练集中，输入一个值（x)，通过一连串的网络结构(前向反馈)之后得到 预测的一个值（y’)，计算y‘和y的差距（损失函数），将这个差距反馈给网络（反向传播），以此来更新网络中的参数，以上的过程被称为一个epoch；然后我们再传入一次参数，一直往复，直至我们的损失函数小到让我们接受。</p>
<p>损失函数就是用一个函数来衡量我们预测的值和实际的值的差距是多少</p>
<p>不同的损失函数，有着不同的计算方式，适用于不同的场景，常见的有最小二乘、交叉熵、平均绝对值误差</p>
<ul>
<li><a href="https://pytorch.org/docs/stable/nn.html#loss-functions">https://pytorch.org/docs/stable/nn.html#loss-functions</a></li>
</ul>
<img data-src="https://s2.loli.net/2022/03/18/8532WQPyFdiVZjw.png" alt="image-20220318110120972" style="zoom:50%;" />

<p>官方文档给出了很多损失函数，以后再去慢慢探究其中的差异</p>
<p>反向传播是现在众多深度学习训练方法的基础，通过计算神经网络中损失函数对各参数的梯度，配合优化方法更新参数，从而降低损失函数。</p>
<ul>
<li><a href="https://pytorch.org/docs/stable/optim.html">https://pytorch.org/docs/stable/optim.html</a></li>
</ul>
<p>介绍一下主要的优化器：</p>
<p>SGD，随机梯度下降</p>
<p>SGDM，SGD with momentum，加入动量机制的SGD</p>
<p>Adagrad，自适应梯度下降。利用迭代次数和累计梯度，对学习率进行自动衰减</p>
<p>学习率除以前t-1迭代的梯度平方和，没有考虑迭代衰减</p>
<p>RMSProp，在Adagrad的基础上加入了对于迭代衰减的考虑，学习率除以前t-1迭代的梯度的加权平方和。与当前迭代越近的梯度，对当前的影响应该越大。</p>
<p>Adam，SGDM和RMSProp的结合，基本解决了梯度下降的一系列问题，比如随机小样本、自适应学习率、容易卡在梯度较小点等问题。</p>
<p>（具体比较在之后补充）</p>
<h2 id="代码实操"><a href="#代码实操" class="headerlink" title="代码实操"></a>代码实操</h2><p>先以<strong>交叉熵</strong>和<strong>SGD</strong>作为代码实例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义要用什么损失函数</span>
loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 定义要用什么反向传播优化器</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params <span class="token operator">=</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>

<span class="token comment"># 数据训练一轮是不够的，需要多轮训练，即多个epoch</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
        imgs<span class="token punctuation">,</span>targets <span class="token operator">=</span> data
        outputs <span class="token operator">=</span> module<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
        result_loss <span class="token operator">=</span> loss<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span>targets<span class="token punctuation">)</span>
        <span class="token comment"># 每次优化前都对模型中的参数梯度做清零</span>
        optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 求出每个节点的梯度</span>
        result_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 对模型参数进行调优</span>
        optim<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>optim.SGD具体参数介绍：</p>
<ul>
<li>params：优化器要对哪个模型的参数做优化，这里填的是model.parameters()</li>
<li>lr：leanring rate，学习率，学习率的设置影响了模型训练的速率和好坏，需要根据实际情况做多次测试进行调整</li>
<li>momentum：动量大小，</li>
</ul>
<p>pytorch里的SGD方法实际上就涵盖了SGD和SGDM，区别就在于是否设置momentum</p>
<p>设置了momentum，就是SGDM</p>
<p>不设置momentum，就是SGD</p>
<h1 id="模型的使用及修改"><a href="#模型的使用及修改" class="headerlink" title="模型的使用及修改"></a>模型的使用及修改</h1><p>官方文档里内置了很多有名的深度学习模型，当我们想直接使用的时候需用在model下调用即可</p>
<ul>
<li>计算机视觉的模型：<a href="https://pytorch.org/vision/stable/models.html">https://pytorch.org/vision/stable/models.html</a></li>
<li>NLP的模型：<a href="https://pytorch.org/audio/stable/models.html#conformer">https://pytorch.org/audio/stable/models.html#conformer</a></li>
</ul>
<p>以vgg16模型为例，如何使用呢</p>
<p><img data-src="https://s2.loli.net/2022/03/18/dExpwOj94KICbAJ.png"></p>
<p>以上简单两行代码就可以了，其中<strong>pretrained</strong>表示是否下载训练好的模型<br>  pretrained (bool): If True, returns a model pre-trained on ImageNet<br>当我们打印这个模型的时候会发现，最后的输出是1000，即这个模型可以分类出1000个类别</p>
<p>当我们将这个模型用在自己的数据集，肯定要做一些修改，</p>
<p>比如我们的数据集类别只有10个类，那如何修改呢</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision

vgg16_true <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
vgg16_false <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 在模型最下面添加一个线性层</span>
vgg16_true<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"add_linear"</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 把模型最下面的一个线性层做修改</span>
vgg16_false<span class="token punctuation">.</span>classifier<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="网络模型的保存与读取"><a href="#网络模型的保存与读取" class="headerlink" title="网络模型的保存与读取"></a>网络模型的保存与读取</h1><p>模型的保存和读取是一起的，各有两种方式</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">vgg16_false <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 保存方式1，可以保存下来模型的结构+模型里的参数</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>obj <span class="token operator">=</span> vgg16_false<span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span>
<span class="token comment"># 加载方式1</span>
model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">vgg16_true <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 保存方式2，只保存 模型的参数（推荐)</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>vgg16_true<span class="token punctuation">.</span>state_dict<span class="token punctuation">,</span><span class="token string">"vgg16_method2.pth"</span><span class="token punctuation">)</span>
<span class="token comment"># 加载方式2</span>
vgg16_true<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg16_method2.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="如何使用GPU训练"><a href="#如何使用GPU训练" class="headerlink" title="如何使用GPU训练"></a>如何使用GPU训练</h1><p>GPU是深度学习必不可少的一块内容，可以提高训练速度。</p>
<p>使用GPU训练，其他的地方都不用改动</p>
<p>只需要改动三块内容，分别是网络模型、数据和损失函数</p>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 网络模型</span>
model <span class="token operator">=</span> Module<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">:</span>
    model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据</span>
<span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">:</span>
    imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>
    targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 损失函数</span>
loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">:</span>
    loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>

<span class="token comment"># 网络模型</span>
model<span class="token punctuation">.</span>todevice<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
<span class="token comment"># 数据</span>
imgs<span class="token punctuation">.</span>todevice<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
targets<span class="token punctuation">.</span>todevice<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
<span class="token comment"># 损失函数</span>
loss_fn<span class="token punctuation">.</span>todevice<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">!nvidia <span class="token operator">-</span>smi 
这个命令查看本机的GPU配置和使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>到这里，pytorch主要模块的介绍就结束了。</p>
<p>把这些组装起来，就是一个完整简单的深度学习框架。</p>
<p>下篇笔记中，做一个完整的实例介绍。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li>非线性激活：<a href="https://zhuanlan.zhihu.com/p/260970955">https://zhuanlan.zhihu.com/p/260970955</a></li>
<li>优化器的对比：<a href="https://xieyangyi.blog.csdn.net/article/details/108268525">https://xieyangyi.blog.csdn.net/article/details/108268525</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/archives/71513ccb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://cn.vuejs.org/">Vue</a>(发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架，vue两大特点：</p>
<ul>
<li>声明式渲染，基于标准HTML拓展一套模板语法，声明式描述最终HTML和JS的关系</li>
<li>响应式，自动跟踪JS状态变化并响应式更新DOM</li>
</ul>
<p>此时不学 更待何时，不想毕业就失业的我 (っ °Д °;) っ</p>
<img data-src="https://s2.loli.net/2022/08/25/38AVRdfv1qMwCUP.png" alt="" style="zoom: 80%;" />

<span id="more"></span>

<h1 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h1><ol>
<li>vite-cdn</li>
</ol>
<p>npm init -y + yarn add vite -D  + 在html中引入vue的cdn</p>
<ol start="2">
<li>vue脚手架</li>
</ol>
<p>npm init vue@latest</p>
<h1 id="Vue-基础"><a href="#Vue-基础" class="headerlink" title="Vue 基础"></a>Vue 基础</h1><h2 id="初识-Vue"><a href="#初识-Vue" class="headerlink" title="初识 Vue"></a>初识 Vue</h2><h3 id="vue-的特性"><a href="#vue-的特性" class="headerlink" title="vue 的特性"></a>vue 的特性</h3><ol>
<li><p>数据驱动视图 </p>
<ul>
<li><strong>单向的</strong>数据绑定</li>
<li>vue监听数据变化，自动渲染页面结构</li>
</ul>
</li>
<li><p>双向数据绑定</p>
<ul>
<li>js 数据的变化，会被自动渲染到页面上</li>
</ul>
</li>
</ol>
<ul>
<li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li>
</ul>
<blockquote>
<p>数据驱动视图 和 双向数据绑定 的底层原理是MVVM（Model 数据源、View 视图、ViewModel 就是vue的实例）</p>
</blockquote>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h3 id="vue应用"><a href="#vue应用" class="headerlink" title="vue应用"></a>vue应用</h3><h4 id="应用实例和根组件"><a href="#应用实例和根组件" class="headerlink" title="应用实例和根组件"></a>应用实例和根组件</h4><p>应用实例是app，根组件的实例是vm，每个组件都有自己的组件实例，一个应用中所有的组件都共享一个应用实例</p>
<p>每个 Vue 应用都是通过 <code>createApp</code> 函数创建一个新的 <strong>应用实例</strong></p>
<p>传入 <code>createApp</code> 的对象实际上是一个根组件，其他组件将作为其子组件。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token comment">// 从一个单文件组件中导入根组件</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大多数真实的应用都是由一棵嵌套的、可重用的组件树组成的。例如，一个待办事项 (Todos) 应用的组件树可能是这样的</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">App</span> <span class="token punctuation">(</span>root component<span class="token punctuation">)</span>
├─ TodoList
│  └─ TodoItem
│     ├─ TodoDeleteButton
│     └─ TodoEditButton
└─ TodoFooter
   ├─ TodoClearButton
   └─ TodoStatistics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h4><p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来，<code>.mount()</code> 方法应该始终在整个应用配置和资源注册完成后被调用</p>
<p>应用实例会被挂载到参数对应的节点中</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><p>应用实例会暴露一个 <code>.config</code> 对象允许我们配置一些应用级的选项，例如定义一个应用级的错误处理器，它将捕获所有由子组件上抛而未被处理的错误：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 处理错误 */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>模板渲染全流程：开发者写的template  –&gt; 分析HTML字符串 –&gt; AST树  –&gt; 把表达式/自定义属性/指令转成浏览器看得懂的语法 –&gt; 虚拟DOM节点  –&gt;  解析真实DOM  –&gt;render</p>
<ul>
<li><p>vue的模板是基于HTML，模板中直接写HTML是可以被直接解析的</p>
</li>
<li><p><code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，将为渲染的 DOM 应用特殊的响应式行为</p>
</li>
<li><p>虚拟DOM存在的意义在于 让新的虚拟数据和旧的虚拟数据做对比，如果有差异，做更新，如果没差异，就不做更新</p>
</li>
</ul>
<p><img data-src="https://cn.vuejs.org/assets/directive.69c37117.png"></p>
<blockquote>
<p>Vue 在组件实例上暴露的内置 API 使用 <code>$</code> 作为前缀，它也为内部属性保留 <code>_</code> 前缀。</p>
</blockquote>
<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><ul>
<li>双花括号内部可以使用表达式</li>
<li>插值表达式 里的变量必须是实例中的数据，不可以用全局变量</li>
<li>:href=””  双引号里面的属性值也可以使用表达式</li>
<li>:[]=””   属性加上一个方括号，也可以使用表达式<ul>
<li>动态属性名参数不能出现空格和引号，因为HTML合法属性名不能出现空格和引号</li>
</ul>
</li>
</ul>
<p>表达式的使用规则如图所示：</p>
<p><img data-src="https://s2.loli.net/2022/10/30/inb7wmhoGAQfF5I.png" alt="image-20221030224306357"></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ok <span class="token operator">?</span> <span class="token string">'yes'</span> <span class="token operator">:</span> <span class="token string">'no'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token operator">&lt;</span>div <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">" 'list-' + id"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>data 必须是一个函数，Vue 在创建实例的过程中调用data函数，返回数据对象，通过响应式包装后存储在实例的 $data 中，并且实例可以直接越过 $data 访问属性</p>
<p>$data 是响应式数据对象，本质是通过 代理机制 生成一种数据响应式机制</p>
<p>$，_ ，__ 这些都是Vue提供的内置API，开发者尽量避免用这些前缀命名自己的变量和方法</p>
<p><strong>为什么data 一定是个函数？</strong>！</p>
<p>因为它要确保<strong>每一次执行函数后的返回来的数据引用都是独一无二</strong>的，这样多个实例之间的引用对象就不会相互影响</p>
<p>当然写源码的时候也可以通过深拷贝的方式去达到这种目的，但是没有通过每次执行函数 这种方式来的直接</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 实现原理</span>
<span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token function">funtion</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//方法一：Object上的静态方法</span>
            Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
                <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> _this<span class="token punctuation">.</span>$data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> _this<span class="token punctuation">.</span>$data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">//方法二：实例继承的原型方法</span>
            _this<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> _this<span class="token punctuation">.</span>$data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _this<span class="token punctuation">.</span><span class="token function">__defineSetter__</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> _this<span class="token punctuation">.</span>$data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><strong>为什么叫做指令？</strong>，<strong>模板应该按照怎么的逻辑去渲染或绑定行为</strong></p>
<h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>一次插值，永不更新，不建议这么做，可以用es6字符串中的${}方式来实现单次插值绑定</p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul>
<li><code>&#123;&#123; &#125;&#125;</code>，“Mustache”语法 ，插值表达式，内容占位符</li>
<li><code>v-html</code>，可以将包含标签的字符串，渲染成真正的HTML内容</li>
</ul>
<p>双花括号不会解析HTML，因为插值表达式是JS表达式，没有对于DOM的操作</p>
<p>不要试图用 v-html 做子模板，子模板中一些稍复杂的指令可能就无法渲染处理，比较好的解决方案是 把子模板放到子组件中</p>
<blockquote>
<p><strong>注意</strong>：在网站上动态渲染任意 HTML 是非常危险的，因为使用的方式是innerHTML，可以注入脚本工具，这非常容易造成 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 漏洞</a></p>
<p>仅在内容安全可信时再使用 <code>v-html</code></p>
</blockquote>
<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p><code>v-bind:</code> 指令，简写为 <code>:</code>，作用：<strong>为元素属性添加 变量值</strong></p>
<p>:bind就是为属性绑定插值，属性前不加冒号 后面的属性值统一视作 字符串</p>
<p>有时候，为了后面跟一个 JavaScript 表达式，也可以加一个v-bind，即使没有变量值绑定</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//举例来说，如果你的组件实例有一个数据属性 attributeName，其值为 "href" 这个绑定就等价于 v-bind:href</span>
<span class="token comment">// 动态属性名参数不能出现空格和引号，因为HTML合法属性名不能出现空格和引号</span>
<span class="token operator">&lt;</span>a <span class="token operator">:</span><span class="token punctuation">[</span>attributeName<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span> <span class="token operator">...</span> <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes#%E5%B8%83%E5%B0%94%E5%80%BC%E5%B1%9E%E6%80%A7">布尔型 attribute</a> 依据 true / false 值来决定 attribute 是否应该存在于该元素上。<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled"><code>disabled</code></a> 就是最常见的例子之一。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"isButtonDisabled"</span><span class="token operator">></span>Button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当 <code>isButtonDisabled</code> 为<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">真值</a>或一个空字符串 (即 <code>&lt;button disabled=&quot;&quot;&gt;</code>) 时，元素会包含这个 <code>disabled</code> attribute。而当其为其他<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">假值</a>时 attribute 将被忽略</p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p><code>v-on:</code>   可以被简写为 <code>@</code>  使用方法 @事件名称  = “事件处理函数 (参数)”</p>
<p>事件处理函数 在Vue实例下的 methods 中定义，<code>this</code>指的就是 创建的Vue实例对象</p>
<p>vue 内置变量 <code>$event</code>，它就是原生DOM 事件对象e，如果默认事件对象e被覆盖了，则手动传递<code>$event</code></p>
<blockquote>
<p>Vue 自动为 <code>methods</code> 绑定了永远指向组件实例的 <code>this</code>。</p>
<p>不应该在定义 <code>methods</code> 时使用箭头函数，因为箭头函数this引用的是<strong>定义箭头函数的上下文</strong>，无论是<code>methods：&#123;&#125;</code>还是<code>Vue.createApp（&#123;&#125;）</code>，他们都是 <code>一个对象</code>，不是一个单独的作用域，箭头函数的this是指向Windows</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add(2, $event)"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">step<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> step
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>事件修饰符</strong></p>
<p>在事件处理函数中调用 event.preventDafault() 或 event.stopPropagation()是常见的需求，因此，vue提供了事件修饰符来辅助对事件触发进行控制，常用命令有：</p>
<ul>
<li><strong><code>.prevent</code> ，阻止默认行为（如网页跳转、表单提交）</strong></li>
<li><strong><code>.stop</code>，阻止事件冒泡</strong></li>
<li><code>.capture</code>，捕获模式触发当前的事件处理函数</li>
<li><code>.once</code>，只触发一次</li>
<li><code>.self</code>，只有在event.target 是当前元素自身时触发事件处理函数</li>
</ul>
<p><strong>按键修饰符</strong></p>
<p>监听键盘，<code>.enter</code> <code>.tab</code> <code>.delete</code> <code>.esc</code> <code>.space</code> <code>.up</code> <code>.down</code> <code>.ctrl</code>  <code>.alt</code>….很多</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">'submit'</span><span class="token operator">></span> 
<span class="token operator">&lt;</span>input @keyup<span class="token punctuation">.</span>esc<span class="token operator">=</span><span class="token string">'clearinput'</span><span class="token operator">></span>   
    
methods<span class="token punctuation">&#123;</span>
    <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">clearinput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>只有表单数据能与用户产生交互，故表单数据使用<code>v-model</code>才有意义，适用于input、textarea、select</p>
<p>为了方便对用户输入的内容进行处理，v-model提供了3个修饰符，分别是</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th align="left">作用</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>.number</td>
<td align="left">将用户输入转为数值类型</td>
<td><code>&lt;input v-model.number=&quot;age&quot; /&gt;</code></td>
</tr>
<tr>
<td>.trim</td>
<td align="left">删除输入的首尾空白字符</td>
<td><code>&lt;input v-model.trim=&quot;msg&quot;&gt;</code></td>
</tr>
<tr>
<td>.lazy</td>
<td align="left">当失去焦点时，才更新数据，类似防抖</td>
<td><code>&lt;input v-model.lazy=&quot;msg&quot;&gt;</code></td>
</tr>
</tbody></table>
<h4 id="v-if-v-show"><a href="#v-if-v-show" class="headerlink" title="v-if v-show"></a>v-if v-show</h4><p>按需控制DOM的显示与隐藏，两者的显示效果一样，但仍有区别</p>
<p>可以使用 <code>v-else-if</code> ，<code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”</p>
<p>实现原理不同：</p>
<ul>
<li><code>v-if</code> 通过创建或删除 DOM 元素来控制元素的显示与隐藏</li>
<li><code>v-show</code> 通过添加或删除元素的 <code>style=&quot;display: none&quot;</code> 样式来控制元素的显示与隐藏</li>
</ul>
<p>性能消耗不同：</p>
<ul>
<li><code>v-if</code> 切换开销更高，如果运行时条件很少改变，使用 <code>v-if</code> 更好</li>
<li><code>v-show</code> 初始渲染开销更高，如果切换频繁，使用 <code>v-show</code> 更好</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/10/30/zHNSGhjJUZWf9Mm.png" alt="image-20221030223638221"></p>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p><code>v-for</code> 基于一个数组来<strong>循环渲染</strong>相似的UI结构</p>
<p><code>v-for</code> 的使用需要 <code>item in items</code> 的特殊语法，可选的第二个参数表示<strong>属性名或者索引</strong>，即<code>(item , index) in items</code>，可选的第三个参数表示<strong>位置索引</strong>，<code>(value,key,index ) in items</code></p>
<p><strong>使用key维护列表状态</strong></p>
<ul>
<li>当列表数据变化时，vue复用已存在的DOM元素，从而提升渲染的性能，但这种默认性能优化策略，导致有状态的列表无法被正确更新</li>
<li>为了让vue跟踪每个节点的身份，保证有状态的列表被正确更新的前提下，提升渲染性能，需要为每项提供一个唯一的key属性</li>
</ul>
<p><strong><code>key</code> 的注意事项：</strong></p>
<ul>
<li>key 的值只能是<strong>字符串</strong>或<strong>数字</strong>类型</li>
<li>key 的值必须具有唯一性（即：key 的值不能重复）</li>
<li>建议把数据项 id 属性的值作为 key 的值（因为 id 属性的值具有唯一性）</li>
<li>使用 index 的值当作 key 的值没有意义（因为 index 的值不具有唯一性）</li>
<li>建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）</li>
</ul>
<blockquote>
<p>数组变化侦测：</p>
<p>Vue 能够侦听响应式数组的变更方法，对原数组进行变更，包括<code>push()</code>、 <code>pop()</code>、<code>shift()</code> 、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code></p>
<p><code>filter()</code>、<code>concat()</code>和<code>slice()</code>这些方法为不可变方法，即不更改原数组，而是返回一个新数组</p>
</blockquote>
<h4 id="过滤器-3版本已废弃"><a href="#过滤器-3版本已废弃" class="headerlink" title="过滤器 (3版本已废弃)"></a>过滤器 (3版本已废弃)</h4><p>过滤器本质就是JavaScript函数</p>
<ul>
<li>filters常用于文本的格式化，被添加在JavaScript表达式的尾部，由“管道符 <code>|</code> ”进行调用，用于插值表达式和v-bind属性绑定上。</li>
<li>过滤器只在 <code>vue 2.x</code> 和 <code>vue 1.x</code> 中支持，<code>vue 3.x</code> 废弃了过滤器，官方建议使用计算属性或方法代替过滤器。</li>
</ul>
<p>过滤器分为私有过滤器和全局过滤器，私有在实例vue对象里通过filters来定义，全局在main.js中定义：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定义私有过滤器</span>
<span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 定义全局过滤器</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'capitalize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果私有过滤器和全局过滤器冲突，按照就近原则调用私有过滤器</p>
<p><strong>连续调用多个过滤器</strong></p>
<p>过滤器从左往右调用，前一个过滤器的结果交给下一个过滤器继续处理。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; text | capitalize | maxLength &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="methods属性"><a href="#methods属性" class="headerlink" title="methods属性"></a>methods属性</h3><ol>
<li><p>Vue 创建实例时，自动为 methods 绑定了永远指向组件实例的 <code>this</code>，保证在事件监听时，回调始终指向当前组件实例，方法要避免使用箭头函数</p>
</li>
<li><p>@函数名（），这里的括号不是执行符号，而是传入实参的容器；</p>
<p>onClick(实参)  相当于 onClick = { () =&gt; change(实参) }</p>
</li>
<li><p>实例中直接挂载methods中的每一个方法，这些方法并不向外暴露</p>
</li>
</ol>
<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h3><p>single page application SPA，所有的功能与交互都在这唯一的页面中进行</p>
<p><strong>特点</strong></p>
<ul>
<li>仅在web页面初始化时加载相应的资源</li>
<li>SPA 进行页面重加载或跳转，利用JavaScript动态变化HTML内容</li>
</ul>
<p><strong>优缺点</strong></p>
<table>
<thead>
<tr>
<th align="left">优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1. 良好交互体验 <br />2. 良好的前后端工作分离模式<br />3. 减轻服务器压力</td>
<td>1. 首屏加载慢<br />2. 不利于SEO</td>
</tr>
</tbody></table>
<p><strong>首屏加载慢的处理办法</strong></p>
<ul>
<li>路由懒加载<ul>
<li>将路由对应的组件打包成一个个js代码块，只有在这个路由被访问到的时候，才加载对应的组件</li>
</ul>
</li>
<li>代码压缩</li>
<li>CDN加速<ul>
<li><strong>CND加速</strong>主要是加速静态资源，如网站上面上传的图片、媒体，以及引入的一些Js、css等文件，需要依靠各个网络节点</li>
</ul>
</li>
<li>网络传输压缩</li>
</ul>
<p><strong>不利于SEO的处理办法</strong></p>
<ul>
<li><p>SSR 服务器端渲染 </p>
<p>Server Side Render，在<strong>服务端</strong>完成页面的 html 拼接处理， 然后再发送给浏览器，将不具有交互能力的 html 结构绑定事件和状态，在客户端展示为具有完整交互能力的应用程序。</p>
</li>
</ul>
<h3 id="vite目录结构及运行流程"><a href="#vite目录结构及运行流程" class="headerlink" title="vite目录结构及运行流程"></a>vite目录结构及运行流程</h3><p>通过main.js 把 App.vue 渲染到 index.html 的指定区域中</p>
<ul>
<li>App.vue，待渲染的模板结构</li>
<li>index.html，需要预留el区域</li>
<li>main.js，把 App.vue 渲染至预留区 </li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/30/Yb3C7fyzrIOUVwm.png"></p>
<p><img data-src="https://s2.loli.net/2022/08/30/skjL4dx15ObyaS7.png"></p>
<h3 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue 组件"></a>vue 组件</h3><p> Vue 组件即单独的一个 <code>.vue</code> 文件，简称为 SFC</p>
<ul>
<li><p>template，组件模板结构，必选</p>
</li>
<li><p>script节点，组件的JavaScript行为</p>
<ul>
<li>name节点，说明该组件的名称</li>
<li>data节点，渲染期间需要用到的数据，不能直接定义，<strong>需要作为一个函数return出去</strong>，要确保<strong>每一次执行函数后的返回来的数据引用都是独一无二</strong>的</li>
</ul>
</li>
<li><p>style节点，组件样式 (scoped防止样式冲突，lang指定css语法)</p>
<ul>
<li>&lt;style&gt;标签的lang属性默认是css，表示支持普通的css语法，可选值还有less、scss等</li>
</ul>
</li>
</ul>
<h3 id="组件的注册使用"><a href="#组件的注册使用" class="headerlink" title="组件的注册使用"></a>组件的注册使用</h3><ul>
<li>组件引用原则：先注册后使用</li>
<li>组件注册 分为 全局注册 和 局部注册<ul>
<li>全局注册，在main.js中 使用app.component() 方法注册，直接以标签的形式进行使用</li>
<li>局部注册，在import导入，再使用component节点的键值对形式，后以标签的形式进行使用</li>
</ul>
</li>
<li>定义组件注册名称的方式只有两种<ul>
<li>短横线命名，my-search</li>
<li>大驼峰命名，MySearch</li>
</ul>
</li>
</ul>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><p><img data-src="https://s2.loli.net/2022/08/31/kiAGPEef21cWwMg.png"></p>
<p><img data-src="https://s2.loli.net/2022/08/31/3GUVhIjEur7WYsL.png"></p>
<p>创建、渲染、更新与销毁，创建后created会发Ajax请求初始数据，初次渲染后mounted会操作DOM元素</p>
<p><strong>在实际开发中，created是最常用的生命周期函数！</strong></p>
<p>mounted 只在元素第一次插入DOM时被调用，当DOM更新时mounted 不会被触发；updated函数会在每次DOM更新完成后被调用</p>
<p>如果mounted 和updated函数任务逻辑完全相同，可以简写为</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="scoped解决组件间样式冲突"><a href="#scoped解决组件间样式冲突" class="headerlink" title="scoped解决组件间样式冲突"></a>scoped解决组件间样式冲突</h3><p>默认情况下，vue组件下的样式会全局生效，容易导致多个组件间的样式冲突问题，其原因是：</p>
<ul>
<li>单页面程序中，所有组件的DOM结构，都是基于唯一的html页面呈现的</li>
<li>每个组件的样式，都会影响唯一页面的DOM元素</li>
</ul>
<p>style节点的 **scoped **属性，为每个组件分配唯一的自定义属性，从而防止组件之间的样式冲突问题。</p>
<p>但如果想让某些样式对子组件生效，可以使用 深度选择器 :deep()</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h3><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。</p>
<p><code>class</code> 和 <code>style</code> 都是 attribute，我们可以和其他 attribute 一样使用 <code>v-bind</code> 将它们和动态的字符串绑定。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h3 <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"isItalic ? 'italic' : ''"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>

<span class="token operator">&lt;</span>h3 <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[isItalic ? 'italic':'','isDelete' ? 'delete':'']"</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>

<span class="token operator">&lt;</span>h3 <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;color:color,fontSize:fsize&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="props属性"><a href="#props属性" class="headerlink" title="props属性"></a>props属性</h3><p>props是组件的自定义属性，通过props把数据从父组件传递到子组件内部供其使用</p>
<ul>
<li>使用 <code>v-bind</code> 或缩写 <code>:</code> 来进行动态绑定的 props</li>
<li>所有的 props 都遵循着<strong>单向绑定</strong>原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</li>
<li><strong>不应该</strong>在子组件中去更改一个 prop，更改一个 prop 的需求通常来源于以下两种场景<ul>
<li><strong>prop 被用于传入初始值</strong></li>
<li><strong>需要对传入的 prop 值做进一步的转换</strong></li>
</ul>
</li>
</ul>
<h4 id="props的使用"><a href="#props的使用" class="headerlink" title="props的使用"></a>props的使用</h4><ol>
<li><strong>在子组件中定义声明</strong></li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span> 
    	<span class="token operator">&lt;</span>h3<span class="token operator">></span>title<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
		<span class="token operator">&lt;</span>h3<span class="token operator">></span>author<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>author<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'MyArticle'</span>
	<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'author'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>          	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><strong>在父组件中导入引用</strong></li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 动态绑定的 props</span>
<span class="token operator">&lt;</span>MyArticle <span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"post.title"</span> <span class="token operator">:</span>author<span class="token operator">=</span><span class="token string">"post.author"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span> 

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">import</span> MyArticle <span class="token keyword">from</span> <span class="token string">'./Article.vue'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'MyApp'</span>
	<span class="token literal-property property">component</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> MyArticle <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>          	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="props校验规则"><a href="#props校验规则" class="headerlink" title="props校验规则"></a><strong>props校验规则</strong></h4><p>使用对象类型的props节点，可以对外界传递的props数据进行合法性校验</p>
<ul>
<li>可以使用字符串数组、对象的形式来声明 prop </li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'MyArticle'</span>
	<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>   <span class="token comment">//8种类型：String、Number、Boolean、Array、Object、Date、Function、Symbol</span>
        <span class="token comment">//多种数据类型 用列表    </span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span>Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">//必填项校验</span>
        <span class="token literal-property property">propA</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
            <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">//指定默认值</span>
        <span class="token literal-property property">propA</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token operator">:</span><span class="token number">100</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>          	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性本质就是function，监听数据，返回新值，以function形式声明到组件的computed选项中</p>
<p><strong>计算属性值会基于其响应式依赖被缓存</strong>，仅会在其响应式依赖更新时才重新计算，即计算属性会缓存计算的结果，性能会更好</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>乘以<span class="token number">2</span>的值为<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> plus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'MyArticle'</span><span class="token punctuation">,</span>
	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">*</span><span class="token number">2</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>          	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>计算属性默认是只读的，在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// getter</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// setter</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 注意：我们这里使用的是解构赋值语法</span>
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="组件事件-子传父"><a href="#组件事件-子传父" class="headerlink" title="组件事件(子传父)"></a>组件事件(子传父)</h3><h4 id="子组件中的触发"><a href="#子组件中的触发" class="headerlink" title="子组件中的触发"></a>子组件中的触发</h4><p>this.$emit( ‘自定义事件的名称’, 参数 ) ，所有传入 <code>$emit()</code> 的额外参数都会被直接传向监听器。举例来说，<code>$emit(&#39;foo&#39;, 1, 2, 3)</code> 触发后，监听器函数将会收到这三个参数值。</p>
<ol>
<li>可以在模板表达式中，直接使用 $emit 方法触发自定义事件</li>
<li>也可以在组件实例上定义</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$emit('change'，count)"</span><span class="token operator">></span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">emits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'change'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emits</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>          	
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="事件校验"><a href="#事件校验" class="headerlink" title="事件校验"></a>事件校验</h4><p>事件可以被赋值为一个函数，接受的参数就是抛出事件时传入 <code>this.$emit</code> 的内容，返回一个布尔值来表明事件是否合法。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 没有校验</span>
    <span class="token literal-property property">click</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// 校验 submit 事件</span>
    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Invalid submit event payload!'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="父组件的监听"><a href="#父组件的监听" class="headerlink" title="父组件的监听"></a>父组件的监听</h4><p>父组件通过 <code>v-on</code> (缩写为 <code>@</code>) 来监听事件，也支持 <code>.once</code> 修饰符：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>MyComponent @some<span class="token operator">-</span>event<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">"callback"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="无冒泡机制"><a href="#无冒泡机制" class="headerlink" title="无冒泡机制"></a>无冒泡机制</h4><p>组件触发的事件<strong>没有冒泡机制</strong>。你只能监听直接子组件触发的事件。平级组件或是跨越多层嵌套的组件间通信，应使用一个外部的事件总线，或是使用一个全局状态管理方案</p>
<h3 id="组件上的v-model"><a href="#组件上的v-model" class="headerlink" title="组件上的v-model"></a>组件上的v-model</h3><p>需要维护内外组件数据同步时，可以使用v-model指令</p>
<blockquote>
<p><strong>v-model不适用于双向绑定至props值，props值是只读的，需要的话，可以把props值转存到data中</strong></p>
</blockquote>
<p><strong>父传子</strong> ，v-bind + props</p>
<ul>
<li><p>父组件通过 <code>v-bind:</code> 属性绑定的形式，把数据传递给子组件</p>
</li>
<li><p>子组件中，通过 props 接受父组件传递过来的数据</p>
</li>
</ul>
<p><strong>子传父</strong>，v-model： + props + emits：[‘update: xxx’]</p>
<ul>
<li>在<code>v-bind:</code> 指令前添加v-model指令</li>
<li>在子组件中声明 emits 自定义事件，格式为 <code>update:xxx</code></li>
<li>调用 <code>$emit( update:xxx )</code> 触发自定义事件，更新父组件中的数据</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/30/aokNDTLQK1zm7YF.png"></p>
<h3 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h3><p>监听数据变化，针对数据变化做特定操作，在watch节点下定义，将变量名直接当成方法来调用</p>
<p>计算属性vs侦听器，侧重的应用场景不同：</p>
<ul>
<li>计算属性：监听多个值变化，计算后返回新值</li>
<li>侦听器：监听单个值变化，执行特定业务，不需要有返回值</li>
</ul>
<p><code>watch</code> 的第一个参数可以是不同形式的“数据源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个数据源组成的数组，不能直接侦听响应式对象的属性值</p>
<p>深层侦听：当watch侦听的是一个对象，如果对象中的属性值发生了变化，此时需要加上deep选项才可被监听</p>
<p>监听单个属性：只想监听对象中单个属性变化，则可以 <code>&#39;info.username&#39;:&#123; &#125;</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// 单个 ref</span>
<span class="token function">watch</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newX</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newX<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// getter 函数</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>value <span class="token operator">+</span> y<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sum of x + y is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sum<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token comment">// 多个来源组成的数组</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> y<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newX<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and y is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newY<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 加上 deep 选项，深层侦听器</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><p><code>watch()</code> 是懒执行的：仅当数据源变化时，才会执行回调，但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。这时就用到了watchEffect</p>
<p><code>watchEffect</code> 仅会在其<strong>同步</strong>执行期间，才追踪依赖。在使用异步回调时，只有在第一个 <code>await</code> 正常工作前访问到的属性才会被追踪。</p>
<p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">watch</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">'post'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">'post'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="停止侦听器"><a href="#停止侦听器" class="headerlink" title="停止侦听器"></a>停止侦听器</h4><p>侦听器必须用<strong>同步</strong>语句创建：如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watchEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token comment">// 它会自动停止</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// ...这个则不会！</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="组件之间的数据共享"><a href="#组件之间的数据共享" class="headerlink" title="组件之间的数据共享"></a>组件之间的数据共享</h3><h4 id="父子共享"><a href="#父子共享" class="headerlink" title="父子共享"></a><strong>父子共享</strong></h4><p>父传子，父通过v-bind向子共享，子需要props接受数据；子传父，子通过自定义事件向父共享；父子之间的双向同步，使用 v-model 指令维护组件内外数据的双向同步</p>
<h4 id="兄弟共享"><a href="#兄弟共享" class="headerlink" title="兄弟共享"></a>兄弟共享</h4><p>EventBus，借助第三方包mitt来创建eventBus对象</p>
<h4 id="后代关系组件间的数据共享（依赖注入）"><a href="#后代关系组件间的数据共享（依赖注入）" class="headerlink" title="后代关系组件间的数据共享（依赖注入）"></a>后代关系组件间的数据共享（依赖注入）</h4><p>后代关系，指的是 父组件向其子孙组件共享数据，使用 provide 和 inject 实现。</p>
<ul>
<li>父组件通过 <strong>provide节点</strong> 向子孙共享数据</li>
<li>子孙组件使用 <strong>inject 数组</strong> 接受数据</li>
</ul>
<p><strong>provide()函数接收两个参数</strong></p>
<ul>
<li><p>第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个Symbol，第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref</p>
</li>
<li><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖</p>
</li>
<li><p>正在构建大型的应用，包含非常多的依赖提供，建议最好使用 Symbol 来作为注入名以避免潜在的冲突</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在供给方组件内 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'North Pole'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">updateLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  location<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'South Pole'</span>
<span class="token punctuation">&#125;</span>

<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  location<span class="token punctuation">,</span>
  updateLocation
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在注入方组件 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> location<span class="token punctuation">,</span> updateLocation <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateLocation"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> location <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>inject</strong></p>
<p>在注入一个值时不要求必须有提供者，那么我们应该声明一个默认值，和 props 类似</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果没有祖先组件提供 "message"，// `value` 会是 "这是默认值"</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token string">'这是默认值'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>插槽slot，组件封装期间，为用户预留的内容占位符</p>
<p>使用场景：在封装组件的时候，如果不确定组件的DOM渲染成什么样子，同时需要把数据交给用户，可以通过作用域插槽传给用户，<strong>从而提高组件复用率！</strong>以下是用原生JavaScript的实现方式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父元素传入插槽内容</span>
<span class="token function">FancyButton</span><span class="token punctuation">(</span><span class="token string">'Click me!'</span><span class="token punctuation">)</span>

<span class="token comment">// FancyButton 在自己的模板中渲染插槽内容</span>
<span class="token keyword">function</span> <span class="token function">FancyButton</span><span class="token punctuation">(</span><span class="token parameter">slotContent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button class="fancy-btn">
      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>slotContent<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
    &lt;/button></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h4><ul>
<li>插槽内容可以访问父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的</li>
<li>父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</li>
</ul>
<h4 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h4><p><slot>这是后备内容</slot>，如果没有为插槽提供任何内容，则默认内容会生效</p>
<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>如果要预留多个插槽，则为每个<slot>指定具体的name名称；没有指定name名称的插槽，默认名称为 “default”；引用时需要外包裹 &lt;template v-slot:“插槽名”&gt; </template> ；<code>v-slot:</code> 可以简写为 #</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 子组件BaseLayout</span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>header<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>
  <span class="token operator">&lt;</span>main<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>
  <span class="token operator">&lt;</span>footer<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父组件使用</span>
<span class="token operator">&lt;</span>BaseLayout<span class="token operator">></span>
  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>header<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> header 插槽的内容放这里 <span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>BaseLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>可以为slot插槽绑定 props数据，即作用域插槽，搭配 解构赋值使用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//定义 组件</span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name <span class="token operator">=</span> <span class="token string">"header"</span> <span class="token operator">:</span>info<span class="token operator">=</span><span class="token string">''</span><span class="token operator">></span>这是后备内容<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
	<span class="token operator">&lt;</span>slot name <span class="token operator">=</span> <span class="token string">"footer"</span><span class="token operator">></span>这是后备内容<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token comment">//引用组件</span>
<span class="token operator">&lt;</span>zujian<span class="token operator">></span>
    <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>header<span class="token operator">=</span><span class="token string">'&#123;info&#125;'</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    
<span class="token operator">&lt;</span><span class="token operator">/</span>zujian<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h3><p>一般来说，多个组件间动态切换时会创建新的组件实例；但有些时候，我们需要缓存组件实例，这时就用到了keepalice， <code>&lt;KeepAlive&gt;</code> 是一个内置组件，它的功能是在多个组件间动态切换时缓存被移除的组件实例。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>
    <span class="token operator">&lt;</span>component is<span class="token operator">=</span><span class="token string">'要渲染的组件名称'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="缓存实例的生命周期"><a href="#缓存实例的生命周期" class="headerlink" title="缓存实例的生命周期"></a>缓存实例的生命周期</h4><p>当一个组件实例从 DOM 上移除但因为被 <code>&lt;KeepAlive&gt;</code> 缓存而仍作为组件树的一部分时，它将变为<strong>不活跃</strong>状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新<strong>被激活</strong>。</p>
<p>一个持续存在的组件可以通过 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated"><code>onActivated()</code></a> 和 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated"><code>onDeactivated()</code></a> 注册相应的两个状态的生命周期钩子：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onActivated<span class="token punctuation">,</span> onDeactivated <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token function">onActivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 调用时机为首次挂载</span>
  <span class="token comment">// 以及每次从缓存中被重新插入时</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token function">onDeactivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在从 DOM 上移除、进入缓存</span>
  <span class="token comment">// 以及组件卸载时调用</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>自定义指令，声明 不需要加 v-，使用 需要加 v-，自定义指令分为私有和全局两种</p>
<p>在绑定指令时，可以通过 “等号” 形式为指令绑定具体参数值</p>
<p>引用时，<code>(el,binding)</code> el指该组件，binding.value为指令绑定值</p>
<ul>
<li>私有自定义指令</li>
<li>在 <code>&lt;script setup&gt;</code> 中，任何以 <code>v</code> 开头的驼峰式命名的变量都可以被用作一个自定义指令</li>
<li>在没有使用 <code>&lt;script setup&gt;</code> 的情况下，自定义指令需要通过 <code>directives</code> 选项注册</li>
<li>全局自定义指令，需要在 SPA 实例对象 main.js 里声明</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 
<span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token comment">// 在模板中启用 v-focus</span>
<span class="token keyword">const</span> vFocus <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token number">2.</span> 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 在模板中启用 v-focus</span>
    <span class="token literal-property property">focus</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//3. 全局</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="指令钩子"><a href="#指令钩子" class="headerlink" title="指令钩子"></a>指令钩子</h4><p>定义对象可以提供几种钩子函数</p>
<p>created、beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 下面会介绍各个参数的细节</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="钩子参数"><a href="#钩子参数" class="headerlink" title="钩子参数"></a>钩子参数</h4><ul>
<li><code>el</code>：指令绑定到的元素，可以用于直接操作 DOM。</li>
<li><code>binding</code>：一个对象，包含以下属性<ul>
<li><code>value</code>：传递给指令的值</li>
<li><code>oldValue</code>：之前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用</li>
<li><code>arg</code>：传递给指令的参数 (如果有的话)</li>
<li><code>modifiers</code>：一个包含修饰符的对象 (如果有的话)</li>
<li><code>instance</code>：使用该指令的组件实例</li>
<li><code>dir</code>：指令的定义对象</li>
</ul>
</li>
<li><code>vnode</code>：代表绑定元素的底层 VNode</li>
<li><code>prevNode</code>：之前的渲染中代表指令所绑定元素的 VNode</li>
</ul>
<h2 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><strong>路由的本质就是 对应关系</strong></p>
<ul>
<li><p>前端路由：又称为客户端路由，具体表现为Hash地址与组件之间的对应关系。客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后在无需重新加载的情况下更新当前页面。</p>
</li>
<li><p>后端路由：又称为服务端路由，请求方式、请求地址与function处理函数之间的对应关系。</p>
<p>服务器根据用户访问的 URL 路径返回不同的响应结果。当我们在一个传统的服务端渲染的 web 应用中点击一个链接时，浏览器会从服务端获得全新的 HTML，然后重新加载整个页面。</p>
</li>
</ul>
<p>SPA单页面项目中，不同组件内的切换通过 <strong>前端路由</strong> 来实现！</p>
<h4 id="前端路由工作方式"><a href="#前端路由工作方式" class="headerlink" title="前端路由工作方式"></a>前端路由工作方式</h4><ol>
<li>用户点击页面上的路由链接</li>
<li>URL地址栏中的Hash值发生变化</li>
<li>前端路由监听Hash地址的变化</li>
<li>前端路由把当前 Hash 地址对应的组件渲染到浏览器中</li>
</ol>
<h4 id="从头实现路由"><a href="#从头实现路由" class="headerlink" title="从头实现路由"></a>从头实现路由</h4><p>如果你只需要一个简单的页面路由，而不想为此引入一整个路由库，你可以通过<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components">动态组件</a>的方式，监听浏览器 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event"><code>hashchange</code> 事件</a>或使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">History API</a> 来更新当前组件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./Home.vue'</span>
<span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'./About.vue'</span>
<span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">'./NotFound.vue'</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'/'</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>
  <span class="token string-property property">'/about'</span><span class="token operator">:</span> About
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> currentPath <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  currentPath<span class="token punctuation">.</span>value <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> currentView <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> routes<span class="token punctuation">[</span>currentPath<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'/'</span><span class="token punctuation">]</span> <span class="token operator">||</span> NotFound
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#/non-existent-path"</span><span class="token operator">></span>Broken Link<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p>vue-router 3.x 只能结合 vue2 进行使用；vue-router 4.x 只能结合 vue3 进行使用</p>
<ul>
<li>安装并定义路由组件 <code>npm i vue-router@next -S </code> </li>
<li>声明路由链接 <code>&lt;router-link to=&#39;home&#39;&gt;</code> 和路由占位符  <code>&lt;router-view&gt;</code> </li>
<li>创建路由模块，导入并挂载<ul>
<li>从 vue-router 中按需导入两个方法 </li>
<li>导入所需路由控制的组件</li>
<li>创建路由示例对象并向外共享 </li>
<li>在main.js中导入并挂载 <code>app.use()</code></li>
</ul>
</li>
</ul>
<h4 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h4><p>用户访问地址A时，强制用户跳转地址C，通过redirect属性来指定</p>
<h4 id="被激活的路由链接"><a href="#被激活的路由链接" class="headerlink" title="被激活的路由链接"></a>被激活的路由链接</h4><p>被激活的路由链接，默认应用一个 <code>router-link-active</code> 类名，可以用此类明选择器，来设置不同的样式</p>
<p>也可以基于 <code>linkActiveClass</code>属性，自定义被激活路由链接所应用的类名</p>
<h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>组件的嵌套展示</p>
<ol>
<li>声明 子路由链接和子路由占位符</li>
<li>在父路由规则中，通过children属性嵌套声明子路由规则</li>
<li>子路由的hash地址不要以 / 开头</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>createRouter<span class="token punctuation">,</span>createWebHashHistory<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token comment">// 默认的router-link-active类名会被覆盖</span>
    <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">'router-active'</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/movie'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> Movie<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span>
         <span class="token comment">//通过 children 属性嵌套子路由规则</span>
         <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
             <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'tab1'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Tab1 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
             <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'tab2'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Tab2 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
         <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 

<span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>把 Hash 地址中可变的部分通过 <code>：</code>定义为 参数项，从而提高规则复用性</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/movie/:id'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Movie <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="route-params-参数对象"><a href="#route-params-参数对象" class="headerlink" title="$route.params 参数对象"></a>$route.params 参数对象</h5><p>通过动态路由匹配渲染出来的组件中，使用$route.params 来访问动态匹配的参数值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/movie/:id'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Movie<span class="token punctuation">&#125;</span>

<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h3<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="使用props接受路由参数"><a href="#使用props接受路由参数" class="headerlink" title="使用props接受路由参数"></a>使用props接受路由参数</h5><p>vue-router允许在路由规则中开启props传参</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/movie/:id'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Movie<span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>

<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h3<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span> 
	<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>	
<span class="token punctuation">&#125;</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><ul>
<li>声明式导航：调用API实现导航的方式 eg: location.href</li>
<li>编程式导航：点击链接实现导航的方式 <code>&lt;a&gt; &lt;router-link&gt;</code></li>
</ul>
<p>两个常用的API：</p>
<ol>
<li>this.$router.push(‘hash地址’)，跳转到指定hash地址，展示对应组件</li>
<li>this.$router.go(数值N)，实现浏览历史的前进和后退</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">'gotoMovie(3)'</span><span class="token operator">></span> go to movie<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span> 
	<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
       <span class="token function">gotoMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/movie/$&#123;id&#125;'</span><span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>通过name属性为路由规则定义名 称的方式，叫做命名路由</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/movie/:id'</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'mov'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Movie <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用命名路由实现声明式导航"><a href="#使用命名路由实现声明式导航" class="headerlink" title="使用命名路由实现声明式导航"></a>使用命名路由实现声明式导航</h5><p>name属性指定跳转路由规则，params属性指定携带参数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name:'mov',params:&#123;id:3&#125;&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="使用命名路由实现编程式导航"><a href="#使用命名路由实现编程式导航" class="headerlink" title="使用命名路由实现编程式导航"></a>使用命名路由实现编程式导航</h5><p>调用push函数指定配置对象</p>
<h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>控制路由的访问权限</p>
<ul>
<li>全局导航守卫，接受三个形参(to, from, next)<ul>
<li>to，往哪去</li>
<li>from，从哪来</li>
<li>next，放行方法。如果不声明next形参，默认允许访问每一个路由；如果声明，必须调用next()，否则不允许访问任何一个路由。</li>
<li>直接放行：next() ; 强制停留当前页面：next(false) ; 强制跳转登录页面：next(‘/login’)</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// fn是一个函数，每次拦截到路由请求前，都会调用fn函数</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/main'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="vue组件库"><a href="#vue组件库" class="headerlink" title="vue组件库"></a>vue组件库</h3><p>前端开发者将自己封装的vue组件整理打包并发布为npm包，被称为vue组件库</p>
<h4 id="vue组件库与bootstrap区别"><a href="#vue组件库与bootstrap区别" class="headerlink" title="vue组件库与bootstrap区别"></a>vue组件库与bootstrap区别</h4><ul>
<li>bootstrap：提供原材料（css、html结构、js特效）</li>
<li>vue组件库：遵循vue语法、高度定制的现成组件</li>
</ul>
<h4 id="常用组件库"><a href="#常用组件库" class="headerlink" title="常用组件库"></a>常用组件库</h4><ol>
<li>pc端<ul>
<li><a href="https://element.eleme.cn/#/">element UI</a> ，饿了么前端团队开源的一套组件库</li>
<li><a href="https://www.iviewui.com/">View UI</a></li>
</ul>
</li>
<li>移动端<ul>
<li><a href="https://mint-ui.github.io/#!/zh-cn">Mini UI</a></li>
<li><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">Vant</a> </li>
</ul>
</li>
</ol>
<h4 id="项目引入"><a href="#项目引入" class="headerlink" title="项目引入"></a>项目引入</h4><ul>
<li>完整引入</li>
<li>按需引入，在官方文档中自己看，不再赘述</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// main.js文件中</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-Ui'</span>
<span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="proxy跨域代理"><a href="#proxy跨域代理" class="headerlink" title="proxy跨域代理"></a>proxy跨域代理</h3><p>如果项目运行地址和后端接口地址 存在着跨域问题，则不能正常访问到数据</p>
<p>两种解决办法：</p>
<ul>
<li>后端接口 开启CORS跨域资源共享</li>
<li>前端通过代理解决接口的跨域问题</li>
</ul>
<h3 id="axios数据请求"><a href="#axios数据请求" class="headerlink" title="axios数据请求"></a>axios数据请求</h3><p>axios，用于数据请求，几乎每个组件都会用到，一般可以在全局配置好。在main.js 入口文件中，通过<code>app.config.globalProperties</code>全局挂在 axios</p>
<p>如下图，1,2是配置 ，3 是如何使用</p>
<h1 id="通用API"><a href="#通用API" class="headerlink" title="通用API"></a>通用API</h1><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><h3 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h3><p>每个应用实例都会暴露一个 <code>config</code> 对象，其中包含了对这个应用的配置设定。</p>
<h4 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h4><p>为应用内抛出的未捕获错误指定一个全局处理函数，接收三个参数：错误对象、触发该错误的组件实例和一个指出错误来源类型信息的字符串</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 处理错误，例如：报告给一个服务</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="app-config-warnHandler"><a href="#app-config-warnHandler" class="headerlink" title="app.config.warnHandler"></a>app.config.warnHandler</h4><p>为 Vue 的运行时警告指定一个自定义处理函数，警告仅会在开发阶段显示，因此在生产环境中，这条配置将被忽略；</p>
<p>将接受警告信息作为其第一个参数，来源组件实例为第二个参数，以及组件追踪字符串作为第三个参数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">warnHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> trace</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// `trace` is the component hierarchy trace</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="app-config-performance"><a href="#app-config-performance" class="headerlink" title="app.config.performance"></a>app.config.performance</h4><p>设置此项为 <code>true</code> 可以在浏览器开发工具的“性能/时间线”页中启用对组件初始化、编译、渲染和修补的性能表现追踪。仅在开发模式和支持 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark">performance.mark</a> API 的浏览器中工作。</p>
<h3 id="nextTick方法"><a href="#nextTick方法" class="headerlink" title="$nextTick方法"></a>$nextTick方法</h3><p>$nextTick(cb)，会把cb回调推迟到下一个DOM更新周期之后执行。</p>
<p>即等到组件的DOM异步重新完成渲染后，再执行cb回调函数，从而保证回调函数可以操作到最新的DOM元素。</p>
<h2 id="ref-访问DOM元素"><a href="#ref-访问DOM元素" class="headerlink" title="ref 访问DOM元素"></a>ref 访问DOM元素</h2><p>ref 可以按需直接访问底层 DOM 元素</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>h3 ref<span class="token operator">=</span><span class="token string">'input'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>

<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>input<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口，在 <code>setup()</code> 函数中返回的对象会暴露给模板和组件实例</p>
<p><code>setup()</code>自身并不含对组件实例的访问权，即在setup()中访问this会是<code>undefined</code></p>
<p>setup() 有两个参数</p>
<ul>
<li>第一个参数是组件的 <code>props</code>，<code>setup</code> 函数的 <code>props</code> 是响应式的，推荐通过 <code>props.xxx</code> 的形式来使用其中的 props，不要做解构；</li>
<li>第二个参数是一个 <strong>Setup 上下文</strong>对象</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>setup</code> 也可以返回一个<a href="https://cn.vuejs.org/guide/extras/render-function.html">渲染函数</a>，此时在渲染函数中可以直接使用在同一作用域下声明的响应式状态。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回一个渲染函数将会阻止我们返回其他东西，此时想暴露组件方法给父组件，可以调用expose</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> expose <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">++</span>count<span class="token punctuation">.</span>value

    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      increment
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h3><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><p>使用 reactive()函数创建一个响应式对象或数组，<code>reactive()</code> 返回的是一个原始对象的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，reactive 是允许多层嵌套的深度代理！</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>

<span class="token comment">// 代理对象和原始对象不是全等的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy <span class="token operator">===</span> raw<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>reactive()</code> API 有两点注意：</p>
<ol>
<li>仅对对象类型有效（对象、数组和 <code>Map</code>、<code>Set</code> 这样的集合类型，而对 <code>string</code>、<code>number</code> 和 <code>boolean</code> 这样的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始类型</a> 无效。</li>
<li>不可以随意地“替换”一个响应式对象，不可以将响应式对象的属性赋值或解构，以上都会失去响应性</li>
</ol>
<h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p> <code>ref()</code>方法来允许我们创建可以使用<strong>任何值类型</strong>的响应式 <strong>ref</strong>，<code>ref()</code> 将传入参数的值包装为一个带 <code>.value</code> 属性的 ref 对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// &#123; value: 0 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>ref 被解构时，不会丢失响应性，即没有 reactive的限制性</li>
<li>当 ref 在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用 <code>.value</code></li>
</ul>
<h4 id="isref"><a href="#isref" class="headerlink" title="isref"></a>isref</h4><p>检查某个值是否为 ref，返回布尔值</p>
<h4 id="unref"><a href="#unref" class="headerlink" title="unref"></a>unref</h4><p>unref就是一个语法糖，unref( info ) === isRef(info) ? info.value : info</p>
<h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><p>创建一个对应的 ref，创建的 ref 与其源属性保持同步：改变源属性的值将更新 ref 的值，反之亦然</p>
<h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h4><p>每个单独的 ref 都是使用 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref"><code>toRef()</code></a> 创建的，常用于结构</p>
<h1 id="VUE原理"><a href="#VUE原理" class="headerlink" title="VUE原理"></a>VUE原理</h1><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>在vue2中</p>
<p>defineProperty增加的属性，是否可修改：writable；是否可枚举：enumerable；是否可删除：configurable。getters和 setter做数据劫持</p>
<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。</p>
<p>这里的 <code>vnode</code> 即一个纯 JavaScript 的对象 (一个“虚拟节点”)，它代表着一个 <code>&lt;div&gt;</code> 元素。它包含我们创建实际元素所需的所有信息。它还包含更多的子节点，这使它成为虚拟 DOM 树的根节点。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'hello'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">/* 更多 vnode */</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h2><p><img data-src="https://cn.vuejs.org/assets/render-pipeline.03805016.png"></p>
<p><strong>编译</strong>：Vue 模板被编译为<strong>渲染函数</strong>：即用来返回虚拟 DOM 树的函数。</p>
<p><strong>挂载：</strong>一个运行时渲染器将会遍历整个虚拟 DOM 树，并据此构建真实的 DOM 树。这个过程被称为<strong>挂载</strong> (mount)。</p>
<p><strong>更新：</strong>如果我们有两份虚拟 DOM 树，渲染器将会有比较地遍历它们，找出它们之间的区别，并应用这其中的变化到真实的 DOM 上。这个过程被称为<strong>更新</strong> (patch)，又被称为“比对”(diffing) 或“协调”(reconciliation)。</p>
<h2 id="模板-vs-渲染函数"><a href="#模板-vs-渲染函数" class="headerlink" title="模板 vs. 渲染函数"></a>模板 vs. 渲染函数</h2><p>Vue 模板会被预编译成虚拟 DOM 渲染函数。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。</p>
<p>在处理高度动态的逻辑时，渲染函数相比于模板更加灵活，可以完全地使用 JavaScript 来构造想要的 vnode。</p>
<h2 id="渲染函数基本用法"><a href="#渲染函数基本用法" class="headerlink" title="渲染函数基本用法"></a>渲染函数基本用法</h2><h3 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h3><p>Vue 提供了一个 <code>h()</code> 函数用于创建 vnodes，<code>h()</code> 是 <strong>hyperscript</strong> 的简称——意思是“能生成 HTML (超文本标记语言) 的 JavaScript”，更准确名称是 <code>createVnode()</code></p>
<p>Vnodes 必须唯一，多个child，不要使用同一个h返回的虚拟节点</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> from Vue<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>
            <span class="token comment">// &#123;String | Object | Function&#125; tag  必需的。</span>
            <span class="token string">'div'</span><span class="token punctuation">,</span>
            <span class="token comment">// &#123;Object&#125; props  与 attribute、prop 和事件相对应的对象。没有props，传null或&#123;&#125;</span>
            <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token comment">// &#123;String | Array | Object&#125; children 可选的。子 VNodes, 使用 `h()` 构建, 或使用字符串获取 "文本 VNode" 或者</span>
            <span class="token string">'123'</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p><a href="https://facebook.github.io/jsx/">JSX</a> 是 JavaScript 的一个类似 XML 的扩展，<code>create-vue</code> 和 Vue CLI 都有预置的 JSX 语法支持。在 JSX 表达式中，<strong>使用大括号来嵌入动态值</strong>；单标签必须要闭合</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token punctuation">&#123;</span>dynamicId<span class="token punctuation">&#125;</span><span class="token operator">></span>hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>userName<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>Vue 的 JSX 编译方式与 React 中 JSX 的编译方式不同</strong>，具体包括：</p>
<ul>
<li>可以使用 HTML attributes 比如 <code>class</code> 和 <code>for</code> 作为 props - 不需要使用 <code>className</code> 或 <code>htmlFor</code>。</li>
<li>传递子元素给组件 (比如 slots) 的<a href="https://cn.vuejs.org/guide/extras/render-function.html#passing-slots">方式不同</a>。</li>
</ul>
<p>几个常见的用等价的渲染函数 / JSX 语法，实现模板功能的案例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">v<span class="token operator">-</span><span class="token keyword">if</span>
<span class="token operator">&lt;</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>yes<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>no<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token comment">// 等价于使用如下渲染函数 / JSX 语法：</span>
<span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ok<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>ok<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>yes<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">:</span> <span class="token operator">&lt;</span>span<span class="token operator">></span>no<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="DIFF算法"><a href="#DIFF算法" class="headerlink" title="DIFF算法"></a>DIFF算法</h2><p>对比新老虚拟节点树，以最小的代价去修改DOM</p>
<p>不会跨级对比，平级对比看索引</p>
<p>深度优先，不是广度优先</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>【黑马程序员Vue全套视频教程，从vue2.0到vue3.0一套全覆盖，前端必会的框架教程】 <a href="https://www.bilibili.com/video/BV1zq4y1p7ga?p=530&amp;share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3">https://www.bilibili.com/video/BV1zq4y1p7ga?p=530&amp;share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>how to use git</title>
    <url>/archives/78356650.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Git 是一个开源的分布式版本控制系统，与 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<p><img data-src="https://s2.loli.net/2023/01/14/FC7qaExcLmTQKeU.webp" alt="image-20230114162459301"></p>
<span id="more"></span>

<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><p>在电脑里能看到的目录</p>
<h4 id="本地版本库"><a href="#本地版本库" class="headerlink" title="本地版本库"></a>本地版本库</h4><p>工作区有一个隐藏目录 <code>.git</code>，这个不算工作区，而是 <code>Git</code> 的版本库</p>
<h4 id="暂存库"><a href="#暂存库" class="headerlink" title="暂存库"></a>暂存库</h4><p>本地版本库里存了很多东西，其中最重要的就是称为 <code>stage</code>（或者叫index）的暂存区，还有 <code>Git</code> 为我们自动创建的第一个分支 <code>main</code>，以及指向 <code>main</code> 的一个指针叫 <code>HEAD</code>。</p>
<h4 id="远程版本库"><a href="#远程版本库" class="headerlink" title="远程版本库"></a>远程版本库</h4><p>一般指的是 <code>Git</code> 服务器上所对应的仓库，常用的<code>github</code>仓库就是一个远程版本库</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>从服务器中拉取代码</p>
<h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git  branch"></a>git  branch</h4><p>创建、重命名、查看、删除项目分支，通过 <code>Git</code> 做项目开发时，一般都是在开发分支中进行，开发完成后合并分支到主干。</p>
<p>git  branch  不带参数的branch命令可以查看当前项目分支列表</p>
<p>git branch -m  branch/0.0.1 创建一个名为branch/0.0.1的开支</p>
<p>git branch -d  branch/0.0.1 删除一个名为branch/0.0.1的开支</p>
<h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>切换分支</p>
<p>git checkout  branch/0.0.1   切换到branch/0.0.1的开支</p>
<h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>查看文件变动状态</p>
<h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>添加文件变动到暂存区</p>
<p>git add README.md 通过指定文件名 <code>README.md</code> 可以将该文件添加到暂存区;</p>
<p>添加所有文件可用 <code>git add .</code></p>
<h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>提交文件变动到版本库 git commit -m ‘这里写提交原因’</p>
<h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>将本地代码改动推送到服务器</p>
<p>git push origin branch/0.0.1  <code>origin</code> 指代的是当前的git服务器地址，这行命令的意思是把 <code>branch/0.0.1</code> 分支推送到服务器</p>
<h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><p>将服务器最新代码拉取到本地</p>
<p>git pull origin branch/0.0.1 </p>
<p><em>如果线上代码做了变动，而你本地的代码也有变动，拉取的代码就有可能会跟你本地的改动冲突，一般情况下 <code>Git</code> 会自动处理这种冲突合并，但如果改动的是同一行，那就需要手动来合并代码，编辑文件，保存最新的改动，再通过 <code>git add .</code>和 <code>git commit -m &#39;xxx&#39;</code> 来提交合并。</em></p>
<p><strong>git</strong> fetch   是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。 而 <strong>git</strong> <strong>pull</strong> 则是将远程主机的最新内容拉下来后直接合并，即： <strong>git</strong> <strong>pull</strong> = git fetch + git merge ，这样可能会产生冲突，需要手动解决。</p>
<h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>查看版本提交记录，提交记录可能会非常多，按 <code>J</code> 键往下翻，按 <code>K</code> 键往上翻，按 <code>Q</code> 键退出查看</p>
<h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>为项目标记里程碑。当我们完成某个功能需求准备发布上线时，应该将此次完整的项目代码做个标记，并将这个标记好的版本发布到线上，这里我们以 <code>publish/0.0.1</code> 为标记名并发布，当看到命令行返回如下内容则表示发布成功了</p>
<p>git tag publish/0.0.1<br>git push origin publish/0.0.1</p>
<p>Total 0 (delta 0), reused 0 (delta 0)<br>To <a href="https://github.com/gafish/gafish.github.com.git">https://github.com/gafish/gafish.github.com.git</a><br> * [<strong>new</strong> tag]     publish/0.0.1 -&gt; publish/0.0.1</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://mp.weixin.qq.com/s/Q_O0ey4C9tryPZaZeJocbA">保姆级Git入门教程，万字详解 (qq.com)</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>moveTaskToback之Activity保活思路</title>
    <url>/archives/9f5d6a91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>作为一个半吊子android开发者，前两天一直被程序闪退问题所困扰，就是从另外的程序切换回来时程序总会崩溃重进，十分影响用户体验。突然发现了moveTaskToBack()这个函数方法，很好的解决了这个问题…<br>下面对这个方法具体介绍：</p>
<span id="more"></span>
<p>moveTaskToBack()方法：<br>将当前activity退回后台，并不是结束该应用,其效果相当于按了HOME键，最小化应用。<br>调用moveTaskToBack后，应用中activity的顺序并不会发生变化<br>参数：<br>false，当前activity是应用启动的第一个应用时才有效；<br>true，对于任何activity都有效。</p>
<p>官方文档对于该方法的介绍：<br><img data-src="https://s2.loli.net/2022/03/18/NCoHxEKhpdAlMRF.png"  /></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs基础知识</title>
    <url>/archives/af7d4850.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>此时不学 更待何时，不想毕业就失业的我  (っ °Д °;)っ</p>
<span id="more"></span>

<h1 id="Nodejs基础"><a href="#Nodejs基础" class="headerlink" title="Nodejs基础"></a>Nodejs基础</h1><blockquote>
<p>浏览器是JavaScript的前端运行环境</p>
<p>Node.js 是JavaScript的后端运行环境、无法调用DOM和BOM等浏览器内置API</p>
<p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine</p>
</blockquote>
<p><a href="https://nodejs.org/en/">nodejs 官网传送门</a></p>
<ul>
<li>基于 <a href="http://www.expressjs.com.cn/">Express 框架 </a>，可以快速构建 Web 应用</li>
<li>基于 <a href="https://electronjs.org/">Electron 框架</a>，可以构建跨平台的桌面应用</li>
<li>基于 <a href="http://restify.com/">restify 框架</a>，可以快速构建 API 接口项目</li>
<li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li>
</ul>
<p>nodejs学习路径：</p>
<p>JavaScript 基础语法 + Node.js内置API模块（fs、path、http等）+ 第三方API模块（express + mysql等）</p>
<h2 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>语法格式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><code>path</code>：文件路径</p>
</li>
<li><p><code>options：配置选项，若是字符串则指定编码格式</code></p>
<ul>
<li><code>encoding</code>：编码格式</li>
<li><code>flag</code>：打开方式</li>
</ul>
</li>
<li><p><code>callback：回调函数</code></p>
<ul>
<li><code>err</code>：如果读取成功，err == null</li>
<li><code>data</code>：如果读取成功，读取的数据，如果未指定编码格式则返回一个 Buffer；如果读取失败，data = undefined</li>
</ul>
</li>
</ul>
<h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>语法格式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><code>file</code>：文件路径</li>
<li><code>data</code>：写入内容</li>
<li><code>options</code>：配置选项，包含 <code>encoding, mode, flag</code>；若是字符串则指定编码格式</li>
<li><code>callback</code>：回调函数</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 示例：</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"C:/Users/笔记.mp3"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 将data写入到文件中</span>
		fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"C:/Users/hello.jpg"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h3><ul>
<li>简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢</li>
<li>大文件适合用流式文件读取，它会分多次将文件读取到内存中</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'C:/Users/lilichao/Desktop/笔记.mp3'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'b.mp3'</span><span class="token punctuation">)</span>

<span class="token comment">// pipe()可以将可读流中的内容，直接输出到可写流中</span>
rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="路径动态拼接问题"><a href="#路径动态拼接问题" class="headerlink" title="路径动态拼接问题"></a>路径动态拼接问题</h3><ul>
<li><p>在使用 fs 模块操作文件时，如果提供的操作路径是以 <code>./</code> 或 <code>../</code> 开头的相对路径时，容易出现路径动态拼接错误的问题</p>
</li>
<li><p>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</p>
</li>
<li><p>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，从而防止路径动态拼接的问题</p>
</li>
<li><p>直接用绝对路径 ，移植性会很差，不利于维护</p>
</li>
<li><p><code>__dirname</code>  获取文件所处的绝对路径</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span> __dirname <span class="token operator">+</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p>
<h3 id="路径拼接-path-join"><a href="#路径拼接-path-join" class="headerlink" title="路径拼接 path.join()"></a>路径拼接 <code>path.join()</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>

<span class="token comment">// 注意 ../ 会抵消前面的路径</span>
<span class="token comment">// ./ 会被忽略</span>
<span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'/b/c'</span><span class="token punctuation">,</span> <span class="token string">'../../'</span><span class="token punctuation">,</span> <span class="token string">'./d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span>    <span class="token comment">//reslut: \a\d\e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="获取路径文件名-path-basename"><a href="#获取路径文件名-path-basename" class="headerlink" title="获取路径文件名 path.basename()"></a>获取路径文件名 <code>path.basename()</code></h3><p>使用 <code>path.basename()</code> 方法，可以获取路径中的最后一部分，常通过该方法获取路径中的文件名</p>
<ul>
<li>path: 文件路径</li>
<li>ext: 文件扩展名</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

<span class="token comment">// 定义文件的存放路径</span>
<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">'/a/b/c/index.html'</span>

<span class="token keyword">const</span> fullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span>   <span class="token comment">// index.html</span>

<span class="token keyword">const</span> nameWithoutExt <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWithoutExt<span class="token punctuation">)</span>   <span class="token comment">// index</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="获取路径文件扩展名path-extname"><a href="#获取路径文件扩展名path-extname" class="headerlink" title="获取路径文件扩展名path.extname()"></a>获取路径文件扩展名<code>path.extname()</code></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">'/a/b/c/index.html'</span>

<span class="token keyword">const</span> fext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fext<span class="token punctuation">)</span>    <span class="token comment">//result：  .html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。</p>
<p>了解即可，后面主要用封装更好的express</p>
<p>Node.js中 不需要使用IIS、Apache这些服务器软件，仅通过几行代码，就可以对外提供web服务。</p>
<blockquote>
<p>域名服务器就是提供IP地址和域名之间的转换服务的服务器，在实际应用中，URL的80端口可以被省略</p>
</blockquote>
<h3 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1. 导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>

<span class="token comment">//2. 创建web服务器实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//3. 为服务器实例绑定request事件，监听客户端请求</span>
<span class="token comment">// req 请求对象 、res 响应对象</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span>，<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
    <span class="token comment">// req.url是客户端请求的URL地址</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url
    <span class="token comment">// req.method 是客户端请求的method类型 eg GET、POST</span>
    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method
    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, and request method is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
    
    <span class="token comment">// 设置 Content-Type 响应头，解决中文乱码的问题</span>
 	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>
   	<span class="token comment">//res.end 向客户端发送指定的内容，并结束这次请求的过程</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 4. 启动服务器</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不同的header标头传输不同的数据类型，具体可上网搜索！</p>
<blockquote>
<p>查漏补缺：js 语法， 等于 ===，常量 const，变量 let</p>
</blockquote>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块化概念"><a href="#模块化概念" class="headerlink" title="模块化概念"></a>模块化概念</h3><ul>
<li>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程，模块是可组合、分解和更换的单元。</li>
<li>好处：提高代码的复用性和可维护性，实现按需加载</li>
</ul>
<h3 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h3><ul>
<li>内置模块（fs, path, http等）</li>
<li>自定义模块（用户自定义模块）</li>
<li>第三方模块（第三方开发，使用前需要先下载）</li>
</ul>
<h3 id="Node-js-中的模块作用域"><a href="#Node-js-中的模块作用域" class="headerlink" title="Node.js 中的模块作用域"></a>Node.js 中的模块作用域</h3><ul>
<li>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</li>
<li>防止全局变量污染</li>
</ul>
<h3 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h3><ul>
<li>每个自定义模块中都有一个module对象，里面存储了和当前模块有关的信息。</li>
<li>在自定义模块中，可以使用 <code>module.exports</code> 对象，将模块内的成员共享出去，供外界使用。</li>
<li>导入自定义模块时，得到的就是 <code>module.exports</code> 指向的对象。</li>
</ul>
<h3 id="module中的exports"><a href="#module中的exports" class="headerlink" title="module中的exports"></a>module中的exports</h3><p>exports 和 module.exports  指的是同一个对象。</p>
<p>最终共享的结果，以 <code>module.exports</code> 指向的对象为准。</p>
<h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>模块第一次加载后会被缓存，即多次调用 <code>require()</code> 不会导致模块的代码被执行多次，提供模块加载效率。</p>
<h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><ol>
<li><p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.1</p>
<ul>
<li><p>第一位数字：大版本</p>
</li>
<li><p>第二位数字：功能版本</p>
</li>
<li><p>第三为数字：Bug修复版本</p>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>node_modules 用来存放已安装的包</p>
<p>package-lock.json 配置文件记录每一个包的详细信息</p>
</li>
<li><p>在项目根目录中，package.json 配置文件，用来记录项目中安装了哪些包，从而方便剔除 node_modules，缩小上传体积</p>
<p>在项目开发中，需要把node_modules文件夹，添加到.gitignore忽略文件中</p>
</li>
<li><p>dependencies节点，<strong>开发和上线</strong>都需要用到，记录安装了哪些包；devDependencies节点，<strong>项目上线后不会用到</strong>，记录只在项目开发中用到的包，安装命令 npm - i 包名 –save-dev OR  npm - i 包名 -D</p>
</li>
<li><p>当拿到一个提出了 node_modules 的项目后，需要先把所需的包下载到项目中，才能成功运行</p>
<p>使用 npm install 可以一次性安装所有依赖包</p>
</li>
<li><p>几个关于包下载的命令</p>
</li>
</ol>
<blockquote>
<p>npm config get registry 查看当前下载包源</p>
<p>npm config set registry=<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com/</a> 将官方源切换为淘宝镜像源</p>
</blockquote>
<p>为了更方便切换下载镜像源，可以安装 nrm，利用nrm快速查看和切换下载镜像源</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"># 全局可用的下载nrm
npm i nrm <span class="token operator">-</span>g

# 查看所有可用镜像源
nrm ls 

# 切换镜像源
nrm use taobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img data-src="https://s2.loli.net/2022/08/12/PApQMktRXrFI2mo.png"></p>
<ol start="7">
<li><p>在发布自己的开发包之前，需要把下载包源切换为npm官方服务器，而不是镜像源</p>
<p>npm unpublish –force 只可以删除72小时内发布的包</p>
<p>发布包的时候要慎重，不要发布没意义的包</p>
</li>
</ol>
<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p><a href="https://www.expressjs.com.cn/">官网传送门</a></p>
<blockquote>
<p> 基于 Node.js 平台，快速、开放、极简的 Web 开发框架</p>
</blockquote>
<p>Express 是用于快速创建服务器的第三方模块，Express 是基于内置的http模块进一步封装出来的。</p>
<h2 id="Express-初体验"><a href="#Express-初体验" class="headerlink" title="Express 初体验"></a>Express 初体验</h2><p>创建服务器，监听客户端请求，并返回内容：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token comment">// 创建 web 服务器</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 通过 req.query 可以获取到客户端发送过来的查询参数</span>
  <span class="token comment">// http://127.0.0.1/?name=cyc&amp;age=20</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 这里的 :id 是一个动态的参数</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/:ids/:username'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// req.params 是动态匹配到的 URL 参数，默认是一个空对象</span>
  <span class="token comment">// http://127.0.0.1/user/1/cyc</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>POST和GET 区别：</p>
<p>GET把参数包含在URL中，POST通过request body传递参数</p>
<p>GET 获取参数、 POST 传递参数</p>
<p><a href="https://www.cnblogs.com/logsharing/p/8448446.html">GET和POST两种基本请求方法的区别 - 在途中# - 博客园 (cnblogs.com)</a></p>
</blockquote>
<h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><ul>
<li>通过 <code>express.static()</code> 方法可创建静态资源服务器，向外开放访问静态资源。</li>
<li>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的<strong>目录名不会出现</strong>在 URL 中</li>
<li>如果托管多个静态资源目录，多次调用 <code>express.static()</code>函数</li>
<li>访问静态资源时，会根据<strong>托管顺序</strong>查找文件</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/bruce'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'bruce'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">/*
可直接访问 public, files 目录下的静态资源
http://localhost:3000/images/bg.jpg
http://localhost:3000/css/style.css
http://localhost:3000/js/login.js

通过带有 /bruce 前缀的地址访问 bruce 目录下的文件
http://localhost:8080/bruce/images/logo.png
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="nodemon-监听调试工具"><a href="#nodemon-监听调试工具" class="headerlink" title="nodemon 监听调试工具"></a>nodemon 监听调试工具</h2><p>在编写nodejs代码时，如果修改代码，需要频繁的手动重启，非常繁琐</p>
<p>nodemon可以监听项目文件的变动，当代码被修改时，自动重启项目，方便开发调试</p>
<p>使用方法：</p>
<p><img data-src="https://s2.loli.net/2022/08/12/C7i2gXVr3TRHLMD.png"></p>
<h2 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h2><p>路由 就是一种映射关系</p>
<p>路由 由三部分组成，<strong>请求的类型、请求的URL地址、处理函数</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这就是两个最简单的路由</span>
<span class="token comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实际使用中，不能将路由直接挂载到 express 中，需要 模块化路由</p>
<p>how to do it ?</p>
<ol>
<li>创建路由模块：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// router.js</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 创建路由对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 挂载具体路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Get user list.'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Add new user.'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 4. 向外导出路由对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注册路由模块：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token number">5.</span> 导入路由模块
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 6. 使用app.use注册路由模块 (添加访问前缀,可有可无)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>app.use() 函数的使用，就是用来注册 全局中间件</p>
</blockquote>
<h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><ul>
<li>中间件是指流程的中间处理环节，有输入，有输出</li>
<li>Express 中间件 本质就是一个function处理函数，包含 <code>req, res, next</code> 三个参数，<code>next()</code> 参数把流转关系交给下一个中间件或路由</li>
<li>next函数 就是多个中间件连续调用的关键，表示将流转关系转交给<strong>下一个中间价或路由</strong></li>
</ul>
<p>中间件注意事项；</p>
<ul>
<li><strong>在注册路由之前注册中间件</strong>（错误级别中间件除外）</li>
<li>中间件可连续调用多个</li>
<li>别忘记调用 <code>next()</code> 函数</li>
<li><code>next()</code> 函数后别写代码</li>
<li>多个中间件共享 <code>req</code>、 <code>res</code>对象，在上游的中间件中为req和res添加自定义属性和方法，可供下游中间件或路由使用</li>
</ul>
<h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><p>客户端发起的任何请求，都会触发的中间件，即全局中间件，通过app.use来调用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 定义第一个全局中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第1个全局中间件'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 定义第二个全局中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第2个全局中间件'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><p>不适用 app.use()  定义的中间件，叫做局部生效的中间件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 定义中间件函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">mw1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第一个局部生效的中间件'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mw2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第二个局部生效的中间件'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 两种定义局部中间件的方式</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> mw2<span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello page.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'about page.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User page.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Express server running at http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><ol>
<li><p>应用级别的中间件</p>
<p>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 <code>app</code> 实例上的中间件</p>
</li>
<li><p>路由级别的中间件</p>
<p>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件。用法和应用级别中间件没有区别。应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 <code>router</code> 实例上。</p>
</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>错误级别的中间件<ul>
<li>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li>
<li>错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 <code>(err, req, res, next)</code> 。</li>
<li>错误级别的中间件必须注册在所有路由之后</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'服务器内部发生了错误！'</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page.'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生了错误！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Error：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Express server running at http://127.0.0.1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>Express 内置中间件</p>
<p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p>
<ul>
<li><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li>
<li><code>express.json</code> 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li>
<li><code>express.urlencoded</code> 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>第三方中间件</p>
</li>
</ol>
<h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><h3 id="CORS-中间件"><a href="#CORS-中间件" class="headerlink" title="CORS 中间件"></a>CORS 中间件</h3><ul>
<li><p>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</p>
</li>
<li><p>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</p>
</li>
<li><p>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</p>
</li>
<li><p>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/13/IgWb5iHSBjnOuTG.png"></p>
<h3 id="CORS-如何使用"><a href="#CORS-如何使用" class="headerlink" title="CORS 如何使用"></a>CORS 如何使用</h3><ul>
<li>安装中间件：<code>npm install cors</code></li>
<li>导入中间件：<code>const cors = require(&#39;cors&#39;)</code></li>
<li>配置中间件：<code>app.use(cors())</code></li>
</ul>
<h3 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a>CORS 常见响应头</h3><ul>
<li><p><code>Access-Control-Allow-Origin</code>：制定了允许访问资源的外域 URL</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'http://bruceblog.io'</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p><code>Access-Control-Allow-Headers</code></p>
<p>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</code></p>
<p>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 A<code>ccess-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, X-Custom-Header'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p><code>Access-Control-Allow-Methods</code></p>
<p>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'POST, GET, DELETE, HEAD'</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span><span class="token function">setHEader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ul>
<li>请求方式：GET、POST、HEAD 三者之一</li>
<li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application/x-www-formurlencoded、multipart/form-data、text/plain）</li>
</ul>
<h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><ul>
<li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li>
<li>请求头中包含自定义头部字段</li>
<li>向服务器发送了 application/json 格式的数据</li>
</ul>
<p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p>
<h1 id="数据库与身份认证"><a href="#数据库与身份认证" class="headerlink" title="数据库与身份认证"></a>数据库与身份认证</h1><h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><ol>
<li><p>基于服务端渲染的传统web开发模式</p>
<p>概念：服务器发给客户端的HTML页面，是在服务器完全生成的，客户端不需要Ajax这样的技术去额外请求页面的数据</p>
<p>优点：</p>
<pre><code>1. 前端耗时少
2. 有利于SEO
</code></pre>
<p>缺点：</p>
<pre><code> 1. 占用服务器端资源
 2. 不理由前后端分离，开发效率低
</code></pre>
</li>
<li><p>基于前后端分离的新型web开发模式</p>
<p>概念：依赖于Ajax技术的前后端分离开发，后端只提供API借口，前端使用Ajax 调用接口的开发模式</p>
<p>优点：</p>
<pre><code>1. 开发体验好
2. 用户体验好，实现页面局部刷新
3. 减轻服务端渲染压力
</code></pre>
<p>缺点：</p>
<pre><code> 1. 不利于SEO，爬虫无法爬取页面的有效信息，解决方案：利用react、vue前端框架的SSR技术
</code></pre>
</li>
</ol>
<p>如何选择：</p>
<p>不谈业务场景盲选开发模式都是不合理的</p>
<p>在企业展示网站或个人博客网站里，主要功能是展示而没有复杂交互，就使用服务器端渲染</p>
<p>在后台管理项目中，交互性强，使用前后端分离开发模式</p>
<p>在一些项目中，会采用首屏服务端渲染+其他页面前后端分离的组合开发模式</p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3><p>服务端渲染推荐使用 Session 认证机制</p>
<h4 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h4><p>HTTP协议的无状态性，指的是客户端的额每次HTTP请求都是独立的，服务器不会主动保留每次HTTP请求的状态</p>
<h4 id="Cookie-，突破这种无状态性"><a href="#Cookie-，突破这种无状态性" class="headerlink" title="Cookie ，突破这种无状态性"></a>Cookie ，突破这种无状态性</h4><p>Cookie，身份认证的标识，类比于现实生活中的会员卡身份认证</p>
<p>Cookie是 存储在浏览器中一段不超过4kb的字符串，不同域名下Cookie 各自独立，每当客户端发送请求，会自动将<strong>当前域名下未过期</strong>的Cookie一同发送给服务器</p>
<p>Cookie 是服务器在第一次接受请求后发送给客户端后，之后客户端将Cookie存在浏览器中，在之后的访问中，浏览器自动将Cookie<strong>以请求头的形式</strong>发送给服务器，已表明身份。</p>
<p><strong>Cookie 不具有安全性</strong>，不建议将重要的隐私数据通过Cookie的形式发送</p>
<h4 id="Session，提高身份认证的安全性"><a href="#Session，提高身份认证的安全性" class="headerlink" title="Session，提高身份认证的安全性"></a>Session，提高身份认证的安全性</h4><p><img data-src="https://s2.loli.net/2022/08/13/KqLMraTUfHFypId.png"></p>
<h3 id="Session-认证机制-1"><a href="#Session-认证机制-1" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs &amp;amp; npm &amp;amp; nvm</title>
    <url>/archives/7221dd0e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>封面一图已经很好说明了nodejs、npm、nvm三者的关系，更深入的概念了解和常用命令介绍，见文章详情。</p>
<p><img data-src="https://s2.loli.net/2022/04/20/f2tDn69x4AWC3yJ.png"></p>
<span id="more"></span>

<h1 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h1><ol>
<li><p>node.js，就是运行在服务端的JavaScript，基于google的V8引擎，执行JavaScript的速度非常快，性能也很好</p>
</li>
<li><p>npm是nodejs的<strong>包管理工具</strong>，不用单独安装，在安装nodejs时已经伴随安装好了，它们的关系可以类比于pip于Python</p>
</li>
<li><p>nvm，全名为nodejs version management，是一个nodejs的<strong>版本管理工具</strong>，通过它可以安装和切换不同版本的nodejs。</p>
</li>
</ol>
<p>hexo-douban是一个可以爬取豆瓣数据的第三方包，如果nodejs版本过高，会导致爬取不到数据，需要切换nodejs到v12.18.0低版本。</p>
<p>重新卸载再安装nodejs，不仅十分麻烦，而且在安装其他第三方包的时候可能又会出现不兼容。<strong>反复重装，不是好办法，这个时候就需要用到nvm</strong></p>
<h1 id="安装建议"><a href="#安装建议" class="headerlink" title="安装建议"></a>安装建议</h1><p><strong>先装nvm，再装nodejs</strong></p>
<ol>
<li><p>在<a href="https://github.com/coreybutler/nvm-windows/releases">nvm安装地址</a>上直接安装下载，一路点击continue即可，安装包特别小，默认路径即可。</p>
</li>
<li><p>在命令窗口 nvm install <version> 结合实际情况安装指定版本，version = latest 即为安装最新稳定版本</p>
</li>
<li><p> npm install &lt;第三方包&gt;  安装自己需要的拓展包</p>
</li>
</ol>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h3 id="nvm常用命令："><a href="#nvm常用命令：" class="headerlink" title="nvm常用命令："></a>nvm常用命令：</h3><ol>
<li><code>nvm list available</code>        显示可下载版本的部分列表</li>
<li> <code>nvm list</code>        查看电脑里已经安装的版本</li>
<li> <code>nvm use</code>           使用指定版本的nodejs</li>
<li> 如果下载node过慢，请更换国内镜像源  <code>nvm node_mirror https://npm.taobao.org/mirrors/node/</code></li>
<li> 如果下载第三方包过慢，请更换国内镜像源  <code>nvm node_mirror https://npm.taobao.org/mirrors/npm/</code></li>
</ol>
<h3 id="nvm其他命令："><a href="#nvm其他命令：" class="headerlink" title="nvm其他命令："></a>nvm其他命令：</h3><img data-src="https://s2.loli.net/2022/04/20/zhwQ4KDpTSJ36VB.png" style="zoom:80%;" />

<h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><h2 id="nvm安装nodejs没有npm"><a href="#nvm安装nodejs没有npm" class="headerlink" title="nvm安装nodejs没有npm"></a>nvm安装nodejs没有npm</h2><p>使用NVM管理工具安装一个新的<a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a>后，发现没有npm可以使用</p>
<p><img data-src="https://s2.loli.net/2022/10/14/MJ9IKZlmxoLw1RC.png" alt="image-20221014135606499"></p>
<p>在使用NVM安装node的时候不会默认安装npm，所以需要我们自己下载后放到nvm对应的node目录下面</p>
<p>npm下载地址：<a href="http://npm.taobao.org/mirrors/npm/">http://npm.taobao.org/mirrors/npm/</a> （下载对应版本的zip文件）</p>
<p>node版本对应npm版本：<a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p>
<p>下载完成后将zip文件解压到nvm安装目录中对应的node版本中的node_modules目录下</p>
<p>我是解压在“C:\Users\cyc\AppData\Roaming\nvm\v12.22.0\node_modules”下</p>
<p>然后将文件名称改为npm</p>
<p><img data-src="https://s2.loli.net/2022/10/14/CE8uZsViOnhGvj4.png" alt="image-20221014135733837"></p>
<p>最后将npm文件夹里面的bin目录下的npm和npm.cmd两个文件复制一份到对应node版本的根目录下，如图：</p>
<p><img data-src="https://s2.loli.net/2022/10/14/fo6aukZJTUw3tnV.png" alt="image-20221014135751197"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://nvm.uihtm.com/">http://nvm.uihtm.com/</a></li>
<li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></li>
<li><a href="http://nodejs.cn/learn">http://nodejs.cn/learn</a></li>
<li><a href="https://blog.csdn.net/qq_42299461/article/details/119181188">(8条消息) NVM 安装node.js后没有npm_璃墟的博客-CSDN博客_有node没有npm</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>npm</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack使用说明</title>
    <url>/archives/d41a35b4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://www.webpackjs.com/">webpack </a>是一个现代 JavaScript 应用程序的<em>静态模块打包器</em>，是前端工程化必不可少的工具之一，以下是我的学习笔记整理。</p>
<img data-src="https://s2.loli.net/2022/08/25/ukiaUjKWEhSZJNR.png" style="zoom: 50%;" />

<span id="more"></span>

<h1 id="前端框架开发基础"><a href="#前端框架开发基础" class="headerlink" title="前端框架开发基础"></a>前端框架开发基础</h1><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h3 id="前端工程原则"><a href="#前端工程原则" class="headerlink" title="前端工程原则"></a>前端工程原则</h3><ul>
<li>模块化（ js 、css 代码的复用）</li>
<li>组件化（现有的 UI 结构的复用）</li>
<li>规范化（目录结果划分、编码规范化、接口规范化、文档规范化、git 分支管理）</li>
<li>自动化（自动化构建、自动部署、自动化测试）</li>
</ul>
<h3 id="何为前端工程化"><a href="#何为前端工程化" class="headerlink" title="何为前端工程化"></a>何为前端工程化</h3><p>前端工程化即，在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。这样有利于前端开发自成体系，有一套<strong>标准的开发方案和流程</strong>。</p>
<h3 id="前端工程化解决方案"><a href="#前端工程化解决方案" class="headerlink" title="前端工程化解决方案"></a>前端工程化解决方案</h3><p>早期：<del>grunt 、gulp</del></p>
<p>目前主流： webpack、parcel、vite</p>
<h2 id="初识-webpack"><a href="#初识-webpack" class="headerlink" title="初识 webpack"></a>初识 webpack</h2><h3 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h3><ul>
<li><p>webpack是前端项目工程化的具体解决方案</p>
<ul>
<li>提供了友好的<strong>前端模块化开发</strong>(ejs、pug)</li>
<li><strong>代码压缩混淆</strong></li>
<li>处理语法兼容性(ES6,ES7,ES8,less,scss)</li>
<li>性能优化、实时编译等功能</li>
</ul>
</li>
<li><p>提高开发效率和项目可维护性</p>
</li>
</ul>
<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 原始三大件
webpack
webpack<span class="token operator">-</span>cli
webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server 自动进行项目打包和构建

<span class="token number">2.</span> 处理<span class="token constant">JS</span> <span class="token constant">ES6</span> <span class="token constant">ES7</span> <span class="token constant">ES8</span> 装饰器六件套
处理<span class="token constant">ES6</span>
babel<span class="token operator">-</span>loader@<span class="token number">7</span>
babel<span class="token operator">-</span>core
babel<span class="token operator">-</span>preset<span class="token operator">-</span>env
处理<span class="token constant">ES7</span> <span class="token constant">ES8</span>
babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime
处理装饰器
babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>decorators
babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>decorators<span class="token operator">-</span>legacy

<span class="token number">3.</span> 处理 sass <span class="token operator">-</span><span class="token operator">></span> css <span class="token operator">-</span><span class="token operator">></span> style 样式四大件
sass<span class="token operator">-</span>loader
node<span class="token operator">-</span>sass
css<span class="token operator">-</span>loader
style<span class="token operator">-</span>loader

<span class="token number">4.</span> 处理模板
ejs<span class="token operator">-</span>loader

<span class="token number">5.</span> 代码压缩
html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin

npm i <span class="token operator">-</span><span class="token constant">D</span> webpack webpack<span class="token operator">-</span>cli webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server babel<span class="token operator">-</span>loader babel<span class="token operator">-</span>core babel<span class="token operator">-</span>preset<span class="token operator">-</span>env babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>decorators babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>decorators<span class="token operator">-</span>legacy sass<span class="token operator">-</span>loader node<span class="token operator">-</span>sass css<span class="token operator">-</span>loader style<span class="token operator">-</span>loader ejs<span class="token operator">-</span>loader html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><code>-D</code> 是 <code>--save-dev</code> 的缩写，表示开发时依赖，只在项目开发阶段用到。</p>
<p><code>-S</code> 是 <code>--save</code> 的缩写，表示运行时依赖，即项目打包发布运行时要用到。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>在项目根目录中创建 webpack.config.js 配置文件，初始化基本配置：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// mode 用于指定构建模式，可选值有 development 和 production</span>
  <span class="token comment">// development开发环境，不会对打包生成的文件进行代码压缩和性能优化，打包速度快，适合开发阶段使用</span>
  <span class="token comment">// production生产环境，与development反之</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在 <code>package.json</code> 文件的 <code>scripts</code> 节点下，新增 <code>dev</code> 脚本：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string-property property">"scripts"</span> <span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 配置好后就能通过 npm run dev 命令执行打包过程</span>
  <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在终端中运行 <code>npm run dev</code> 命令，即可启动 webpack 进行项目的打包构建</li>
</ol>
<h3 id="webpack-config-js-配置文件"><a href="#webpack-config-js-配置文件" class="headerlink" title="webpack.config.js 配置文件"></a>webpack.config.js 配置文件</h3><p>webpack.config.js 是 webpack 的配置文件。webpack 在真正开始打包构建之前，会先读取这个配置文件，从而基于给定的配置，对项目进行打包。</p>
<h4 id="webpack默认约定"><a href="#webpack默认约定" class="headerlink" title="webpack默认约定"></a>webpack默认约定</h4><ul>
<li>默认打包入口文件为 src  -&gt; index.js</li>
<li>默认输出文件路径为 dist -&gt; main.js</li>
<li>可以在webpack.config.js 配置文件中，通过entry节点指定打包入口，output节点指定打包出口</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的存放路径</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的名称</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>类似于nodejs中的nodemon工具，每当修改源码，webpack会自动进行项目打包和构建</p>
<p>webpack-dev-server会将打包的js放到<strong>内存</strong>中，方便快速读写更改</p>
<h3 id="安装webpack-dev-server"><a href="#安装webpack-dev-server" class="headerlink" title="安装webpack-dev-server"></a>安装webpack-dev-server</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">npm install webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="配置webpack-dev-server"><a href="#配置webpack-dev-server" class="headerlink" title="配置webpack-dev-server"></a>配置webpack-dev-server</h3><ol>
<li>修改 <code>package.json -&gt; scripts</code> 的 <code>dev</code> 命令：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>运行 <code>npm run dev</code> 命令，重新打包项目</li>
<li>浏览器访问 <code>http://localhost:8080</code> 地址，查看打包效果</li>
</ol>
<h3 id="devServer-节点"><a href="#devServer-节点" class="headerlink" title="devServer 节点"></a>devServer 节点</h3><p>通过 webpack.config.js 文件的 <code>devServer</code> 节点对 webpack-dev-server 插件进行更多的配置。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 初次打包完成后，自动打开浏览器</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token comment">// 访问地址</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">80</span> <span class="token comment">// 访问端口号</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><ul>
<li>webpack中的HTML插件，类似于模板引擎插件</li>
<li>可以通过此插件自定制index.html页面的内容</li>
</ul>
<img data-src="https://s2.loli.net/2022/08/20/domXCuPViztqI2W.png" style="zoom:80%;" />

<h2 id="webpack的loader"><a href="#webpack的loader" class="headerlink" title="webpack的loader"></a>webpack的loader</h2><p>实际开发中，webpack只能打包处理js后缀模块，非js后缀结尾的模块，需要调用loader加载器才可以正常打包，比如</p>
<p> 在webpack.config.js 的module -&gt; rules 数组中，添加相应的规则: </p>
<ul>
<li><code>css-loader</code> 处理 css 相关文件</li>
<li><code>less-loader</code> 处理 less 相关文件</li>
<li><code>url-loader</code> 处理 图片等相关文件</li>
<li><code>babel-loader</code> 处理 webpack 无法处理的高级JS语法<ul>
<li>babel 的使用需要在use后面添加一个 exclude 排除 node_modules目录下的JS文件</li>
<li>还需要创建一个 babel.config.js 的配置文件</li>
</ul>
</li>
</ul>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><h3 id="为何需要打包发布"><a href="#为何需要打包发布" class="headerlink" title="为何需要打包发布"></a>为何需要打包发布</h3><ul>
<li>开发环境下，打包生成的文件存放于内存中，无法得到最终打包生成的文件</li>
<li>开发环境下，打包生成的文件不会进行代码压缩和性能优化</li>
</ul>
<h3 id="配置打包"><a href="#配置打包" class="headerlink" title="配置打包"></a>配置打包</h3><p>在 package.json 文件的 scripts 节点下，新增build命令如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string-property property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
	<span class="token string-property property">"build"</span> <span class="token operator">:</span> <span class="token string">"webpack --mode production"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="把-JS-文件统一生成到-js-目录"><a href="#把-JS-文件统一生成到-js-目录" class="headerlink" title="把 JS 文件统一生成到 js 目录"></a>把 JS 文件统一生成到 js 目录</h3><p>在 webpack.config.js 配置文件的 <code>output</code> 节点中，进行配置:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">ouput</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 将 bundle.js 文件存放到 dist 目录的 js 子目录中</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'js/bundle.js'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="把图片统一生成到-image-目录"><a href="#把图片统一生成到-image-目录" class="headerlink" title="把图片统一生成到 image 目录"></a>把图片统一生成到 image 目录</h3><p>修改 webpack.config.js 中的 <code>url-loader</code> 配置项，新增 <code>outputPath</code> 选项指定图片文件的输出路径：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jpg|png|gif$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">23333</span><span class="token punctuation">,</span>
      <span class="token comment">// 指明生成的图片存到 dist 目录下的 image 子目录中</span>
      <span class="token literal-property property">outputPath</span><span class="token operator">:</span> <span class="token string">'image'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="自动清理-dist-目录下的旧文件"><a href="#自动清理-dist-目录下的旧文件" class="headerlink" title="自动清理 dist 目录下的旧文件"></a>自动清理 dist 目录下的旧文件</h3><p>安装配置 clean-webpack-plugin </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> clean-webpack-plugin@3.0.0 -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 webpack.config.js 文件中进行配置：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> CleanWebpackPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>

<span class="token comment">// plugins 节点挂载 CleanWebpackPlugin 实例对象</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="企业级项目打包发布"><a href="#企业级项目打包发布" class="headerlink" title="企业级项目打包发布"></a>企业级项目打包发布</h3><p>企业级项目打包发布的流程更复杂：</p>
<ul>
<li>生成打包报告，根据报告分析具体的优化方案</li>
<li>Tree-Shaking</li>
<li>为第三方库启用 CDN 加载</li>
<li>配置组件的按需加载</li>
<li>开启路由懒加载</li>
<li>自定制首页内容</li>
</ul>
<h2 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h2><p>SourceMap 就是信息文件，存储着压缩混淆代码转换前的位置信息。</p>
<p>出错的时候，SourceMap 将直接显示出错的原始代码位置，极大方便后期的调试。</p>
<p>在 webpack.config.js 添加如下配置</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    # 在开发调试的时候，有行号，且暴露代码
	<span class="token literal-property property">devtools</span><span class="token operator">:</span> <span class="token string">"eval-source-map"</span>
    # 在实际发布的时候，只有行号，不暴露代码
	<span class="token literal-property property">devtools</span><span class="token operator">:</span> <span class="token string">"nosources-source-map"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>生产环境时，需要关闭该设置。</p>
<h3 id="的原理与好处"><a href="#的原理与好处" class="headerlink" title="@的原理与好处"></a>@的原理与好处</h3><p>@ 表示 src 源代码目录，从外往里找， 不要使用 ../</p>
<p>配置方式： 在 webpack.config.js  中</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">alias</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
         <span class="token string-property property">"@"</span> <span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> __dirname<span class="token punctuation">,</span><span class="token string">"./src/"</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://brucecai55520.gitee.io/bruceblog/notes/webpack/webpack%E5%9F%BA%E7%A1%80.html#%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96">前端工程化与 webpack 基础 | BruceBlog (gitee.io)</a></p>
<p><a href="https://www.bilibili.com/video/BV1zq4y1p7ga?p=1&vd_source=57ac88e7b8d0e5cd1b0c032745042667">黑马程序员Vue全套视频教程，从vue2.0到vue3.0一套全覆盖，前端必会的框架教程_哔哩哔哩_bilibili</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>push(array)和push([…array])的区别</title>
    <url>/archives/2916f4df.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>刷<a href="https://leetcode.cn/problems/combinations/">Leecode77题</a>中发现的有关push(array)和push([…array])的区别，记录一下。</p>
<span id="more"></span>
<p><strong>题目：</strong></p>
<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>
<p>你可以按 <strong>任何顺序</strong> 返回答案。</p>
<p><strong>答案：</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">combine</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> sub_res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sub_res<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub_res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sub_res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sub_res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我这个答案得出的结果是 [[],[],[],[]….]</p>
<p>在查看别人代码之后，发现了差异，是push(array)和push([…array])的区别。</p>
<p><strong>解析</strong></p>
<ul>
<li>res.push(path) 等于把 path 的引用，追加到了数组里面。所以如果path被改变了，res里面的也会改变。</li>
<li>res.push([…path]),这里等于把 path 的内容拿出来，重新构建了一个数组。然后追加。这里重点是切断了引用关系。</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>使用JavaScript创建二维数组常犯的错误</title>
    <url>/archives/19558d30.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Array(3).fill(Array(3).fill(0)) === Array(3).fill(0).map((value) =&gt; Array(3).fill(0)) 为什么返回false？</p>
<span id="more"></span>

<ul>
<li>Array.prototype.fill() 方法会用一个固定的值填充一个数组。</li>
<li>Array.prototype.map() 方法会创建一个新的数组，其中每个元素都是原数组中对应元素经过一个函数处理后的结果。</li>
<li>当使用 fill() 方法填充一个二维数组时，如果传入的参数是一个引用类型（如对象或数组），那么所有的子数组都会指向同一个引用，而不是创建新的副本。</li>
<li>当使用 map() 方法创建一个二维数组时，如果传入的函数返回一个新的数组，那么每个子数组都会是独立的副本，而不是共享同一个引用。</li>
<li>因此，使用 fill() 方法和 map() 方法得到的二维数组在内存中存储的方式不同，所以它们之间不能用 === 运算符进行严格相等比较。</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于FTP文件传输的一些总结</title>
    <url>/archives/a1c92ee3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近项目上有个功能需求，就是要求在数据采集结束后，自动完成在设备间的数据传输。所以就想到了专门用来做数据传输的FTP，很简单的一个东西~<br>但是，网上对于主被动模式的具体使用场景介绍的大部分都很有问题，只是一味地说用被动模式，浪费了很多时间，所以在这里总结一下…</p>
<span id="more"></span>

<h1 id="FTP基本介绍"><a href="#FTP基本介绍" class="headerlink" title="FTP基本介绍"></a>FTP基本介绍</h1><p>FTP(file transfer protocol),用于在网络上进行文件传输的一套协议，可以实现访问远程资源，实现往返传输数据、目录管理等，即使是不同的操作系统和文件存储方式<br>all in all，简单易上手，优点多多~</p>
<h1 id="传输特点"><a href="#传输特点" class="headerlink" title="传输特点"></a>传输特点</h1><p>FTP是基于C/S模型(client/server)而设计的，在客户端和服务端之间建立了两个TCP连接，一个是控制连接，一个是数据连接。<br>你可以简单理解成两国外交会谈，控制连接就是两个外交部长在那里握手，表示我们开始会谈了，数据连接则是他们手下的小兵，负责具体会谈的内容~</p>
<h1 id="FTP两种传输模式"><a href="#FTP两种传输模式" class="headerlink" title="FTP两种传输模式"></a>FTP两种传输模式</h1><p>FTP有两种传输协议，一种是主动模式，又称<strong>PORT</strong>模式；一种是被动模式，又称<strong>PASV</strong>模式。<br>不管是哪种，它们的控制连接(外交部长)都是服务器监听21端口，客户端找服务器的21端口发起TCP连接。<br><strong>如何区分这两种模式就在于服务端对于客户端的访问是主动还是被动</strong></p>
<ul>
<li>如果服务器去找客户端，那就是主动模式</li>
<li>如果客户端来找服务器，那就是被动模式<br>在主动模式里，服务器会把自己的20端口作为源端口，主动向客户端发起TCP数据连接；<br>但在被动模式里，服务器随机开放端口，同控制连接告诉客户端，再由客户端来向服务器的这个端口发起TCP数据连接。</li>
</ul>
<h1 id="这两种模式的使用场景"><a href="#这两种模式的使用场景" class="headerlink" title="这两种模式的使用场景"></a>这两种模式的使用场景</h1><p>主要根据从两个方面来考虑，设备和网络。（这一部分带有总结性质，可能会不准确）<br>去百度一搜 两种模式的使用场景，清一色的都是说要设置被动模式，但没有介绍为什么，不知所以然的跟着去做往往就是翻车。</p>
<!--
在同一局域网下：
服务器：windows电脑，客户端：windows电脑，Server and client都应该设置为被动模式，PORT。因为在主动模式中会访问windows客户端的防火墙
[//] 服务器：windows电脑，客户端：android端
-->

<h1 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h1><p><strong>客户端和服务器端设置的时候一定要保持一致</strong><br>不要一个设置成主动，一个设置成被动，这样必出问题。但很多时候你还不知道哪出了问题<br><strong>简单的一句话，蕴含多少辛酸</strong></p>
<h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>Wing FTP Server，一款专业的跨平台FTP服务器软件。有交互界面，方便管理和理解。一个月试用之后会变为免费版，很多功能用不了了，但是对于正常的使用没有影响。推荐！</p>

<p>其实很多专业的功能都还没有解锁使用过，但就现在的感觉来说这款很好用易懂。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>FTP Rush,一款很小(3~4M)很好用的免费客户端软件，适用于Windows/Linux/Mac/Android/iOS等操作系统。<br>主要特性：</p>
<ul>
<li>纯净的免费软件, 而且易于使用, 解压zip安装包就能运行</li>
<li>支持多种文件传输协议 - FTP, FTPS, SFTP, WebDAV, WingFTP Web Client (最新版的Rush 3，加入了对于云存储管理器的支持 (Google Drive, DropBox, OneDrive, Amazon S3))</li>
<li>通过自定义的C#脚本您还可以轻松地制作自动化任务</li>
<li>类似资源管理器的简单易用的界面并支持文件拖放</li>
</ul>
<h1 id="FTP代码实例"><a href="#FTP代码实例" class="headerlink" title="FTP代码实例"></a>FTP代码实例</h1><h2 id="连接FTP服务器"><a href="#连接FTP服务器" class="headerlink" title="连接FTP服务器"></a>连接FTP服务器</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;* @paramhost     ftp服务器域名
 * @paramusername 访问用户名
 * @parampassword 访问密码
 * @paramport     端口
 * @return 是否连接成功
 *&#x2F;
 public boolean ftpConnect(String host, String username, String password, int port)&#123;
     try&#123;
         ftpClient &#x3D; new FTPClient();
         Log.i(TAG, &quot;connecting to the ftp server &quot; + host + &quot;:&quot; + port);
         ftpClient.setConnectTimeout(5000);
         ftpClient.connect(host, port);
         &#x2F;&#x2F;根据返回的状态码，判断链接是否建立成功
         if (FTPReply.isPositiveCompletion(ftpClient.getReplyCode()))&#123;
             Log.i(TAG, &quot;成功连接至ftp服务器&quot;);
             boolean status &#x3D; ftpClient.login(username, password);
             &#x2F;*
             * 设置文件传输模式
             * 使用BINARY_FILE_TYPE来传输文本、图像和压缩文件
             *&#x2F;
             ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
             &#x2F;&#x2F;我的应用场景决定了我使用被动模式：PASV
             ftpClient.enterLocalPassiveMode();
             return status;
         &#125; else &#123;
             Log.i(TAG, &quot;ftpConnect: 建立连接不成功&quot;);
             ftpClient.disconnect();
         &#125;
     &#125; catch (Exception e)&#123;
         Log.e(TAG, &quot;could not connect to host: &quot;+ e.toString());
         e.printStackTrace();
     &#125;
 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="断开FTP服务器连接"><a href="#断开FTP服务器连接" class="headerlink" title="断开FTP服务器连接"></a>断开FTP服务器连接</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;* 断开ftp服务器连接
 * 返回：断开结果
 *&#x2F;
public boolean ftpDisconnect()&#123;
    &#x2F;&#x2F; 排除空指针
    if (ftpClient &#x3D;&#x3D; null)&#123;
        return true;
    &#125;
    &#x2F;&#x2F; 断开ftp服务器连接
    try&#123;
        if (ftpClient.isConnected()) &#123;
            ftpClient.logout();
        &#125; else &#123;
            Log.i(TAG, &quot;ftpDisconnect：与FTP服务器本来就没有连接&quot;);
        &#125;
    &#125; catch (Exception e)&#123;
        Log.i(TAG, &quot;ftpClient.logout()时发生错误&quot;+e.toString());
    &#125; finally &#123;
        try &#123;
            &#x2F;&#x2F;注意，要将disconnect()放在finally模块里，因为logout也会抛出异常
            ftpClient.disconnect();
            Log.i(TAG, &quot;ftpDisconnect：断开与FTP服务器的连接成功&quot;);
            return true;
        &#125; catch (IOException e)&#123;
            Log.i(TAG, &quot;ftpClient.disconnect()时发生错误&quot;+e.toString());
        &#125;
    &#125;
    return false;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="上传文件到FTP服务器"><a href="#上传文件到FTP服务器" class="headerlink" title="上传文件到FTP服务器"></a>上传文件到FTP服务器</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;*上传文件到ftp
 * ftpFileName 上传到ftp文件路径名称
 * localFile   本地文件路径名称
 *&#x2F;
public void upload(String ftpFileName, File localFile) throws IOException&#123;
    if (!localFile.exists())&#123;
        throw new IOException(&quot;Can&#39;t upload &#39;&quot; + localFile.getAbsolutePath() + &quot;&#39;. This file doesn&#39;t exist.&quot;);
    &#125;
    InputStream in &#x3D; null;
    try &#123;
        FileInputStream inputStream &#x3D; new FileInputStream(localFile);
        in &#x3D; new BufferedInputStream(inputStream);
        
        ftpClient.storeFile(ftpFileName,in);
    &#125; finally &#123;
        in.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是三个最基本的FTP使用方法…</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://baike.baidu.com/item/FTP/13839?fr=aladdin">FTP百度词条</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37963548">知乎-FTP的两种传输模式</a></li>
<li><a href="https://www.wftpserver.com/zh/">FTP Wing Server官网</a></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端渲染</title>
    <url>/archives/ae9190fc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>什么是前端渲染和后端渲染？</p>
<p>早期的网站，几乎所有都使用 ASP、Java、PHP 这类做后端渲染，但后来随着 jQuery、Angular、React、Vue 等 JS 框架的崛起，开始转向了前端渲染。</p>
<span id="more"></span>

<h1 id="服务器端渲染"><a href="#服务器端渲染" class="headerlink" title="服务器端渲染"></a>服务器端渲染</h1><p>整个HTML页面是由服务器来渲染的，服务器直接生产渲染好对应的HTML页面，返回给客户端进行展示。</p>
<p><strong>后端渲染的优势：</strong></p>
<ul>
<li>服务端渲染不需要先下载一堆 js 和 css 后才能看到页面（首屏性能）</li>
<li>数据是可以在源代码中看到的，<strong>利于SEO</strong></li>
</ul>
<p> <strong>后端渲染的缺点：</strong></p>
<ul>
<li>整个页面的模块由后端人员来编写和维护</li>
<li>HTML代码和数据以及对应的逻辑会混在一起，编写和维护都是非常糟糕的</li>
</ul>
<p><strong>后端渲染的适用场景：</strong></p>
<ul>
<li><strong>适用于开放性网站，博客、官网等面向大众用户</strong></li>
<li><strong>首屏页面展示</strong></li>
</ul>
<h1 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h1><p>前端渲染的方式起源于JavaScript的兴起，ajax的大热更是让前端渲染更加成熟，前端渲染真正意义上的实现了前后端分离，前端只专注于UI的开发，后端只专注于逻辑的开发，前后端交互只通过约定好的API来交互，后端提供json数据，前端通过ajax获取数据，并通过js把数据渲染到页面上去。</p>
<p> <strong>前端渲染优势：</strong></p>
<ul>
<li>前后端责任清晰，后端专注于数据上，前端专注于交互和可视化上</li>
<li>局部刷新。无需每次都进行完整页面请求</li>
<li>网络传输数据量小</li>
</ul>
<p> <strong>前端渲染缺点：</strong></p>
<ul>
<li><p>目前的<strong>组件渲染流程是同步阻塞的</strong>，对首屏性能提出了挑战</p>
<ul>
<li>低端设备上 JS 执行效率低，白屏时间长</li>
<li>弱网环境下数据返回慢，loading 时间长</li>
</ul>
</li>
<li><p>前端耗时较多，不利于SEO</p>
</li>
</ul>
<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h1 id="SPA阶段"><a href="#SPA阶段" class="headerlink" title="SPA阶段"></a>SPA阶段</h1><p>在前后端分离的基础上加了一层前端路由，也就是前端来维护一套路由规则。（例如vue里组件对应一个路由）</p>
<p>SPA核心：改变url页面不进行整体刷新</p>
<p> 改变URL不会去服务器请求新的资源，因为改变的是前端路由。当然如果刷新的话还是会向服务器发送请求。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/WuAnqi/p/15492721.html">什么是前端渲染和后端渲染？ - 打遍天下吴敌手 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端VUE知识点汇总</title>
    <url>/archives/70d3274b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>背八股过程中，做一些精简记录，不定期更新。</p>
<p>比较全的前端框架知识 见以前的博文。</p>
<span id="more"></span>

<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>一个构建数据驱动的渐进式框架，关于 <em>Vue</em> 的优点，主要有<strong>响应式编程、组件化开发、虚拟 DOM</strong></p>
<p>响应式编程：通过 <em>MVVM</em> 思想实现数据的双向绑定</p>
<p>组件化开发：将应用各模块拆分到各组件中，提高开发效率、方便重复使用…</p>
<p>虚拟 DOM：传统开发中，jQuery或原生DOM操作会导致浏览器不断渲染DOM树，性能开销大；虚拟 <em>DOM</em> 将各种操作放在虚拟节点中，计算完毕后才统一提交。</p>
<h2 id="双向绑定原理"><a href="#双向绑定原理" class="headerlink" title="双向绑定原理"></a>双向绑定原理</h2><h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><p><img data-src="https://s2.loli.net/2023/02/10/82aUMNwB6TYWEp3.png"></p>
<p>采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为：</p>
<ol>
<li>需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</li>
<li>compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li>
<li>Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁</li>
<li>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</li>
</ol>
<h3 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h3><p><em>Vue 3.0</em> 中采用了 <em>Proxy</em>，抛弃了 <em>Object.defineProperty</em> 方法</p>
<ol>
<li><em>Object.defineProperty</em> 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应</li>
<li><em>Object.defineProperty</em> 只能劫持对象的属性,需要对每个对象，每个属性进行遍历; <em>Proxy</em> 可以劫持整个对象，并返回一个新的对象</li>
<li><em>Proxy</em> 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li>
<li>多达 <em>13</em> 种拦截方法，作为新标准是趋势</li>
</ol>
<h3 id="Proxy-只会代理对象的第一层，那么-Vue3-又是怎样处理这个问题的呢？"><a href="#Proxy-只会代理对象的第一层，那么-Vue3-又是怎样处理这个问题的呢？" class="headerlink" title="Proxy 只会代理对象的第一层，那么 Vue3 又是怎样处理这个问题的呢？"></a>Proxy 只会代理对象的第一层，那么 Vue3 又是怎样处理这个问题的呢？</h3><p>判断当前 <em>Reflect.get</em> 的返回值是否为 <em>Object</em>，如果是则再通过 <em>reactive</em> 方法做代理， 这样就实现了深度观测。</p>
<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="如何理解虚拟DOM"><a href="#如何理解虚拟DOM" class="headerlink" title="如何理解虚拟DOM"></a>如何理解虚拟DOM</h3><p>从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。</p>
<p>将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。</p>
<p>通过<strong>事务处理机制</strong>，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。</p>
<h3 id="虚拟DOM的解析过程"><a href="#虚拟DOM的解析过程" class="headerlink" title="虚拟DOM的解析过程"></a>虚拟DOM的解析过程</h3><ul>
<li>对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。</li>
<li>当页面的状态发生改变，需要对页面 DOM 结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。</li>
<li>最后将有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。</li>
</ul>
<h3 id="为什么使用虚拟DOM"><a href="#为什么使用虚拟DOM" class="headerlink" title="为什么使用虚拟DOM"></a>为什么使用虚拟DOM</h3><ol>
<li>提升性能</li>
</ol>
<p>如果渲染使用真实DOM，由于真实DOM的各项操作会带来大量性能损耗，极大降低渲染效率。使用虚拟 dom ，主要为解决渲染效率的问题。</p>
<ul>
<li>真实DOM∶ 生成HTML字符串＋重建所有的DOM元素</li>
<li>虚拟DOM∶ 生成vNode+ DOMDiff＋必要的dom更新</li>
</ul>
<p><strong>虚拟DOM保证性能下限，提供过得去的性能</strong></p>
<ol start="2">
<li>跨平台</li>
</ol>
<p>Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。</p>
<h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><p>当组件创建和更新时，vue 均会执行内部的 update 函数，该函数使用 render 函数生成的虚拟 dom 树，将新旧两树进行对比，找到差异点，最终更新到真实 dom</p>
<p>对比差异的过程叫 diff，vue 在内部通过一个叫 patch 的函数完成该过程</p>
<p>在对比时，vue 采用<strong>深度优先、同层比较</strong>的方式进行比对。</p>
<p>在判断两个节点是否相同时，vue 是通过<strong>虚拟节点的 key 和 tag</strong>来进行判断</p>
<h2 id="既然-Vue-通过数据劫持可以精准探测数据变化，为什么还需要虚拟-DOM-进行-diff-监测差异-？"><a href="#既然-Vue-通过数据劫持可以精准探测数据变化，为什么还需要虚拟-DOM-进行-diff-监测差异-？" class="headerlink" title="既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行 diff 监测差异 ？"></a>既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行 diff 监测差异 ？</h2><p>现代前端框架有两种方式侦测变化，一种是 <em>pull</em>，一种是 <em>push</em>。</p>
<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>其代表为 <em>React</em>，我们可以回忆一下 <em>React</em> 是如何侦测到变化的。</p>
<p>我们通常会用 <em>setState API</em> 显式更新,然后 <em>React</em> 会进行一层层的 <em>Virtual Dom Diff</em> 操作找出差异，然后 <em>Patch</em> 到 <em>DOM</em> 上，<em>React</em> 从一开始就不知道到底是哪发生了变化,只是知道「有变化了」,然后再进行比较暴力的 <em>Diff</em> 操作查找「哪发生变化了」</p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a><strong>push</strong></h3><p><em>Vue</em> 的响应式系统则是 <em>push</em> 的代表，当 <em>Vue</em> 程序初始化的时候就会对数据 <em>data</em> 进行依赖的收集，一但数据发生变化，响应式系统就会立刻得知，因此 <em>Vue</em> 是一开始就知道是「在哪发生变化了」</p>
<p>这又会产生一个问题，通常绑定一个数据就需要一个 <em>Watcher</em>，一但我们的绑定细粒度过高就会产生大量的 <em>Watcher</em>，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化，因此 <em>Vue</em> 的设计是选择中等细粒度的方案，<strong>在组件级别进行 <em>push</em> 侦测</strong>的方式</p>
<p><strong>通常我们会第一时间侦测到发生变化的组件,然后在组件内部进行 <em>Virtual Dom Diff</em> 获取更加具体的差异，而 <em>Virtual Dom Diff</em> 则是 <em>pull</em> 操作，<em>Vue</em> 是 <em>push + pull</em> 结合的方式进行变化侦测的。</strong></p>
<h2 id="Vue-为什么没有类似于-React-中-shouldComponentUpdate-的生命周期？"><a href="#Vue-为什么没有类似于-React-中-shouldComponentUpdate-的生命周期？" class="headerlink" title="Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期？"></a>Vue 为什么没有类似于 React 中 shouldComponentUpdate 的生命周期？</h2><p>根本原因是 <em>Vue</em> 与 <em>React</em> 的变化侦测方式有所不同</p>
<p><em>React</em> 是 <em>pull</em> 的方式侦测变化，当 <em>React</em> 知道发生变化后，会使用 <em>Virtual Dom Diff</em> 进行差异检测,但是很多组件实际上是肯定不会发生变化的，这个时候<strong>需要用 <em>shouldComponentUpdate</em> 进行手动操作来减少 <em>diff</em></strong>，从而提高程序整体的性能。</p>
<p><em>Vue</em> 是 <em>pull+push</em> 的方式侦测变化的，在一开始就知道那个组件发生了变化，因此在 <em>push</em> 的阶段并不需要手动控制 <em>diff</em>，而组件内部采用的 <em>diff</em> 方式实际上是可以引入类似于 <em>shouldComponentUpdate</em> 相关生命周期的，但是**通常合理大小的组件不会有过量的 <em>diff</em>，手动优化的价值有限**，因此目前 <em>Vue</em> 并没有考虑引入 <em>shouldComponentUpdate</em> 这种手动优化的生命周期。</p>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>给 <code>script</code> 标签附上 <code>setup</code> 属性后，内部将不再通过 <code>export default</code> 抛出方式的语法。<code>template</code> 模板可以直接拿到 <code>script</code> 标签内声明的变量，并且支持响应式</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>对于 <em>vue</em> 来讲，生命周期就是一个 <em>vue</em> 实例从创建到销毁的过程。</p>
<p>通俗的说，<em>hook</em> 就是在程序运行中，在某个特定的位置，框架的开发者设计好了一个钩子来告诉我们当前程序已经运行到特定的位置了，会触发一个回调函数，并提供给我们，让我们可以在生命周期的特定阶段进行相关业务代码的编写</p>
<p>先看看生命周期的对照表：</p>
<table>
<thead>
<tr>
<th>Vue 2.0</th>
<th>Vue3</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>setup()</td>
<td></td>
</tr>
<tr>
<td>created</td>
<td>setup()</td>
<td>创建<code>data</code> 和 <code>method</code></td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount</td>
<td>组件挂载前执行的函数</td>
</tr>
<tr>
<td>mounted</td>
<td>onMounted</td>
<td>组件挂载后的函数</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeUpdate</td>
<td>更新前</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated</td>
<td>更新后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>onBeforeUnmount</td>
<td>卸载前</td>
</tr>
<tr>
<td>destroyed</td>
<td>onUnmounted</td>
<td>卸载后</td>
</tr>
<tr>
<td>activated</td>
<td>onActivated</td>
<td>被 <code>keep-alive</code> 缓存的组件激活时调用</td>
</tr>
<tr>
<td>deactivated</td>
<td>onDeactivated</td>
<td>被 keep-alive 缓存的组件停用时调用</td>
</tr>
<tr>
<td>errorCaptured</td>
<td>onErrorCaptured</td>
<td>捕获来自子孙组件的异常时激活钩子函数</td>
</tr>
</tbody></table>
<p><code>setup</code> 调用的时机是创建组件实例，然后初始化 <code>props</code>，紧接着就是调用 <code>setup</code> 函数。在 <code>beforeCreate</code> 钩子之前被调用，所以 <code>setup</code> 内是拿不到 <code>this</code> 上下文的。</p>
<p>vue3中，除去 <code>beforeCreate</code> 和 <code>created</code> 之外，有 9 个旧的生命周期钩子，我们可以在 <code>setup</code> 方法中访问</p>
<h3 id="父子组件中生命周期的调用顺序"><a href="#父子组件中生命周期的调用顺序" class="headerlink" title="父子组件中生命周期的调用顺序"></a><strong>父子组件中生命周期的调用顺序</strong></h3><ul>
<li>加载渲染过程：父<em>beforeCreate</em>-&gt;父<em>created</em>-&gt;父<em>beforeMount</em>-&gt;子<em>beforeCreate</em>-&gt;子<em>created</em>-&gt;子<em>beforeMount</em>- &gt;子<em>mounted</em>-&gt;父<em>mounted</em></li>
<li>子组件更新过程：父<em>beforeUpdate</em>-&gt;子<em>beforeUpdate</em>-&gt;子<em>updated</em>-&gt;父<em>updated</em></li>
<li>父组件更新过程：父 <em>beforeUpdate</em> -&gt; 父 <em>updated</em></li>
<li>销毁过程：父<em>beforeDestroy</em>-&gt;子<em>beforeDestroy</em>-&gt;子<em>destroyed</em>-&gt;父 destroyed</li>
</ul>
<h2 id="添加响应式"><a href="#添加响应式" class="headerlink" title="添加响应式"></a>添加响应式</h2><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><p>reactive 接收一个 JS 对象 作为参数，返回一个该对象的proxy代理，允许多层嵌套</p>
<ul>
<li><p>JS 对象为 对象、数组和 <code>Map</code>、<code>Set</code> 这样的集合类型，而对 <code>string</code>、<code>number</code> 和 <code>boolean</code> 这样的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始类型</a> 无效</p>
</li>
<li><p>不可以随意地“替换”一个响应式对象，不可以将响应式对象的属性赋值或解构</p>
</li>
</ul>
<h2 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h2><p>需要使用 scoped 属性 保证组件间不会样式污染，但是有时候需要做样式穿透，有这么几种方式：</p>
<ol>
<li>深度选择器  ::deep()</li>
<li>在 <em>vue</em> 组件中定义一个全局的 <em>style</em> 标签，一个含有作用域的 <em>style</em> 标签</li>
</ol>
<h2 id="ref-的作用"><a href="#ref-的作用" class="headerlink" title="ref 的作用"></a>ref 的作用</h2><p><em>ref</em> 的作用是被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <em>$refs</em> 对象上。其特点是：</p>
<ul>
<li>如果在普通的 <em>DOM</em> 元素上使用，引用指向的就是 <em>DOM</em> 元素</li>
<li>如果用在子组件上，引用就指向组件实例</li>
</ul>
<p>常见的使用场景有：</p>
<ol>
<li>基本用法，本页面获取 <em>DOM</em> 元素</li>
<li>获取子组件中的 <em>data</em></li>
<li>调用子组件中的方法</li>
</ol>
<h2 id="说一下常用的Vue修饰符"><a href="#说一下常用的Vue修饰符" class="headerlink" title="说一下常用的Vue修饰符"></a>说一下常用的Vue修饰符</h2><ul>
<li>事件修饰符<ul>
<li><em>.stop</em>：阻止冒泡。</li>
<li><em>.prevent</em>：阻止默认事件。</li>
<li><em>.capture</em>：使用事件捕获模式。</li>
<li><em>.self</em>：只在当前元素本身触发。</li>
<li><em>.once</em>：只触发一次。</li>
</ul>
</li>
<li>按键修饰符<ul>
<li>.<em>enter</em>：回车</li>
<li>.<em>tab</em>：制表键</li>
<li>.<em>delete</em>：捕获 “删除” 和 “退格” 键</li>
<li>.<em>esc</em>：返回</li>
<li>.<em>space</em>：空格</li>
</ul>
</li>
<li>表单修饰符<ul>
<li>.<em>lazy</em>：在文本框失去焦点时才会渲染</li>
<li>.<em>number</em>：将文本框中所输入的内容转换为 number 类型</li>
<li>.<em>trim</em>：可以自动过滤输入首尾的空格</li>
</ul>
</li>
</ul>
<h2 id="移动端如何实现一个常见的header组件"><a href="#移动端如何实现一个常见的header组件" class="headerlink" title="移动端如何实现一个常见的header组件"></a>移动端如何实现一个常见的header组件</h2><p>header组件一般分为 左右中 三部分。中间为主标题，可以通过vue props方式做成可配置向外暴露，左右两侧可以通过 <em>vue slot</em> 插槽的方式对外暴露以实现多样化，同时也可以提供 <em>default slot</em> 默认插槽来统一页面风格。</p>
<h2 id="v-on可以实现监听多个方法吗"><a href="#v-on可以实现监听多个方法吗" class="headerlink" title="v-on可以实现监听多个方法吗"></a>v-on可以实现监听多个方法吗</h2><p>可以，几种写法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">写法一：
<span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">=</span><span class="token string">"&#123; 事件类型: 事件处理函数, 事件类型: 事件处理函数 &#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
写法二：
<span class="token operator">&lt;</span>div @事件类型<span class="token operator">=</span><span class="token string">"“事件处理函数”"</span> @事件类型<span class="token operator">=</span><span class="token string">"“事件处理函数”"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
写法三：在一个事件里面书写多个事件处理函数
<span class="token operator">&lt;</span>div @事件类型<span class="token operator">=</span><span class="token string">"“事件处理函数1，事件处理函数2”"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
写法四：在事件处理函数内部调用其他的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="vue数据为什么频繁变化但只更新一次"><a href="#vue数据为什么频繁变化但只更新一次" class="headerlink" title="vue数据为什么频繁变化但只更新一次"></a>vue数据为什么频繁变化但只更新一次</h2><p><em>DOM</em> 更新是一个异步操作，在数据更新后会首先被 <em>set</em> 钩子监听到，但是不会马上执行 <em>DOM</em> 更新，而是在下一轮循环中执行更新。</p>
<p><em>具体实现是vue</em> 中实现了一个 <em>queue</em> 队列用于存放本次事件循环中的所有 <em>watcher</em> 更新，并且同一个 <em>watcher</em> 的更新只会被推入队列一次。在本轮事件循环的微任务执行结束后执行此更新，这就是 <em>DOM</em> 只会更新一次的原因。</p>
<p>在下一个的事件循环“<em>tick</em>”中，<em>vue</em> 刷新队列并执行实际 (已去重的) 工作。<em>vue</em> 在内部对异步队列尝试使用原生的 <em>Promise.then、MutationObserver</em>  和 <em>setImmediate</em>，如果执行环境不支持，则会采用 <em>setTimeout(fn, 0)</em> 代替。</p>
<h2 id="插槽和作用域插槽的区别"><a href="#插槽和作用域插槽的区别" class="headerlink" title="插槽和作用域插槽的区别"></a>插槽和作用域插槽的区别</h2><p>插槽的作用是子组件提供了可替换模板，父组件可以更换模板的内容。</p>
<p>作用域插槽给了子组件将数据返给父组件的能力，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。<strong>本质是子组件可以通过插槽的位置绑定一些数据，让父组件插槽位置可以用这个数据。</strong></p>
<h2 id="vue中相同逻辑如何进行抽离？"><a href="#vue中相同逻辑如何进行抽离？" class="headerlink" title="vue中相同逻辑如何进行抽离？"></a>vue中相同逻辑如何进行抽离？</h2><p>vue2 中采用混入（<em>mixin</em>）技术。</p>
<p>vue3 中采用组合式函数，组合式函数(Composables) 是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数。</p>
<h2 id="vue为什么采用异步渲染"><a href="#vue为什么采用异步渲染" class="headerlink" title="vue为什么采用异步渲染"></a>vue为什么采用异步渲染</h2><p>如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染；为了性能考虑，<em>Vue</em> 会在本轮数据更新后，再去异步更新视图</p>
<p>异步渲染的原理</p>
<ol>
<li>调用 <em>notify( )</em> 方法，通知 <em>watcher</em> 进行更新操作</li>
<li>依次调用 watcher 的 update 方法</li>
<li>对 watcher 进行去重操作（通过 id）放到队列里</li>
<li>执行完后异步清空这个队列，nextTick（flushSchedulerQueue）进行批量更新操作</li>
</ol>
<h2 id="nextTick原理及作用"><a href="#nextTick原理及作用" class="headerlink" title="$nextTick原理及作用"></a>$nextTick原理及作用</h2><p>nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。</p>
<p>nextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。</p>
<p>有时候，可能遇到这样的情况，DOM1的数据发生了变化，而DOM2需要从DOM1中获取数据，那这时就会发现DOM2的视图并没有更新，这时就需要用到了<code>nextTick</code>了。</p>
<p>由于Vue的DOM操作是异步的，所以，在上面的情况中，就要将DOM2获取数据的操作写在<code>$nextTick</code>中。</p>
<p>两种情况用到：</p>
<ol>
<li>在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在<code>nextTick()</code>的回调函数中；</li>
<li>在created()钩子进行DOM操作，也一定要放在<code>nextTick()</code>的回调函数中。因为在created()钩子函数中，页面的DOM还未渲染，没办法操作DOM，所以必须将代码放在<code>nextTick()</code>的回调函数中</li>
</ol>
<h2 id="v-if、v-show"><a href="#v-if、v-show" class="headerlink" title="v-if、v-show"></a>v-if、v-show</h2><ul>
<li>v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；</li>
<li>v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；</li>
</ul>
<p>两者区别：</p>
<ul>
<li><strong>手段</strong>：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；</li>
<li><strong>编译过程</strong>：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；</li>
<li><strong>编译条件</strong>：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译; v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且DOM元素保留；</li>
<li><strong>性能消耗</strong>：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</li>
<li><strong>使用场景</strong>：v-if适合运营条件不大可能改变；v-show适合频繁切换。</li>
</ul>
<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model 实际上是一个语法糖</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"searchText"</span><span class="token operator">></span> 
全等于
<span class="token operator">&lt;</span>input
  v<span class="token operator">-</span>bind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"searchText"</span>
  v<span class="token operator">-</span>on<span class="token operator">:</span>input<span class="token operator">=</span><span class="token string">"searchText = $event.target.value"</span>
<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>适用于<strong>表单元素、组件</strong></p>
<p>如何理解v-model用在组件上，自定义组件和父组件的交互如下：</p>
<ol>
<li>父组件将<code>searchText</code>变量传入custom-input 组件，使用的 prop 名为<code>value</code>；</li>
<li>custom-input 组件向父组件传出名为<code>input</code>的事件，父组件将接收到的值赋值给<code>searchText</code>；</li>
</ol>
<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>在组件切换的时候，保存一些组件的状态防止多次渲染，可以使用 keep-alive 组件包裹需要保存的组件。</p>
<h1 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h1><h2 id="hash模式和history模式"><a href="#hash模式和history模式" class="headerlink" title="hash模式和history模式"></a>hash模式和history模式</h2><p><code>#</code> 后面 <em>hash</em> 值的变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面；</p>
<p>通过监听 <em>hashchange</em> 事件可以知道 <em>hash</em> 发生了哪些变化，然后根据 <em>hash</em> 变化来实现更新页面部分内容的操作。</p>
<p><em>history</em> 模式的实现，主要是 <em>HTML5</em> 标准发布的两个 <em>API</em>，<em>pushState</em> 和 <em>replaceState</em>，这两个 <em>API</em> 可以 <strong>改变url但又不刷新页面</strong>的效果。这样就可以监听 <em>url</em> 变化来实现更新页面部分内容的操作。</p>
<p>两者区别：</p>
<ul>
<li>首先是在 <em>URL</em> 的展示上，<em>hash</em> 模式有“#”，<em>history</em> 模式没有</li>
<li>刷新页面时，<em>hash</em> 模式可以正常加载到 <em>hash</em> 值对应的页面，而 <em>history</em> 没有处理的话，会返回 <em>404</em>，一般需要后端将所有页面都配置重定向到首页路由</li>
<li>在兼容性上，<em>hash</em> 可以支持低版本浏览器和 <em>IE</em></li>
</ul>
<h2 id="router和route区别"><a href="#router和route区别" class="headerlink" title="router和route区别"></a>router和route区别</h2><ul>
<li>$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name ，component等路由信息参数</li>
<li>$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。</li>
</ul>
<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>延迟加载，即在需要的时候进行加载，随用随载</p>
<p>如果能把不同路由对应的组件分割成不同的代码块，当路由被访问的时候才加载对应组件，这样就更加高效了。</p>
<p>非懒加载：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">"@/components/list.vue"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> List <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>懒加载：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">List</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/list.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> List <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="对前端路由的理解"><a href="#对前端路由的理解" class="headerlink" title="对前端路由的理解"></a>对前端路由的理解</h2><p>在前端技术早期，一个 url 对应一个页面，如果要从 A 页面切换到 B 页面，那么必然伴随着页面的刷新。这个体验并不好，不过在最初也是无奈之举——用户只有在刷新页面的情况下，才可以重新去请求数据。</p>
<p>Ajax 出现了，它允许人们在不刷新页面的情况下发起请求。与之共生的，还有不刷新页面即可更新页面内容这种需求。在这样的背景下，出现了 <strong>SPA（单页面应用</strong>）。</p>
<p>在 SPA 诞生之初，在内容切换前后，页面的 URL 都是一样的，这就有两个问题：</p>
<ul>
<li>SPA 其实并不知道当前的页面“进展到了哪一步，一次刷新，一切就会被清零，必须重复之前的操作、才可以重新对内容进行定位</li>
<li>有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，收集信息不全</li>
</ul>
<p>为了解决这个问题，前端路由出现了</p>
<p>前端路由可以帮助我们在仅有一个页面的情况下，“记住”用户当前走到了哪一步——为 SPA 中的各个视图匹配一个唯一标识。刷新页面，因为当前的 URL 可以标识出他所处的位置，因此内容也不会丢失。</p>
<p>如何实现呢：</p>
<ol>
<li>拦截用户的刷新操作，因为一旦刷新就重新请求资源，就重来了，要把刷新这个动作完全放到前端逻辑里消化掉。</li>
<li>感知 URL 的变化。这里不是说要改造 URL、凭空制造出 N 个 URL 来。我们可以给它做一些微小的处理，根据后续感知到的变化，用 JS 去给它生成不同的内容。</li>
</ol>
<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p>
<p>待续…</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/archives/3d3ed3e0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前端基础这篇文章主要是对 html+css+JavaScript 三件套的一个深度知识总结，篇幅会较长，力求做到知识点不遗漏，方便以后有遗忘的知识点的时候，可以通过快速的回顾笔记而熟悉起来。</p>
<span id="more"></span>

<p>前端关注点：美观、功能、无障碍、性能、兼容、安全、用户体验</p>
<p>我会不断更新这个笔记，让它质量越来越高</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="浏览器历史"><a href="#浏览器历史" class="headerlink" title="浏览器历史"></a>浏览器历史</h2><ol>
<li><p>1990 蒂姆 伯纳斯 李 发明超文本</p>
</li>
<li><p>1993 伊利诺大学 MOSIAC 浏览器 可以显示图片</p>
</li>
<li><p>1994 网景公司 Netscape navigator </p>
</li>
<li><p>1996 微软收购 spy glass -&gt; IE1.0； 网景公司开发 livescript； Java火起来，livescript不温不火，livescript改名为JavaScript</p>
</li>
<li><p>2001 IE6 XP诞生，出现 js 引擎</p>
</li>
<li><p>2003 mozilla公司 firefox -&gt; netscape</p>
</li>
<li><p>2008 google基于webkit blink gears 开发Chrome，</p>
<p><strong>Chrome —&gt; V8引擎，速度非常快</strong>，一是可以直接翻译机器码，二是独立于浏览器运行；v8的诞生，直接催化了 nodejs的诞生</p>
</li>
<li><p>2009 甲骨文Oracle收购SUN，JS所有权给甲骨文</p>
</li>
</ol>
<h2 id="主流浏览器"><a href="#主流浏览器" class="headerlink" title="主流浏览器"></a>主流浏览器</h2><table>
<thead>
<tr>
<th>5大主流浏览器</th>
<th>内核</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>trident</td>
</tr>
<tr>
<td>chrome</td>
<td>webkit  -&gt;  blink</td>
</tr>
<tr>
<td>safari</td>
<td>webkit</td>
</tr>
<tr>
<td>firefox</td>
<td>gocko</td>
</tr>
<tr>
<td>opera</td>
<td>presto  -&gt; blink</td>
</tr>
</tbody></table>
<p>浏览器由渲染引擎和 JS引擎组成。</p>
<h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p>浏览器所采用的「渲染引擎」也称之为「浏览器内核」，用来解析 HTML与CSS，决定了浏览器如何显示网页的内容以及页面的格式信息。</p>
<p><strong>渲染引擎是浏览器兼容性问题出现的根本原因。</strong></p>
<h3 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h3><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。</p>
<p>JS 引擎执行代码时会逐行解释每一句源码（转换为机器语言），然后由计算机去执行。所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p>
<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><p>html，hypertext markup language，超文本标记语言， 不是一种编程语言，是一种描述性的<strong>标记语言</strong>。</p>
<p>编程语言是有编译过程的，而标记语言没有编译过程，HTML标签是<strong>直接由浏览器解析执行</strong></p>
<p>要理解html标签的语义化特性。比如，面试的时候问你，<code>&lt;h1&gt;</code> 标签有什么作用？</p>
<ul>
<li>正确答案：给文本增加主标题的语义。</li>
<li>错误答案：给文字加粗、加黑、变大。</li>
</ul>
<p>HTML标签是分等级的，HTML将所有的标签分为两种：</p>
<ul>
<li><strong>文本级标签</strong>：p、span、a、b、i、u、em。文本级标签里只能放<strong>文字、图片、表单元素</strong>。（a标签里不能放a和input）</li>
<li><strong>容器级标签</strong>：div、h系列、li、dt、dd。容器级标签里可以放置任何东西。</li>
</ul>
<p>div的语义是division“分割”； span的语义就是span“范围、跨度”。</p>
<ul>
<li><strong>div标签</strong>：可以把标签中的内容分割为独立的区块。必须单独占据一行。</li>
<li><strong>span标签</strong>：和div的作用一致，但不换行。</li>
</ul>
<p><strong>pre标签</strong>：保证标签内空格不被合并，真正排网页过程中，<code>&lt;pre&gt;</code>标签几乎用不着</p>
<p><strong>实体字符</strong>：</p>
<ul>
<li>&amp;nbsp 空格 （non-breaking spacing，不断打空格）</li>
<li>&amp;lt   小于号<code>&lt;</code>     ；   &amp;gt  大于号<code>&gt;</code></li>
</ul>
<p><strong>超链接</strong>：</p>
<ul>
<li><p><code>title</code>：鼠标悬停时呈现出的文本。</p>
</li>
<li><p><code>name</code>：主要用于设置一个锚点的名称。</p>
</li>
<li><p><code>target</code>：告诉浏览器用什么方式来打开目标页面</p>
<ul>
<li><code>_self</code>：在同一个网页中显示（默认值）</li>
<li><code>_blank</code>：<strong>在新的窗口中打开</strong>。</li>
</ul>
</li>
</ul>
<p><strong>锚链接：</strong></p>
<ol>
<li>一个完整的URL由 schme+host+path+query+hash组成，hash就是在页面不变的情况下，对于浏览数据的位置变动</li>
<li>视音频标签：video标签是html自带的视频标签，有src、controls、autoplay、muted等属性，track标签是视频字幕标签；audio是自带的音频标签</li>
<li>页面标签：一个页面可以分header、main、aside和footer四个页面标签，article 和section也是两个对应的内容标签</li>
<li>列表标签：&lt;ul&gt; unorder-list ，&lt;ol&gt;  order-list，&lt;li&gt; list-item</li>
<li>导航标签：&lt;nav&gt;</li>
<li>表格标签：&lt;thead&gt;表头，&lt;tbody&gt;表格内容，&lt;tr&gt; 表行，&lt;th&gt; 表头单元格，&lt;td&gt; 表格数据单元格；rowspan属性，跨越多行，colspan属性，跨越多列</li>
<li>表单标签：form；input的type有text，password，number，date，file等；textarea，多行文本框，rows cols属性指定文本框最大行列数</li>
<li>表单单选框，input的type=radio，name属性决定了哪些互斥；checkbox多选框，checked属性是否默认选中</li>
<li>下拉选择框，select，下来选择项，option</li>
<li>link 加载预先资源</li>
<li>microdata</li>
</ol>
<p>根据内容选择合适的标签！</p>
<p>html中的换行是会带来文本分隔符的，这也是占据位置的</p>
<h1 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h1><p>css，cascading style sheets，用来定义页面元素的样式，页面中使用css主要分为外联&lt;link&gt;、嵌入&lt;style&gt;和内联&lt;p style=’’&gt;  &lt;/p&gt;三种</p>
<p><img data-src="https://s2.loli.net/2022/09/22/SlJ5RHNObByKGtz.png" alt="css工作方式"></p>
<h2 id="选择器基础"><a href="#选择器基础" class="headerlink" title="选择器基础"></a>选择器基础</h2><p>:root 根选择器；*是通配选择器； <code>#id</code>，id选择器，一个id只能出现一次；<code>.class</code>，class类名选择器；属性选择器【】，常用于input；</p>
<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">[input&#x3D;&#39;text&#39;]&#123;
    width&#x3D;200px
&#125; 

&lt;input type&#x3D;&#39;text&#39; &#x2F;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>内联样式 &gt; 内部样式 &gt; 外部样式，在样式后加 !important 优先级最高</p>
<p>css优先级：!important &gt; id | class &gt; 标签 &gt; *</p>
<p>CSS权重，极少用。内联样式 1000 ； id 100 ； class，属性，伪类  10 ；标签，伪元素  1 ； *  0</p>
<ol>
<li>标签[属性]，属性选择器，带有该属性的都被选择中，eg a[title] {}<ol>
<li>a [ href= ‘<a href="https://www.baidu.com&/#39;]">https://www.baidu.com&#39;]</a> {}</li>
<li> ^= 搜寻以什么开头的值  a [ href ^= ‘https’] {}</li>
<li>$= 搜寻以什么结尾的值  a [ href $= ‘.com’] {}</li>
<li> *= 搜寻包含关键字的值  a [ href *= ‘baidu’] {}</li>
</ol>
</li>
</ol>
<h3 id="选择器进阶"><a href="#选择器进阶" class="headerlink" title="选择器进阶"></a>选择器进阶</h3><ol>
<li><p>伪类选择器，对于普通选择器加以修饰</p>
<p>a:visited{} 浏览过的；a:hover {} 悬浮在上面的；a:disabled，禁用的；a:focus，元素聚焦；</p>
<p>a:first-child{} 选取第一个子元素；a:last-child{} 选取最后一个子元素；a:nth-child(4) {} 选取第四个子元素；a:nth-child(odd) {} 选取奇数项子元素；a:nth-child(even) {} 选取偶数项子元素；</p>
</li>
<li><p>选择器可彼此组合</p>
<ol>
<li><p>后代组合的查找顺序是 从下至上，从右至左</p>
</li>
<li><p>直接组合 AB，满足A且满足B；</p>
</li>
<li><p>后代组合A B，满足A的所有B；</p>
</li>
<li><p>亲子组合，A&gt;B，只选择A子元素的B</p>
<ul>
<li>A B 和 A&gt;B 的区别在于 <strong>子子元素</strong> 是否被选择</li>
</ul>
</li>
<li><p>.container + div 意思为 选取 同container父级 紧相邻 在其之后的 div元素</p>
</li>
<li><p>.container ~ div 意思为 选取 同container父级 <strong>之后所有的</strong>div元素，即使中间有其他元素隔开</p>
</li>
<li><p>var() 函数，用于插入自定义属性的值；自定义属性的名称（必须以两个破折号开头）</p>
<p>定义一个名为 “–main-bg-color” 的自定义属性，然后使用 var() 函数在样式表中插入该自定义属性的值</p>
</li>
</ol>
</li>
</ol>
<h2 id="样式基础"><a href="#样式基础" class="headerlink" title="样式基础"></a>样式基础</h2><p>浏览器hack层叠原理</p>
<ol>
<li>同一个属性，后书写的值会覆盖前面书写的值</li>
<li>对浏览器无效的属性会被忽略</li>
</ol>
<p>css会自动继承父元素计算值，除非另外设置</p>
<p>min-width：用于浏览器宽度过小时，会将内容自动换行，设置min-width可以保证 浏览器宽度过窄时 不换行，有横向滚动条出现</p>
<p>overflow：常用于模型溢出，hidden、scroll、auto</p>
<p>字体相关：font-weight，normal、bold、lighter； fontsize：字体高度，宽度根据字体自动缩放；font-style 设置斜体；font-family设置字体类</p>
<p>边框：border: 1px solid #000 宽度、样式、颜色，transparent 透明，也是颜色的一种</p>
<p>文本水平居中：text-align：center；文本行高，line-height：<strong>默认22px</strong>；文本垂直居中，可以将文本行高设置为盒子的高度</p>
<p>输入距离，text-indent：2em，设置开始输入位置有两个空格；取消文本下划线，text-decoration: none</p>
<p>光标手势，cursor：pointer，not-allowed</p>
<p>display：inline（无边距无换行）、inline-block（有边距 无换行）、block（有边距，有换行）很重要</p>
<p>隐藏元素： visibility: hidden 保存位置；display：none不保留位置</p>
<p><strong>行内块元素和行内元素文本对齐</strong>，vertical-align垂直方向对齐，top,middle,~px</p>
<p><strong>background-color</strong>；<strong>background-image</strong>；<strong>background-repeat</strong> repeat默认，no-repeat；<strong>background-attachment</strong> 背景图片是否可滑动，默认scroll，fixed；<strong>background-position</strong>；<strong>background-size</strong> cover占满，多的裁掉，contain 自身宽高比不变，保证图片全显示，多的部分该留白留白；</p>
<p>background综合写法，color img repeat attachment position/ size</p>
<p><strong>伪类和伪元素</strong>，一个冒号伪类，两个冒号即伪元素，没有太大的区别。::before 和 ::after必须加content属性，否则不生效;</p>
<p>z-index，数值越大，越靠近用户</p>
<h3 id="如何画三角形"><a href="#如何画三角形" class="headerlink" title="如何画三角形"></a><strong>如何画三角形</strong></h3><p>边框内部宽高设为0，边框三边取透明，只留一边即为三角形</p>
<p><img data-src="https://s2.loli.net/2022/11/30/rbdRZQ36nX4tOfl.png" alt="image-20221123212615725"></p>
<h3 id="单行文本截断和显示省略号"><a href="#单行文本截断和显示省略号" class="headerlink" title="单行文本截断和显示省略号"></a>单行文本截断和显示省略号</h3><p>white-space：nowrap 不换行；overflow：hidden；text-overflow：ellipsis 隐藏部分加省略号</p>
<h3 id="兼容性写法"><a href="#兼容性写法" class="headerlink" title="兼容性写法"></a>兼容性写法</h3><table>
<thead>
<tr>
<th><img data-src="https://www.runoob.com/images/precompatible_ie.gif" alt="img"></th>
<th>前缀-ms-的IE浏览器</th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="https://www.runoob.com/images/precompatible_firefox5920.gif" alt="img"></td>
<td>前缀-moz-的火狐浏览器</td>
</tr>
<tr>
<td><img data-src="https://www.runoob.com/images/precompatible_chrome.gif" alt="img"></td>
<td>前缀-webkit-的Google Chrome浏览器</td>
</tr>
<tr>
<td><img data-src="https://www.runoob.com/images/precompatible_safari.gif" alt="img"></td>
<td>前缀-webkit-的Safari浏览器</td>
</tr>
<tr>
<td><img data-src="https://www.runoob.com/images/precompatible_opera.gif" alt="img"></td>
<td>前缀-o-的Opera浏览器</td>
</tr>
<tr>
<td><img data-src="https://www.runoob.com/images/precompatible_xv_opera5920.gif" alt="img"></td>
<td>前缀-xv-的Opera浏览器</td>
</tr>
</tbody></table>
<p>总结就是  -ms 、-moz 、-webkit 、-o</p>
<h3 id="css单位"><a href="#css单位" class="headerlink" title="css单位"></a>css单位</h3><img data-src="https://s2.loli.net/2022/09/22/Q3RjeVcwTJCst6N.png" alt="image-20220922215343554" style="zoom: 50%;" />

<ol>
<li><p>px是绝对单位；em是相对单元，基于目前容器的大小进行设定（默认16px，文本字符默认21px），可以理解为倍数</p>
</li>
<li><p>rem和em类似，但是它是基于root的html元素的大小设定去计算</p>
</li>
<li><p>vw &amp; vh，全程是 viewport width和viewport height，即用户看到的窗口，值在0 ~100之间</p>
</li>
<li><p>vmin &amp; vmax，vmin代表屏幕较短的一边，vmax代表屏幕较长的一边，概念与vw vh类似，常用于手机旋转屏设备</p>
</li>
</ol>
<h2 id="盒模型基础"><a href="#盒模型基础" class="headerlink" title="盒模型基础"></a>盒模型基础</h2><p>盒子有块级盒子和行级盒子之分</p>
<p>display属性分为block、inline和inline-block，其中inline-block被放在行盒，但可以设置宽度，且不被拆分</p>
<ul>
<li>块级盒子block 不和其他盒子并列摆放</li>
<li>行级盒子 inline 和其他行盒放在一行或拆开成多行，盒模型中的width、height不适用于行盒</li>
</ul>
<ol>
<li>块级元素生成块盒，body、article、div、main、section、h1-6…</li>
<li>行级元素生成行盒，span、em、strong、cite、code….</li>
</ol>
<p>盒子阴影： box-shadow: 水平偏移，垂直偏移，模糊距离，阴影距离，inset向内加阴影。这里是先水平后垂直，和margin的先上下，后左右不一样</p>
<p>盒子圆角，border-radius 可以设置百分比和px；<strong>当盒子内部元素溢出</strong>，记得使用 overflow: hidden</p>
<p>overflow属性设置content溢出部分， visible可见、hidden不可见、scroll滑动可见</p>
<p>box-sizing设置元素的宽高度是否包含内外边距</p>
<ol>
<li><code>content-box</code> 是默认值，不包含内外边距</li>
<li>为border-box时，长宽则会是包含margin和padding的大小，内容区实际宽度为 width 减去 (border + padding) </li>
</ol>
<p>background-clip设置背景生效位置；border-box全盒生效；padding-box，内边距和内容生效；content-box，仅在内容生效</p>
<p><strong>行内元素垂直对齐方式</strong>，利用表格元素table+vertical-align实现，父级给table，子级给table-cell，vertical-align: middle</p>
<h3 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷"></a>margin塌陷</h3><p>margin塌陷：margin 外边距在垂直方向上会采取margin collapse策略，即不合并，而取最大值；常见的如 子盒子想在父盒子垂直居中，设置margin，不会起作用，反而会让父级盒子跟着下移</p>
<p>解决办法：把父级盒子变成BFC</p>
<p>触发办法：</p>
<p>浮动元素, float 属性设置除 none 以外的值;<br>定位元素, position 属性设置绝对定位 absolute 或固定定位 fixed;<br>display 属性设置为其中之一的值 inline-block, table-cell, table-caption;<br>overflow 属性除 visible 以外的值, 即 hidden，auto，scroll;</p>
<h3 id="如何设置内部盒子居中"><a href="#如何设置内部盒子居中" class="headerlink" title="如何设置内部盒子居中"></a>如何设置内部盒子居中</h3><p>外部盒子设置padding，内部盒子宽高都100%即可</p>
<h2 id="css布局方式"><a href="#css布局方式" class="headerlink" title="css布局方式"></a>css布局方式</h2><ol>
<li> 常规流：行级、块级、flexbox、grid布局；2. 浮动流；3. 绝对定位</li>
</ol>
<h3 id="常规流-normal-flow"><a href="#常规流-normal-flow" class="headerlink" title="常规流 normal flow"></a>常规流 normal flow</h3><p>除了根元素、浮动元素和绝对定位元素不在，其他都在常规流之内</p>
<p>行级排版上下文，Inline Formatting Context IFC，水平排版</p>
<p>块级排版上下文，Block Formatting Context BFC</p>
<h3 id="flexible-box"><a href="#flexible-box" class="headerlink" title="flexible box"></a>flexible box</h3><p>display: flex 生成块级flex容器；display: inline-flex 生成行级flex容器；</p>
<h4 id="流向和换行"><a href="#流向和换行" class="headerlink" title="流向和换行"></a>流向和换行</h4><p>flex-diretion控制流向，默认是从左到右，flex-diretion的方向称为主轴，与其垂直的方向称为侧轴，参数row默认，column，row-reverse，column-reverse</p>
<p>flex-wrap 控制是否允许换行，参数 nowrap 默认不换行，wrap 弹性子项溢出会换行</p>
<p>flex-flow 是flex-direction和flex-wrap的缩写，flex-flow：row nowrap</p>
<h4 id="元素布局"><a href="#元素布局" class="headerlink" title="元素布局"></a>元素布局</h4><p>justify-content 控制元素主轴方向排版，参数flex-start、flex-end、center、space-between、space-around、space-evenly</p>
<p>align-items 控制弹性盒子元素在侧轴（纵轴）方向上的对齐方式，参数flex-start、flex-end、center、stretch（拉伸到父容器，默认值）、baseline</p>
<p>align-content 控制 **多行内容 **在侧轴方向排版，设置各个行的对齐，参数flex-start、flex-end、center、stretch（拉伸到父容器，默认值）、baseline（元素统一基准线）</p>
<h4 id="弹性子元素属性"><a href="#弹性子元素属性" class="headerlink" title="弹性子元素属性"></a>弹性子元素属性</h4><p>order 控制 DOM元素出现顺序，从小到大，默认都是0，可以为负值。</p>
<p>使用弹性盒子，居中变的很简单，只需要设置 <code>margin: auto;</code> 可以使得弹性子元素在两上轴方向上完全居中</p>
<p>align-self 控制<strong>覆写****元素自身</strong> 的侧轴排版，参数和align-items一致</p>
<p>flex 用于指定弹性子元素如何分配空间，flex = flex-grow + flex-shrink + flex-basis</p>
<ul>
<li>flex-grow 控制有剩余空间时flex-item的放大比例；0表示默认大小</li>
<li>flex-shrink 控制空间不足时flex-item的缩小比例；</li>
<li>flex-basis 主轴方向的基础长度，auto刚好包裹元素</li>
</ul>
<h3 id="grid-box"><a href="#grid-box" class="headerlink" title="grid box"></a>grid box</h3><p>flex将元素按照单向进行摆放，grid则可以将元素按照两个方向进行摆放</p>
<p>描述 网格如何划分</p>
<p>display: grid或 inline-grid 生成网格容器；grid-template将容器划分为网格，再设置每一个子项占据哪些行、列</p>
<p>grid-template-columns 控制网格列划分，grid-template-rows 控制网格行划分</p>
<ul>
<li>grid-template-columns: 100px 100px 100px，也可以写为repeat(3,100px)</li>
<li>grid-template-columns: 30% 30% auto</li>
<li>grid-template-columns: 100px 1fr 1fr 说明：fr，fraction 份数，即剩下可用空间的均分比例</li>
</ul>
<p>网格间距：grid-gap = grid-column-gap +  grid-row-gap</p>
<p>描述元素的位置</p>
<p>网格线都从1开始，并不是0。<a href="https://www.runoob.com/cssref/pr-grid-column.html">grid-column </a> <em>grid-column-start</em> 和 <em>grid-column-end</em> 的简写属性；<a href="https://www.runoob.com/cssref/pr-grid-row.html">grid-row</a>  <em>grid-row-start</em> 和 <em>grid-row-end</em> 的简写属性</p>
<ul>
<li>grid-column-start: 2；grid-column-end: 5</li>
<li>grid-column-start: 2；grid-column-end: span 3</li>
</ul>
<p>grid-area 控制元素在网格中的位置</p>
<ul>
<li>grid-area：1/1/3/3 左上角1,1和右下角3,3</li>
<li>grid-area: 2 / 1 / span 2 / span 3;  第二行跨越两格 第一列跨越三格</li>
<li>grid-areas 控制各个网格的名字，grid-areas: ‘header header header header’，repeat不适用于此</li>
</ul>
<p>网格内元素布局</p>
<p>justify-items 控制元素在网格内水平方向上的布局；align-items 控制垂直方向上的布局</p>
<p>align-self，justify-self 控制单个元素的布局</p>
<p>justify-content 控制水平方向 网格总体布局，align-content 控制垂直方向 网格总体布局</p>
<p>非常推荐用下面这个小游戏来检验自己的学习成果！</p>
<p><a href="https://www.runoob.com/try/gridgarden/index.html">Grid Garden - 一个用来学CSS grid的游戏 (runoob.com)</a></p>
<h3 id="浮动流-float"><a href="#浮动流-float" class="headerlink" title="浮动流 float"></a>浮动流 float</h3><p>浮动元素脱离常规流，漂浮在容器左边或右边，是inline-block；浮动元素后面的行盒会变短以避开浮动元素</p>
<p>通过<code>float</code>属性实现元素浮动，<code>float</code>属性定义元素在哪个方向浮动，它有两个值<code>float:left</code> 和 <code>float:right</code>，默认值为<code>none</code></p>
<p>内联、内联块、浮动、溢出隐藏、纯文本都可以识别浮动元素的位置，但是块级元素无法识别</p>
<p>clear 属性控制元素 不受浮动元素影响</p>
<h4 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动"></a>如何清除浮动</h4><p>问题：<strong>父元素因为子级元素浮动引起的内部高度为0的问题</strong></p>
<p>如何解决：<strong>用 <code>after</code>伪元素清除浮动</strong>。 在父元素上 加 clearfix 这个class</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">.</span>clearfix<span class="token operator">:</span><span class="token operator">:</span>after<span class="token punctuation">&#123;</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span> block<span class="token punctuation">;</span>
    <span class="token literal-property property">clear</span><span class="token operator">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="绝对定位-position"><a href="#绝对定位-position" class="headerlink" title="绝对定位 position"></a>绝对定位 position</h3><p>position有四个取值：static、默认值，非定位元素；relative，相对自身原本位置偏移，<strong>原来的位置不腾出</strong>，不脱离文档流；</p>
<p>absolute，相对于最近的 relative或absolute进行绝对定位，<strong>腾出原来的位置</strong>，脱离文档流；</p>
<p>fixed，相对于浏览器窗口的绝对定位，会变成 内联块元素，需要额外赋宽度，不随页面滚动而变化，常用于导航栏</p>
<p>使用top、left、bottom、right设置偏移长度，流内其他元素当它没有偏移一样进行布局，即使会有遮挡</p>
<p>css transform 如何变形</p>
<p>对元素进行平移 translate、旋转 rotate、缩放 scale、倾斜 skew，transform不会对其他元素布局产生影响</p>
<ul>
<li>transform ：translate(100px, 100px)</li>
<li>transform ：rotate(90deg) 顺时针旋转90度</li>
</ul>
<p>css transition 过渡方式</p>
<p>transition-property 需要过渡效果的属性；transition-duration 过渡耗时；transition-timing-funtion 过渡效果；transition-delay 过渡延迟</p>
<ul>
<li>transition：height 500ms linear 1s</li>
<li>transition-timing-funtion 有以下几种：linear、ease、ease-in、ease-out、ease-in-out、steps(4)</li>
</ul>
<h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>css animation 动画</p>
<p>响应式设计，同一个页面适应不同屏幕大小设备的方案</p>
<ol>
<li>设置viewport，&lt;meta name=’viewport’ content=’width=device-width’, initial-scale=1.0’&gt;</li>
<li>contain 和 cover 的区别：contain，不造成裁剪，可能有留白；cover，可能会造成裁剪，不留白</li>
<li>media query 针对不同屏幕，应用不同样式，@media screen and (min-width:480px){ } 在至少480px的屏幕上才使用该样式<ul>
<li>可以查询的media，width/</li>
<li>height，device-width/device-height，device-pixel-ratio、orientation</li>
</ul>
</li>
</ol>
<p><strong>@keyframes</strong></p>
<p>通过 @keyframes 规则创建动画。原理是将一套 CSS 样式逐渐变化为另一套样式。在动画过程中，可以多次改变这套 CSS 样式。</p>
<p>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。</p>
<pre class="line-numbers language-none"><code class="language-none">@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>animationname</em></td>
<td align="left">必需。定义动画的名称。</td>
</tr>
<tr>
<td align="left"><em>keyframes-selector</em></td>
<td align="left">必需。动画时长的百分比。合法的值：0-100%from（与 0% 相同）to（与 100% 相同）</td>
</tr>
<tr>
<td align="left"><em>css-styles</em></td>
<td align="left">必需。一个或多个合法的 CSS 样式属性。</td>
</tr>
</tbody></table>
<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><h3 id="ECMA"><a href="#ECMA" class="headerlink" title="ECMA"></a>ECMA</h3><p>ECMA， 欧洲计算机制造联合会，评估、开发计算机各项标准。其中ECMA -262是脚本语言的规范，ECMAScript。ES5，ES6都是从这里来的</p>
<p><img data-src="https://s2.loli.net/2022/10/05/l7ODdjGAKrZ9Bct.png"></p>
<h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>ASCII码，1个字节， 表1 0-127，数字 小于 大写字母 小于 小写字母；表2  128-255。UNICODE码 涵盖ASCII码，2个字节</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">返回字符串第一个字符的 Unicode <span class="token function">编码</span><span class="token punctuation">(</span><span class="token constant">H</span> 的 Unicode 值<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"HELLO WORLD"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以通过charCodeAt() &gt; 255，检查每个字符是否大于255，大于返回两个字节，小于等于返回一个字节</p>
<h3 id="JS单线程引擎"><a href="#JS单线程引擎" class="headerlink" title="JS单线程引擎"></a>JS单线程引擎</h3><p>JS引擎，是单线程，但是可以通过<strong>轮转时间片</strong>来模拟多线程</p>
<p>动态语言 -&gt; 脚本语言 -&gt; 解释型语言 -&gt; 弱类型语言</p>
<p>静态语言 -&gt; 编译型语言 -&gt; 强类型语言</p>
<h3 id="堆内存和栈内存"><a href="#堆内存和栈内存" class="headerlink" title="堆内存和栈内存"></a>堆内存和栈内存</h3><p>JS变量都存放在<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>中，而内存给变量开辟了两块区域，分别为栈区域和堆区域</p>
<p><strong>栈</strong> 是一种 <strong>先进后出</strong> </p>
<p>构，像个容器，<strong>容量小速度快</strong>，但<strong>不灵活</strong>，变量使用完成后就可以将其释放，内存回收容易实现；</p>
<p><strong>堆 <strong>像个房间，</strong>容量较大，使用灵活</strong>，可以动态增加或删除空间，但是<strong>存取比较慢</strong>，存储变量时没有什么规律可言。</p>
<p>基本类型存放在栈内存，引用类型存放在堆内存中的，但是引用类型的引用还是存在栈内存</p>
<p><strong>基本类型</strong> 声明一个变量，多次赋值就会取最后一个值，不能添加属性或者方法，但是Boolean、Number、String有自己的包装类<br><strong>基本类型</strong> 可以直接复制,复制之后的内容和原内容没有什么联系，类似于开辟了一个新的空间</p>
<p><strong>引用类型</strong> 直接赋值给另一个变量以后相互之间的修改会互相影响对方，进而引出浅拷贝与深拷贝的问题</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="6种基本类型"><a href="#6种基本类型" class="headerlink" title="6种基本类型"></a>6种基本类型</h3><p>Number、String、Boolean、undefined、null、Symbol (new in ES 6) </p>
<ul>
<li>JavaScript的Number包含了浮点和整数型这些，根据具体的值来分配具体的类型，故JavaScript为<strong>弱类型语言</strong></li>
<li>原始值<strong>没有自己的方法和属性</strong>，但是Boolean、Number、String有自己的包装类，undefined和null没有</li>
<li>原始值初始化赋值和内容都存放在栈内存中</li>
</ul>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用值统称为 Object 类型，又可以细分为：object 类型、array类型、date类型、RegExp 类型、function类型 等。</p>
<ul>
<li>引用值<strong>有自己的方法和属性</strong>，如 length、push等</li>
<li>引用值初始化赋值和实际内容都存放在堆内存中，但指向堆内存中该对象的指针仍然存放在栈内存中</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token comment">// 对象是引用值，引用值对比的是地址，两个空对象存储在不同的地址，自然就不相等</span>

<span class="token number">2.</span> 如何让两个对象相等
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
obj1 <span class="token operator">=</span> obj
obj1 <span class="token operator">==</span> obj  <span class="token comment">//return true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="typeof与instanceof"><a href="#typeof与instanceof" class="headerlink" title="typeof与instanceof"></a>typeof与instanceof</h3><p><code>typeof()</code> 可以反映出的类型有：number、string、boolean、undefined、object(null历史遗留问题、object、array、date、RegExp )、 function</p>
<p>这里怎么记：基本类型中 的null 叛变 被识别成 object，引用类型中 function 被识别function，而不是object，其他的都按照数据类型来</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>  <span class="token comment">//return  字符串的'undefined'，返回为真 </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//直接报错，因为a没有被定义</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a>：用来判断某个构造函数的 prototype 属性所指向的对象是否存在于另外一个要检测对象的原型链上</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>              <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>               <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">aa</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span>           <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h3><p><strong>任何数据类型</strong> + 字符串 都是字符串</p>
<p>NaN，not a number，非数，是一个数字类型，用于一些没有意义的情况，NaN与包括自己在内任何东西都不相等。Number(undefined)、Number(null) 得到的都是NaN</p>
<p>&lt;   &gt;   &lt;=   &gt;=   ===   !=   !==</p>
<ol>
<li>数字和数字比，比大小；</li>
<li>字符串数字和数字，统一转换成数字进行比较</li>
<li>非纯数字字符串和数字进行比较，非纯数字字符串会转换为NaN，当NaN和数字比较时不论大小都返回false.</li>
<li>数字字符串和数字字符串，从第一位开始依次比较ASCII码；</li>
<li>字符串和字符串，从第一位开始依次比较ASCII码；</li>
</ol>
<p>逻辑运算</p>
<p>undefined、null、NaN、“”、0、false，除上述以外全部都是真</p>
<p>console.log(1 &amp;&amp; 2 &amp;&amp; undefined &amp;&amp; 10)</p>
<ul>
<li>return undefined </li>
<li>遇到真就往后走，遇到假或走到最后就返回当前的值</li>
</ul>
<p>console.log(1 || 2 || undefined || 10)</p>
<ul>
<li>return 1</li>
<li>遇到假就往后走，遇到真或走到最后就返回当前的值</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><ul>
<li>Number，转数字类型；String，转字符串；Boolean()，转布尔</li>
<li>parseInt，从前往后看整数，转整数类型（向下取整）；parseFloat，转浮点类型(四舍五入)；  toFixed(2)，取小数点两位</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123a'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12a123'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">12</span>

<span class="token string">"89"</span> <span class="token operator">></span> <span class="token string">'9'</span> <span class="token keyword">return</span> <span class="token boolean">false</span> 字符串比较大小 从第一位的<span class="token constant">ASCII</span>码开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><ul>
<li>=== 不进行隐式转换</li>
<li>NaN == NaN，返回 false，NaN不等于任何东西</li>
<li>undefined 不大于零 不等于零 不小于零；null 不大于零 不等于零 不小于零；故 undefined  == null ，return true</li>
<li>isNaN有隐式类型转换，new Number()</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123a'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数在传递参数时，多传递的参数会被忽视，少传递的参数会被视为 undefined</p>
<p>实参和形参存储在不同的地方，数量匹配的 会存在一一对应的绑定关系；不匹配的，多传递或少传递的，不会有绑定关系</p>
<ul>
<li>实参和形参在取值时，默认取 不是undefined的值</li>
<li>每一个函数的形参都是函数的临时变量</li>
</ul>
<p>函数本身是有length的，test.length 返回实参的长度；函数默认返回值undefined</p>
<h4 id="如何进行实参求和"><a href="#如何进行实参求和" class="headerlink" title="如何进行实参求和"></a>如何进行实参求和</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    ​		a <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    ​	<span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> a
<span class="token punctuation">&#125;</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="实参是可被修改的"><a href="#实参是可被修改的" class="headerlink" title="实参是可被修改的"></a>实参是可被修改的</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">funtion <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    z <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// return 10 reason: undefined -> 3 -> 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>三种声明方式，var arr = {} 对象字面量；var arr = new Object() ；var arr = Object() ； 所有对象都继承于 Object.prototype</p>
<p>对象里的函数 叫 方法 method；在对象中，this就指代对象主体</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> teacher <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'cyc'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>
    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">--</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
teacher<span class="token punctuation">.</span>name  teacher<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> 两个效果一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>三种声明方式，var arr = []  数组字面量；var arr = new Array() 不推荐；var arr =  Array() 用得少； 所有数组都继承于 Array.prototype</p>
<p>数组内最后一位如果是 逗号， 系统会忽略，其余位置的逗号会认为 是empty元素</p>
<h4 id="修改原数组的方法"><a href="#修改原数组的方法" class="headerlink" title="修改原数组的方法"></a><strong>修改原数组的方法</strong></h4><p>修改原数组的方法，push、unshift，pop，shift，splice，sort</p>
<p>数组尾部 push 加 pop减</p>
<p>数组头部 unshift加 shift减</p>
<p>push在最后加元素，unshift在最前面加元素，这两个方法都是继承Array原型的方法，返回值 是<strong>执行方法之后的数组长度</strong></p>
<p>pop 方法 剪切数组最后一位 并返回出来；shift方法 剪切数组第一位 并返回出来</p>
<p>reverse方法 ，倒序数组</p>
<p><strong>splice方法</strong>：arr.splice(开始项的下标，剪切长度，在剪切后的位置添加新数据)，返回被剪切的数组，原数组做新数据添加</p>
<p>sort，返回排序后的数组结果，可以通过设置<strong>系统内置方法</strong>（a 与 b进行比较，小于就不动，大于就交换位置）来达到不同的排序效果，<strong>默认按照ASCII码进行升序排序</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">默认按照<span class="token constant">ASCII</span>码进行升序排序
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//return [27, 49, 5, 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="push方法的实现原理"><a href="#push方法的实现原理" class="headerlink" title="push方法的实现原理"></a>push方法的实现原理</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="如何让数组按照数字大小进行排序"><a href="#如何让数组按照数字大小进行排序" class="headerlink" title="如何让数组按照数字大小进行排序"></a>如何让数组按照数字大小进行排序</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span> <span class="token comment">// 返回升序排序</span>
    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span> <span class="token comment">// 返回降序排序</span>
    
    <span class="token keyword">var</span> rand <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rand<span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// 打乱一个数组</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>如何让数组按照根据字符串长度排序</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'12312'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'1231'</span><span class="token punctuation">,</span><span class="token string">'1231231'</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="新建一个数组的方法"><a href="#新建一个数组的方法" class="headerlink" title="新建一个数组的方法"></a><strong>新建一个数组的方法</strong></h4><p>concat，toString(数组转字符串)，slice</p>
<ul>
<li>arr.slice(开始项的下标，截止项的下标)，要区分开slice和splice</li>
<li>arr.join()，把数组内的元素取出来用参数进行连接，不填参数默认用,逗号隔开</li>
<li>arr.split(‘分割参数‘ ，数组长度)，把字符串用分割参数分割后放入数组，和join对应使用</li>
</ul>
<h4 id="slice和splice的区分"><a href="#slice和splice的区分" class="headerlink" title="slice和splice的区分"></a>slice和splice的区分</h4><ol>
<li>slice 翻译 片段 ；splice 翻译 拼接</li>
<li>两者功能类似，slice 两参数，起点和止点；splice三参数，起点 长度 和新加数据</li>
<li>返回值都是被剪切的数组， splice多了一个向原数组添加数据的功能</li>
<li>slice 不修改原数组，splice 修改原数组</li>
</ol>
<h4 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h4><p>5个迭代方法（循环操作数组中的各个项）：forEach(),map(),filter(),every()和some()<br>2个归并方法（迭代数组所有项，最终返回一个值）：reduce()和reduceRight()<br>2个索引方法：indexOf() 和 lastIndexOf()；</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// forEach: 遍历数组，无返回值，不改变原数组</span>
<span class="token comment">// e 当前元素 ; index当前元素索引值 ; array整个数组，第二个参数改变this指向</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// map: 返回一个新数组，不会改变原数组</span>
<span class="token comment">// 新数组的元素值是每次函数return的返回值 ; 不写return，接收的新数组的元素值将全为空</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span> <span class="token comment">//b得值是[1,4,9]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// filter: 过滤不符合条件的元素,保留true，过滤false,返回一个新数组，不改变原数组</span>
<span class="token keyword">var</span> brr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> item<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//返回值为奇数的元素</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//some: 判断数组内是否有指定元素，如果只要有一个则返回true，如果一个都没有则返回false</span>
<span class="token keyword">var</span> brr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// every: 判断数组内是否都有指定元素，如果全部都有则返回true</span>
<span class="token keyword">var</span> brr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>reduce</strong>: 为数组中的每一个元素依次执行回调函数</p>
<p>回调函数四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，原始数组</p>
<ul>
<li>如果没有提供initialValue，reduce 从索引1的地方开始执行 ，跳过第一个索引</li>
<li>如果提供initialValue，从索引0开始</li>
<li>空数组使用reduce不提供初始值，会报错，因为没有索引1</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span>
<span class="token number">6</span> <span class="token number">4</span> <span class="token number">3</span>

<span class="token keyword">var</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>，<span class="token number">0</span><span class="token punctuation">)</span> 

<span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span>
<span class="token number">6</span> <span class="token number">4</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>reduceRight()</strong><br>reduceRight()和reduce()类似，只是执行方向不同，reduceRight()从数组的末尾往前递归</p>
<p><strong>indexOf()</strong><br>跟字符串查找一样，查找指定元素是否存在，如果存在，返回下标，如果不存在返回-1</p>
<p><strong>lastIndexOf()</strong><br>lastIndexOf()是从最后一个查找，如果存在，返回下标，如果不存在返回-1</p>
<h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><ul>
<li>类数组是结构与数组十分相似，但没有数组那么丰富的内建方法，通常类数组可能还拥有一些别的属性。</li>
<li>类数组一定要有 <strong>数组形式下标 的值 和 length属性</strong>，length属性值为数组形式下标值数量，其他的属性数量不计入</li>
<li>JavaScript 常见的类数组：arguments，类数组的原型继承于Object，不继承Array，所以很多array原生方法用不了，需要额外添加</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'2'</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token string-property property">'3'</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token string-property property">'length'</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string-property property">'push'</span><span class="token operator">:</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回4 因为obj.length为4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// return &#123;2: 1,3: 2,length: 4,push: f...&#125; 结合push的实现方法来思考</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h2><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p><code>JavaScript</code>是解释性语言，也就是说，编译一行，执行一行，但<code>js</code>并非上来就进入编译环节，它在编译之前存在预编译过程。<code>js</code>中预编译一般分为 全局的预编译 和 函数的预编译</p>
<p>预编译过程中 只看 有无变量声明和函数声明，最后再执行（if,while都算执行里）</p>
<p>GO global object，全局上下文 的预编译流程</p>
<ol>
<li>找变量声明，初始都为undefined</li>
<li>找函数声明</li>
</ol>
<ol>
<li>执行 -&gt; 该赋值就赋值 该执行就执行</li>
</ol>
<p>AO 函数上下文的预编译流程</p>
<ol>
<li>寻找形参和变量声明，初始都为undefined，<strong>this 指向window</strong></li>
<li>实参值赋值给形参</li>
<li>找函数声明、赋值</li>
<li>执行</li>
</ol>
<p>值得注意：</p>
<ul>
<li>暗示全局变量 <strong>imply global</strong>，任何变量如果变量未经声明赋值，此变量就为全局对象(window)所有；window是一个全局作用域对象</li>
<li><strong>函数未被实例化前，this指向window</strong>，this.a=1 实际上为 a=1，都保存在全局中</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	y <span class="token operator">=</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> n <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
y <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> n <span class="token operator">+=</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span>
z <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// return 1,4,4 reason: 预编译过程中add函数会被后面的覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h3><p>作用域：限定这个变量的可用性的代码范围就是这个变量的作用域。</p>
<p>作用域链：上下文代码执行的时候，创建变量对象的一个作用域链，决定了各级上下文代码访问变量和函数时的顺序。代码正在执行的上下文变量始终在作用域链最前端，全局上下文的变量对象始终是作用域链最后一个变量对象。</p>
<p>作用域链(scope chain)：由多个作用域对象连续引用形成的链式结构。</p>
<p>函数在被定义的时候，生成自己的作用域和作用域链[[scope]]，放入自己的GO；在被执行的时候，生成AO；自己的AO排在GO前面</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包指的是 那些引用了另一个函数作用域变量的函数，通常在嵌套函数中实现。return 返回函数的时候，会将当前AO抛出去，变成GO里的全局变量，从而产生闭包，</p>
<ul>
<li>当内部函数被返回到外部并保存时，一定会产生闭包</li>
<li>window. =  function(…)  window也可以产生闭包的效果</li>
</ul>
<p>用闭包模拟私有方法：产生闭包后，在当前AO定义的变量，称为该函数的私有变量，其他地方不能访问</p>
<p>坏处：闭包会产生原来的作用域链不释放，过度的闭包可能会导致内存泄漏或加载过慢</p>
<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>IIFE，immediately-invoked function，也可被称为<strong>初始化函数</strong></p>
<ul>
<li><strong>立即自动执行</strong>，<strong>执行一次完成后立即释放</strong>，<strong>独立作用域</strong>，常被用于开发模块</li>
<li>立即执行函数 + 构造函数 + window闭包，非常适合写js插件</li>
</ul>
<p>写法如下： 匿名函数+执行小括号；括号包起来的任何东西都变成表达式</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>不给函数后加括号就不是执行函数！一定要注意这个细节</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">// return 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数声明变成表达式的方法"><a href="#函数声明变成表达式的方法" class="headerlink" title="函数声明变成表达式的方法"></a><strong>函数声明变成表达式的方法</strong></h4><ul>
<li>函数变成表达式后，函数名即被忽略；一定是表达式 才能被执行符号()执行</li>
<li>在函数前加上 + - ！ || &amp;&amp; 等可以让函数变成表达式</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    myArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// return 打印出来 10个10   reason: i&lt;10时，function里面的内容都被忽略，i=10时，arr被返回出全局，产生闭包，此时的i为全局变量，且等于10,故打印的全部都是10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="逗号分隔符"><a href="#逗号分隔符" class="headerlink" title="逗号分隔符"></a>逗号分隔符</h3><p>逗号分隔符， 返回最后一个值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    
<span class="token comment">// return  5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fn<span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">'2'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// return function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fn<span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">'2'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  return string </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    a <span class="token operator">+=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">// return 10undefined  reason:(function b()&#123;&#125;)通过，且忽视函数名，b未被定义，即undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数在实例化之前，构造函数就是一个函数。构造函数上的方法指向构造函数，并不指向实例对象；构造函数原型上的方法指向实例本身</p>
<p>函数默认返回值是undefined，构造函数实例化后默认返回值是this，this后跟函数会产生隐式闭包</p>
<p>实例化后，原本指向window的this 指向 一个实例化新对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token class-name">函数名</span><span class="token punctuation">.</span>prototype
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例化后，相当于创建了一个对象object，<strong>this指向这个实例化对象，不指向构造函数</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token parameter">opt</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> opt<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>
    <span class="token comment">// 隐式做了这件事情，实例化后产生一个全局闭包   </span>
    <span class="token comment">// return this    </span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'123'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="class-与-构造函数的关系"><a href="#class-与-构造函数的关系" class="headerlink" title="class 与 构造函数的关系"></a>class 与 构造函数的关系</h4><p><strong>通过class定义的类 和通过构造函数定义的类 二者本质相同</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">&#125;</span>
  <span class="token function">say</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>为了便于操作基本类型值，JS 提供了三种特殊的引用类型：Boolean、Number、String（undefined和null没有自己的包装类）</p>
<p>每当读取一个基本类型值的时候，引擎就会创建一个对应的基本包装类型的对象”，能够调用一些方法来操作这些数据。</p>
<p>包装类 <strong>只能访问，不能做保存</strong>，如果需要保存，就使用new实例化生成对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'123123123'</span>   
name <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//12312312310</span>

<span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//string</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//true</span>
    type<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'string'</span> <span class="token comment">// new String(type).text = 'string'  delete</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">// undefined </span>
<span class="token comment">//  return undefined  reason: 包装类 只能访问，不能做保存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>constructor —&gt; 构造函数；prototype —&gt; 原型；_<em>proto</em>_  —&gt; 原型容器</p>
<p>prototype <strong>是属于每个实例化对象</strong>，并不属于构造函数；_<em>proto</em>_ 是每个实例化对象的原型的容器</p>
<p>JavaScript原型链是一种用于实现面向对象编程的设计，它让JavaScript对象可以继承其他对象的属性和方法。JavaScript原型链是一种指针链，每个对象都有一个内置的属性，叫做原型（prototype），它指向该对象的父对象（即创建该对象的对象）。原型也是一个对象，所以它也有自己的原型，这样就形成了一个原型链。原型链的终点是一个叫做Object.prototype的对象，它是所有对象的默认原型。Object.prototype的原型是null，表示原型链的结束</p>
<ul>
<li><p><strong>原型链的问题</strong>：原型中包含的引用值会在所有实例中共享，所以将写死的值和方法 写到 prototype，需要传参的 写到构造函数里，传参值的优先级高于prototype</p>
</li>
<li><p><strong>如何修改原型链</strong>：子类可以修改父类的 引用值，不能修改父类的原始值；子类虽然不能修改父类的原始值，但是可以copy一份父类原始值后再修改自己。实例化生成的对象一般<strong>无法对 原型 进行 增加改</strong>， 通过 ._<em>proto</em>_ 这种方式可以</p>
</li>
<li><p><strong>原型链顶端</strong> ： Object.prototype，不是Object</p>
</li>
<li><p><strong>自定义原型</strong>：Object.create( 填对象或者null) ，可以自定义原型 prototype</p>
</li>
</ul>
<h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h3><ul>
<li><p>call/apply<strong>可以更改 构造函数的this指向</strong>，只能借用指定的属性，不能继承上级全部的属性和方法</p>
</li>
<li><p>两者区别是 传参不同，call(this, 1, 2, 3, …) ； apply(this, [1,2,3,…])</p>
</li>
<li><p>通过 <code>call/apply</code>，可以使用属于另一个对象的方法</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">city<span class="token punctuation">,</span> country</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> country<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"Bill"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"Gates"</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// person1 可以使用 person.fullName 方法</span>
person<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Seattle"</span><span class="token punctuation">,</span> <span class="token string">"USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p><code>eval()</code> 函数计算或执行参数，如果参数是表达式，则 <code>eval()</code> 计算表达式。如果参数是一个或多个 JavaScript 语句，则 <code>eval()</code> 执行这些语句</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"x * y"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"2 + 2"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"x + 17"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> res <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>  <span class="token comment">// return 200 4 27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>JavaScript垃圾回收 是一种自动内存管理机制，可以监控内存分配。垃圾回收的目的是防止内存溢出，提高程序的性能和稳定性。</p>
<p>垃圾回收是一个周期性的过程，在一定的时间间隔内执行。</p>
<p>基本原理是从全局对象开始，找出所有引用的对象，再找这些对象的引用对象，以此类推，形成一个可达对象的集合。 标记所有不可达对象，释放内存空间。这种算法被称为 标记-清除。</p>
<h2 id="疑难点"><a href="#疑难点" class="headerlink" title="疑难点"></a>疑难点</h2><h3 id="如何认识new"><a href="#如何认识new" class="headerlink" title="如何认识new"></a>如何认识new</h3><p>new 申请内存, 创建对象,当调用new时，后台会隐式执行new Object()创建对象。所以，通过new创建的字符串、数字是引用类型，而是非值类型。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'25'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
conosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span>  <span class="token comment">// return object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="检查数据类型的方法"><a href="#检查数据类型的方法" class="headerlink" title="检查数据类型的方法"></a>检查数据类型的方法</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p><code>typeof()</code> 可以反映出的类型有：number、string、boolean、undefined、object(null历史遗留问题、object、array、date、RegExp )、 function</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><code>instanceof</code>可以正确判断对象的类型，其内部运行机制是<strong>判断在其原型链中能否找到该类型的原型</strong></p>
<p><code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。因为基本数据类型没有原型链</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span>  <span class="token comment">// true</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>    <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h4><p>使用 Object 对象的原型方法 toString 来判断数据类型(Object上原型toString方法（返回对象的具体类型）):</p>
<p>A instanceof  B，A对象的原型链上到底有无B原型；第三种是最实用的</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>object Array<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>
<p>这是因为toString是Object的原型方法，而Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型）</p>
<p>采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。</p>
<h2 id="技巧用法"><a href="#技巧用法" class="headerlink" title="技巧用法"></a>技巧用法</h2><h3 id="插件的写法"><a href="#插件的写法" class="headerlink" title="插件的写法"></a>插件的写法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">ES5</span>的写法
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Test</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    window<span class="token punctuation">.</span>Test <span class="token operator">=</span> Test
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">ES6</span>的写法
<span class="token keyword">class</span> <span class="token class-name">name</span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//构造方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//原型方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//初始化函数</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>方法里每次最后都return this，可以达到连续调用的效果</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sched <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">morning</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">evening</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
sched<span class="token punctuation">.</span><span class="token function">morning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h3><p>原型并不可以随便赋值，因为原型是引用对象，随便赋值会导致 子类轻易修改父类原型，如果需要 引用父类原型加以修改 且不产生影响，则可以引入第三个空构造函数实例化后做中转使用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//企业级写法！不会污染全局变量  Origin被继承 Target欲继承 </span>
<span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span>Origin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span>Origin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Buffer</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//还原构造器</span>
        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>
        <span class="token comment">//说明继承源</span>
        <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>super_class <span class="token operator">=</span> Origin<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="克隆-浅拷贝-深拷贝"><a href="#克隆-浅拷贝-深拷贝" class="headerlink" title="克隆/浅拷贝/深拷贝"></a>克隆/浅拷贝/深拷贝</h3><ul>
<li><p>克隆，只拷贝的地址，var a = b </p>
</li>
<li><p>浅拷贝，只拷贝第一层属性信息，深层信息如一个变，其他跟着变</p>
<p>对于引用值，浅复制仅仅复制引用值的存放地址，而不复制实际的存放对象。</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> tar <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> origin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            tar<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tar<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>深拷贝，全部完整的拷贝下来，深复制把要复制的对象所引用的对象都复制了一遍</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    	toStr <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>
        arrType <span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> origin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              	<span class="token function">toStr</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> arrType <span class="token operator">?</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            	<span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tar<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>this 是JavaScript关键字，是当前环境执行期上下文对象的一个属性，在不同环境下表现不同。一般原则：谁调用this的宿主，this就指向谁</p>
<h4 id="全局this"><a href="#全局this" class="headerlink" title="全局this"></a><strong>全局this</strong></h4><p>全局作用域下的this 和window的关系是相同的，不同环境下的全局对象获取方式并不相同</p>
<ul>
<li>web：window、self、frames、this</li>
<li>node：global ； web workers：self</li>
<li>通用获取方式：globalThis (Web Worker为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程)</li>
</ul>
<p>严格模式下，谁调用函数，函数内部的执行默认就是谁</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window <span class="token punctuation">)</span> <span class="token comment">// return true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>apply 、 call 和 bind 调用模式</strong></p>
<p>call、apply是立即执行、bind是返回一个新的函数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// test.bind 只会生效一次，下式等同于  t = test.bind(obj)</span>
t <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><strong>箭头函数</strong></h4><p>箭头函数 不是构造器，不能new。 箭头函数是<strong>静态this指向</strong>，忽略任何形式(call、apply、bind)的this指向改变</p>
<p>箭头函数中 this 找上层函数(非箭头）的作用域，不是谁绑定就指向谁</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span>   
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// return window  箭头函数严格模式下this也指向window-</span>
<span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return undefined  一般函数严格模式下this指向undefined</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment">// return 3，但是会被call等方法改变this指向</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment">// return undefined test2没有上层非箭头函数，所以指向全局window</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> <span class="token function-variable function">s</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s  <span class="token comment">// 永远return 3</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a><strong>对象</strong></h4><p>对象方法内部的this 指向 <strong>最近一层引用</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return 1</span>
        <span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">// t函数 最近的引用并不是 obj，不属于任何容器</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return undefined</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h4><p>this指向调用对象</p>
<h4 id="函数-和-构造函数"><a href="#函数-和-构造函数" class="headerlink" title="函数 和 构造函数"></a><strong>函数 和 构造函数</strong></h4><p>构造函数里 默认隐式返回this，如果手动返回了一个新对象，this指向的对象就被忽略了（不生效）</p>
<p>如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// return window</span>
<span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// return Test&#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a><strong>事件处理函数</strong></h4><p>事件处理函数内部的this总是指向被绑定的DOM元素，比如 谁调用onclick，函数就绑定哪个元素</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> oBtn <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">Plus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
        
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 第1种情况，会出问题</span>
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindEvent</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">handleBtnClick</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// return &lt;button....></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return undefined undefined</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 第2种情况，正确</span>
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindEvent</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//把plus实例绑入handleBtnClick中</span>
        oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleBtnClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">handleBtnClick</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return 3 4</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 第3种情况，正确</span>
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindEvent</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">//把plus实例绑入handleBtnClick中</span>
        oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>_self<span class="token punctuation">.</span><span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token class-name">Plus</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">handleBtnClick</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return 3 4</span>
    <span class="token punctuation">&#125;</span>
    
    window<span class="token punctuation">.</span>Plus <span class="token operator">=</span> Plus<span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Plus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="重要实例"><a href="#重要实例" class="headerlink" title="重要实例"></a><strong>重要实例</strong></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"123"</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"456"</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"789"</span><span class="token comment">//此时并没有对象调用函数print(),所以这里更改的的windoe的GO里面的foo值</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment">// 456 此时打印的是自己AO里面的foo值！</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment">// 123</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment">// 789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'222'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">'111'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span> <span class="token comment">// var fun = function()&#123; console.log(this.name);&#125;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 222</span>
a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'333'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222 这个地方要多注意！  将a.say，也就是函数作为实参传入到对象b内的say()函数，fun()在函数内部也是自己调用，没有对象调用，此时this仍然指向window</span>
b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span> 
b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
Foo<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 Foo.getName()理解为Foo对象的一个属性，并不涉及Foo内部</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 undefined -> console.log(5); -> console.log(4);</span>
<span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1  Foo()执行后,内部的getName被提升至全局，全局的console.log(4) -> console.log(1)</span>
<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1  Foo()执行后，内部的getName被提升至全局，全局的console.log(4) -> console.log(1)</span>
<span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2  Foo.getName()理解为Foo对象的一个属性，并不涉及Foo内部</span>
<span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3  实例化Foo()后，找Foo内部的this.getName，但是找不到，因为getName是window的，只能去原型里找，故返回3</span>
<span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 原因同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="defineProperty-1"><a href="#defineProperty-1" class="headerlink" title="defineProperty"></a>defineProperty</h3><p><strong>Object.defineProperty()</strong> 方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><code>obj</code> 需要定义属性的对象。</li>
<li><code>prop</code> 需被定义或修改的属性名。</li>
<li><code>descriptor</code> 需被定义或修改的属性的描述符。</li>
</ul>
<p><strong>数据描述符和存取描述符均具有以下可选键值：</strong></p>
<ul>
<li><code>configurable</code>: 仅当该属性的 configurable 为 <code>true</code> 时，该属性才能够被改变，也能够被删除。默认为 <code>false</code></li>
<li><code>enumerable</code>: 仅当该属性的 enumerable 为 <code>true</code> 时，该属性才能够出现在对象的枚举属性中。默认为 <code>false</code></li>
<li><code>value</code>: 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 <code>undefined</code></li>
<li><code>writable</code>: 仅当仅当该属性的writable为 <code>true</code> 时，该属性才能被赋值运算符改变。默认为 <code>false</code></li>
<li><code>get</code>: 一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。该方法返回值被用作属性值。<code>undefined</code></li>
<li><code>set</code>: 一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为<code>undefined</code>。</li>
</ul>
<h3 id="callee-和-caller"><a href="#callee-和-caller" class="headerlink" title="callee 和 caller"></a>callee 和 caller</h3><p>caller 直接翻译为调用者，callee 翻译为被召者</p>
<ul>
<li><p>arguments.callee返回当前正执行的函数</p>
<ul>
<li><p>适用于自启动函数中递归</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> n <span class="token operator">+</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>caller 指向调用当前函数的函数。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>myq<span class="token punctuation">.</span>caller <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该函数在全局作用域内被调用!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用我的是函数是"</span> <span class="token operator">+</span> myq<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">myq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// return 该函数在全局作用域内被调用!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>myq<span class="token punctuation">.</span>caller <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该函数在全局作用域内被调用!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用我的是函数是"</span> <span class="token operator">+</span> myq<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">callQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">myq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">callQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* return
调用我的是函数是function callQ() &#123; 
  myq()
&#125;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM 文档对象模型"></a>DOM 文档对象模型</h2><p>DOM：document object model 文档对象模型，通过浏览器提供的这一套方法去表示和操作HTML和XML，XML(标签自定义) –&gt; XHTML –&gt; HTML(标签由浏览器定义)</p>
<p><strong>js本身无法直接操作CSS样式的</strong>，但是可以通过设置元素的style内联样式，达到覆盖原样式生成新样式的效果</p>
<p><img data-src="https://s2.loli.net/2022/10/11/pBTkYMvF1jgHerz.png"></p>
<h3 id="document方法"><a href="#document方法" class="headerlink" title="document方法"></a>document方法</h3><p>document 是整个html文档的父级节点，html文档没有父级元素；document 的父级元素规定为null，document 实质上是一个对象</p>
<ul>
<li>document下属get方法一般获取的是 <strong>类数组</strong></li>
<li>在IE8及以下，document下属方法参数不区分大小写，要注意兼容性！</li>
<li>id属性一般对接后端使用，能不用就不用</li>
</ul>
<p>常用的几个方法：</p>
<ul>
<li>document.getElementsByTagName ； document.getElementsByClassName，不兼容IE8及以下  ；querySelector、querySelectorAll，兼容IE7及以上</li>
<li>querySelector()，返回第一个符合的；querySelectorAll()，返回满足条件的类数组。<strong>一般不使用</strong>，因为性能不好，和不实时性</li>
</ul>
<h3 id="DOM结构树"><a href="#DOM结构树" class="headerlink" title="DOM结构树"></a>DOM结构树</h3><ul>
<li>Document下属HTMLDocument和XMLDocument，Element同理</li>
<li>节点不是元素，节点包含元素，元素的名字为元素节点，也可被称为DOM元素；document的原型是 HTMLDocument，HTMLDocument的原型是 Document</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/10/12/JnlafkTABE8ctYN.png" alt="image-20221012215124687"></p>
<h4 id="节点分类和属性"><a href="#节点分类和属性" class="headerlink" title="节点分类和属性"></a>节点分类和属性</h4><ul>
<li><p>元素节点 —&gt; 1 ； 属性节点 —&gt; 2  ； 文本节点 —&gt; 3，换行也算文本节点</p>
<p>注释节点 —&gt; 8 ； document —&gt; 9  ；DocumentFragment —&gt; 11</p>
</li>
<li><p>nodeName，只读不可改 ； nodeValue，可读可改 ； nodeType，1 2 3 8 9 11；  attributes、getAttributeNode、可读可改</p>
</li>
</ul>
<h4 id="获取元素和节点的方法"><a href="#获取元素和节点的方法" class="headerlink" title="获取元素和节点的方法"></a>获取元素和节点的方法</h4><p>获取父级</p>
<p>parentNode、parentElement IE9及以下不支持</p>
<p>parentNode 获取包括元素的父级节点，parentElement 只获取父级元素</p>
<p>parentNode  w3c规范；parentElement  ie规范，在firefox浏览器不能使用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>parentElement  <span class="token comment">// return null</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>parentNode  <span class="token comment">// return #document</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>获取子级</p>
<p>childNodes、children  IE7及以下不支持</p>
<p>childNodes 获取子级节点，children  获取子级元素</p>
<p>其他获取方式</p>
<p>firstChild、lastChild；firstElementChild、lastElementChild  IE9及以下不支持</p>
<p>nextSibling、previousSibling ； nextElementSibling、previousElementSibling  IE9及以下不支持  其中区别与上面同理</p>
<h4 id="以上方法注意点"><a href="#以上方法注意点" class="headerlink" title="以上方法注意点"></a>以上方法注意点</h4><ol>
<li>getElementById()、getElementByName这两个方法，<strong>只有Dodument有</strong>，元素节点使用该方法会报错</li>
<li>getElementByTagName、getElementByClassName、querySelector、querySelectorAll 这四个方法Document和Element原型里都有</li>
<li>document.documentElement 获取 HTML元素</li>
<li>var div = document.getElementById(‘div’)[0]，经历了两个过程，选元素，再实例化 </li>
<li>document.title 获取的是 title值，不是title元素</li>
</ol>
<p>body和head的两种获取方式</p>
<ul>
<li>var body = document.getElementsByTagName(‘body’)[0]</li>
<li>特殊的常用方式：var body = document.body ; </li>
</ul>
<h3 id="有关节点增删改"><a href="#有关节点增删改" class="headerlink" title="有关节点增删改"></a>有关节点增删改</h3><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>appendChild 这是个节点 node方法，在父级元素的最下边添加，类似于push，appendChild 不是复制节点，而是剪切节点</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在堆内存里创建一个div对象，</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>  <span class="token comment">// 在节点树中添加该元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>c.insertBefore(a, b)，在父级c节点下的子节点b之前插入a节点</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><ul>
<li><p>父删除子，父节点.removeChild(子节点)，返回值是子节点；该方法并不是销毁该节点，而是从节点树中取出</p>
</li>
<li><p>子自己删除自己，remove() ，直接销毁自己，返回undefined</p>
</li>
</ul>
<h4 id="节点替换"><a href="#节点替换" class="headerlink" title="节点替换"></a>节点替换</h4><p>parent.replaceChild(new, origin)</p>
<h4 id="增加节点内容"><a href="#增加节点内容" class="headerlink" title="增加节点内容"></a>增加节点内容</h4><p>innerHTML 可以取值赋值追加值，可以加HTML字符串；  innerText  可以取值赋值追加值，不可以加HTML字符串，因为字符实体</p>
<h4 id="元素节点的方法"><a href="#元素节点的方法" class="headerlink" title="元素节点的方法"></a>元素节点的方法</h4><p>setAttribute(属性名，属性值) 给节点赋值属性</p>
<h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>HTML5 给元素增加了一个data-*属性，两种方式访问</p>
<ol>
<li>节点.dataset(*)方法去访问自定义属性</li>
<li>用getAttribute方法访问时，需要带上前面的data-</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/10/13/wNyUSfsWchTlEAq.png"></p>
<h4 id="创建文档片段"><a href="#创建文档片段" class="headerlink" title="创建文档片段"></a>创建文档片段</h4><p>DOM树节点每次有变动时，会引起页面回流，即重新计算几何数据再渲染。当频繁对DOM树进行操作时，极大占用了资源开销，此时就需要用到DocumentFragment</p>
<p>DocumentFragment不在节点树里，可将需要添加的元素节点放到DocumentFragment中，最后统一加到节点树中</p>
<h2 id="浏览器相关的DOM操作"><a href="#浏览器相关的DOM操作" class="headerlink" title="浏览器相关的DOM操作"></a>浏览器相关的DOM操作</h2><h3 id="浏览器的怪异模式和标准模式"><a href="#浏览器的怪异模式和标准模式" class="headerlink" title="浏览器的怪异模式和标准模式"></a>浏览器的怪异模式和标准模式</h3><p>document.compatMode方法  判断浏览器的模式</p>
<ul>
<li>BackCompat    怪异模式，浏览器厂商开发，向后兼容规范，</li>
<li>CSS1Compat    标准模式，w3c指定兼容规范，； &lt;!DOCTYPE html&gt;  html 文件第一行代码如果是这个，即标准模式</li>
</ul>
<h3 id="查看滚动条的距离"><a href="#查看滚动条的距离" class="headerlink" title="查看滚动条的距离"></a>查看滚动条的距离</h3><p><img data-src="https://s2.loli.net/2022/10/15/ABKXWv6kljexZNn.png" alt="image-20221015162934492"></p>
<p>多平台兼容性写法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">left</span><span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>
            <span class="token literal-property property">top</span><span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">left</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">+</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>
            <span class="token literal-property property">top</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">+</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="浏览器可视区域"><a href="#浏览器可视区域" class="headerlink" title="浏览器可视区域"></a>浏览器可视区域</h3><p>常规：window.innerWidth/ innerHeight</p>
<p>IE9及以下：标准模式：document.documentElement.innerWidth/innerHeight；  怪异模式：document.body.clientWidth/clientHeight</p>
<p>多平台兼容性写法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getViewportSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">width</span><span class="token operator">:</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
            <span class="token literal-property property">height</span><span class="token operator">:</span> window<span class="token punctuation">.</span>innerHeight
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">'BackCompat'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">width</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
            	<span class="token literal-property property">height</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">width</span><span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
            	<span class="token literal-property property">height</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="整个页面的宽高"><a href="#整个页面的宽高" class="headerlink" title="整个页面的宽高"></a>整个页面的宽高</h3><p>多平台兼容性写法：</p>
<pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">function getScrollSize()&#123;
    if(document.body.scrollHeight)&#123;
        return &#123;
            width: document.body.scrollWidth,
            height: document.body.scrollHeight
        &#125;
    &#125; else &#123;
        return &#123;
            width: document.documentElement.scrollWidth,
            height: document.documentElement.scrollHeight
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul>
<li><p>offsetLeft，offsetTop 找上一个父级定位元素的距离</p>
</li>
<li><p>offsetParent，返回上一个父级定位元素</p>
</li>
<li><p>返回元素到左上角的距离（不管是否有定位元素）</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getElementDocPosition</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> parent <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetParent<span class="token punctuation">,</span>
        offsetLeft <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">,</span>
        offsetTop <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        offsetLeft <span class="token operator">+=</span> parent<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
        offsetTop <span class="token operator">+=</span> parent<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span> offsetLeft<span class="token punctuation">,</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> offsetTop
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="操作滚动条"><a href="#操作滚动条" class="headerlink" title="操作滚动条"></a>操作滚动条</h3><ul>
<li>window.scroll(x, y) 和window.scrollTo(x, y) 等效，滚动到绝对位置</li>
<li>window.scrollBy(x, y) 滚动相对距离</li>
</ul>
<h3 id="DOM控制CSS样式"><a href="#DOM控制CSS样式" class="headerlink" title="DOM控制CSS样式"></a>DOM控制CSS样式</h3><ul>
<li><p>css样式表里的信息，控制台是无法访问到的</p>
</li>
<li><p>DOM<strong>无法直接</strong>控制css样式，可以通过 标签style属性进行设置</p>
</li>
<li><p>window.getComputedStyle(elem, null)[prop] 查看计算样式，IE8及以下不支持</p>
<p>获取样式的多平台兼容性写法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> elem<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> elem<span class="token punctuation">.</span>currentStyle<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>offsetWidth offsetHeight计算元素宽高，但是算入了padding，在企业中不常用，用上面封装的函数获取宽高会更合适</p>
</li>
<li><p>如何获取伪元素的属性，eg： div:: after{ … }</p>
<ul>
<li>width.getCoumputedStyle(div, ‘after’).width</li>
</ul>
</li>
<li><p>操作伪元素的最好方法就是 加一个类</p>
</li>
</ul>
<h2 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h2><ul>
<li><p>事件是不需要绑定的，绑定的是事件处理函数</p>
</li>
<li><p>事件冒泡，从子元素开始，触发了 事件，默认会向父级元素传递，可以一直向上级传递，body、html、document、window</p>
</li>
<li><p>事件对象，event，事件触发那一刻所有相关信息和方法的集合，event的原型链如图所示</p>
<p><img data-src="https://s2.loli.net/2022/10/28/7gZMyOAJeYDhEC1.png" alt="image-20221028133521313"></p>
</li>
<li><p>阻止事件冒泡的方法：</p>
<ul>
<li><p>e.stopPropagation() W3C规范</p>
</li>
<li><p> e.cancelBubble = true  IE</p>
</li>
</ul>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>事件代理：给父元素绑定事件处理函数，通过事件源对象找到子元素，然后执行特定的程序</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

listWrapper<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">,</span>
    tar <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">,</span> <span class="token comment">//事件源对象</span>
	tarName <span class="token operator">=</span> tar<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>tarName <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tar<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> tar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取索引的方法</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>事件流的三个阶段</p>
<ul>
<li>捕获阶段：从window对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段默认不执行处理函数；</li>
<li>目标阶段：在目标节点上触发，称为“目标阶段”</li>
<li>冒泡阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层；</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token comment">//第三个参数 false 捕获阶段默认不执行; true 捕获阶段默认执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="日期对象-Date"><a href="#日期对象-Date" class="headerlink" title="日期对象 Date()"></a>日期对象 Date()</h2><ul>
<li>getDate() 返回当前是一个月的第几天  1-31</li>
<li>getDay() 返回当前是一周中的第几天  0-6 周日算0</li>
<li>getMonth() 返回当前为第几个月， 0-11 记得要加1</li>
<li>getFullYear() 返回年份、getHours、getMinutes、getSeconds</li>
<li>getTime，获取时间戳，自此1970年1月1日0点0分0秒后过了多少毫秒</li>
<li>以上函数只是记录片段，并不是实时计算，当算持续时间的时候，需要重新实例化一次</li>
<li>setInterval 、setTimeout 默认归属于window</li>
<li>Math.round() 并不是完全的四舍五入，在负的点5的时候，退一位 eg：Math.round(-5.5) return -5 </li>
</ul>
<h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4><p>setInterval ，间隔时间重复执行；clearInterval 取消计时器</p>
<ul>
<li>setInterval 运行过程中只取一次值，无法更改</li>
<li>setInterval 的返回值是它的唯一标识（从1开始），即多次实例化后的打印输入会累加</li>
<li>clearInterval() 参数是 Interval 的唯一标识</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 参数1，执行的函数；参数2，间隔多少毫秒执行一次</span>

<span class="token keyword">var</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment">// 这里可以写成‘test()',但是不可以直接写test()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="延迟器"><a href="#延迟器" class="headerlink" title="延迟器"></a>延迟器</h4><p>setTimeout，延迟特定的毫秒时间执行一次函数；clearTimeout，取消延迟器</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qq_29850249/article/details/110500006">(8条消息) JavaScript 中堆和栈的区别_you_wne的博客-CSDN博客_js堆和栈的区别</a>  </p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端设计模式</title>
    <url>/archives/aba4a302.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MVC，MVP和MVVM都是常见的软件架构设计模式，它通过分离关注点来改进代码的组织方式，一种架构模式往往使用了多种设计模式。</p>
<p>MVC表示“模型-视图-控制器”，MVP表示“模型-视图-演示者”，MVVM表示“模型-视图-视图模型”；MVP、MVVM都是由MVC衍生出的。</p>
<span id="more"></span>

<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><ul>
<li>Model: 模型（对数据的劫持监听、用于封装与数据相关的处理方法）数据管理</li>
<li>View: 视图（模板的自定义与保存，渲染页面）渲染管理</li>
<li>Controller: 控制器（M和V之间的连接器，用于控制应用程序的流程，及页面的业务逻辑）事件绑定处理管理</li>
</ul>
<p>MVC模式的特点在于实现关注点分离，应用程序中的数据模型与业务和展示逻辑解耦</p>
<p>缺点是 各个层都有各自的驱动，只做了横向切割，任务分离不明显，仅仅将应用抽象，并未限制数据流。</p>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>MVVM是将“数据模型数据双向绑定”的思想作为核心，因此在View和Model之间没有联系，通过ViewModel进行交互；</p>
<p>Model和ViewModel之间的交互是双向的，因此视图的数据的变化会同时修改数据源，而数据源数据的变化也会立即反应到View上</p>
<p>MVVM就是为了解决MVC的驱动不集中，更加解决了视图与模型之间完全隔离开的关系</p>
<p>vm，viewmodel，收集依赖、模板编译、数据劫持</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何考虑性能优化</title>
    <url>/archives/fcbdffd2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这篇文章主要介绍性能优化相关的知识点，包括CDN、懒加载、回流重绘、节流防抖等。</p>
<p><img data-src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20230120105821728.png" alt="image-20230120105821728"></p>
<span id="more"></span>

<h1 id="如何考虑性能优化"><a href="#如何考虑性能优化" class="headerlink" title="如何考虑性能优化"></a>如何考虑性能优化</h1><h2 id="如何实现Vue项目中的性能优化"><a href="#如何实现Vue项目中的性能优化" class="headerlink" title="如何实现Vue项目中的性能优化"></a>如何实现Vue项目中的性能优化</h2><h3 id="编码阶段"><a href="#编码阶段" class="headerlink" title="编码阶段"></a>编码阶段</h3><ul>
<li>采用 keep-alive 缓存组件</li>
<li>使用路由懒加载、异步组件</li>
<li>第三方模块按需导入</li>
<li>图片懒加载</li>
<li>防抖、节流</li>
</ul>
<h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><ul>
<li>预渲染</li>
<li>服务端渲染 <em>SSR</em></li>
</ul>
<p>预渲染 是一种构建阶段生成匹配预渲染路径的HTML文件方式，来提高网站在搜索引擎中的自然排名的方法。 好处是可以改善网页的SEO，而不需要服务器端渲染，缺点是为每个预渲染的路由生成一个HTML文件，可能会增减构建时间和文件大小。</p>
<p>两者的区别：</p>
<ul>
<li>预渲染是在构建阶段生成静态 HTML 文件，而 SSR 是在服务器端动态编译 HTML。</li>
<li>预渲染适合改善少数营销页面的 SEO，而 SSR 适合改善动态数据的 SEO。</li>
<li>预渲染的优点是简单易用，不需要服务器端资源，而 SSR 的优点是可以实现更快的首屏渲染，更好的用户体验和更高的转化率。</li>
<li>预渲染的缺点是需要为每个路由生成一个 HTML 文件，可能增加构建时间和文件大小，而 SSR 的缺点是需要更多的服务器端资源，可能增加服务器端压力和复杂度。</li>
</ul>
<h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><ul>
<li> 压缩代码</li>
<li> <code>Tree Shaking/Scope Hoisting</code></li>
<li>Tree Shaking是一种消除未使用代码的过程，确定哪些代码被引用，哪些代码没有被引用。减少最终打包的文件大小，使其更快地下载和解析。</li>
<li>Scope Hoisting是一种将多个JavaScript模块合并到一个作用域的过程，可以通过将跨模块的引用变成静态而不是动态的属性查找，提高运行时的性能</li>
<li>使用 <em>cdn</em> 加载第三方模块</li>
</ul>
<h3 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h3><ul>
<li><p>骨架屏</p>
<p>是一种在网页内容加载之前，显示网页的基本结构和样式的技术，它可以让用户感觉网页加载更快，减少用户的等待感和焦虑感。</p>
</li>
<li><p>PWA</p>
<p>是一种使用网页技术，但可以安装和运行在所有设备上，提供类似于原生应用的体验的技术，它可以让网页更适应不同的设备和网络环境，更方便用户的访问和使用。</p>
</li>
</ul>
<h2 id="SPA应用如何优化首屏加载速度"><a href="#SPA应用如何优化首屏加载速度" class="headerlink" title="SPA应用如何优化首屏加载速度"></a>SPA应用如何优化首屏加载速度</h2><ul>
<li><p>请求优化， 将第三方的类库放到 CDN 上，能够大幅度减少生产环境中的项目体积。CDN可以实时根据流量、节点连接、负载状况以及到用户的距离、响应时间等综合因素 将请求重新导向最合适的服务节点中。</p>
</li>
<li><p>缓存：将长时间不会改变的第三方类库或者静态资源设置为强缓存，将 max-age 设置为一个非常长的时间，再将访问路径加上哈希达到哈希值变了以后保证获取到最新资源，好的缓存策略有助于减轻服务器的压力，并且显著的提升用户的体验</p>
</li>
<li><p>gzip：开启 gzip 压缩，通常开启 gzip 压缩能够有效的缩小传输资源的大小</p>
</li>
<li><p>http2</p>
<p>如果系统首屏同一时间需要加载的静态资源非常多，但是浏览器对同域名的 tcp 连接数量是有限制的(chrome 为 6 个)超过规定数量的 tcp 连接，则必须要等到之前的请求收到响应后才能继续发送，而 http2 则可以在多个 tcp 连接中并发多个请求没有限制，在一些网络较差的环境开启 http2 性能提升尤为明显。</p>
</li>
<li><p>使用路由懒加载， import 动态加载页面组件</p>
</li>
<li><p>预渲染</p>
</li>
<li><p>按需加载第三方库</p>
</li>
<li><p>图片懒加载</p>
</li>
<li><p>使用 svg 图标</p>
</li>
<li><p>选用合适的图片格式，做图片压缩，在不影响使用的情况下压缩图片质量</p>
</li>
</ul>
<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h2 id="CDN的概念"><a href="#CDN的概念" class="headerlink" title="CDN的概念"></a>CDN的概念</h2><p>CDN, content delivery network，内容分发网络，又称内容传送网络。</p>
<p>当我们在开发网站的时候，经常会有很多的图片、视频、动态效果需要部署，这些样式的引入通常有两种方式，</p>
<p>一是直接放在项目内部，再部署到公网上，这样通常会严重影响网站访问速度，<a href="https://ychch.top/archives/6ec3525c.html">见我上篇文章–如何提升网站加载速度</a></p>
<p>第二种做法就是 使用CDN来加速网站里特别消耗资源的文件。那CDN到底是什么呢？</p>
<p>有个很形象的网上购物比喻可以帮助理解：</p>
<p>访问没有使用CDN的网站，就相当于在<strong>淘宝</strong>下单了一件货源在深圳的商品，不管你是从哪里下单的，河南、湖北、甘肃 or 西藏，商家都会从深圳统一发货，那么到货的时间长短不一了，一般来说时间都要三四五天的样子</p>
<p>访问使用了CDN的网站，就相当于在<strong>京东自营</strong>下单了一件商品。</p>
<p>我们都知道，京东自营的物流是很牛的，淘宝是将物流外包给了很多小公司，所以货物的中转次数很多，很复杂，但是<strong>京东搭建了属于自己的一整套物流体系</strong>，它会根据你的收货地址去找离收货地址最近的物流仓库，然后直接<strong>就近发货</strong>。比如你在甘肃下的单，西安的仓库里有你需要的货物，京东就直接从西安给你发过来了。</p>
<p><strong>CDN就相当于网络资源世界里的京东仓储系统</strong></p>
<p>CDN的全称是, content delivery network，内容分发网络。顾名思义，就是专门分发资源的网络。</p>
<p>CDN系统能够实时根<strong>据网络流量和各节点的连接、负载情况、到用户的距离和响应时间等综合信息</strong>将用户的资源请求<strong>重新导向</strong>离用户最近的服务节点上，其目的就是让用户就近取得所需内容，解决网络拥挤的问题，提高用户的访问速度。</p>
<p>下图就很好的说明了有无CDN时的访问情况</p>
<img data-src="https://s2.loli.net/2022/03/18/RZMnhbHLmjX9JKz.png" style="zoom:80%;" />

<h2 id="CDN组成"><a href="#CDN组成" class="headerlink" title="CDN组成"></a>CDN组成</h2><p>了解了CDN的作用之后，再往下继续延伸</p>
<p>CDN作为内容分发的服务器，就自然有两点问题，一是内容从何处来，二是它能分发给多少用户</p>
<p>典型的CDN系统由下面三个部分组成：</p>
<ul>
<li><strong>分发服务系统：</strong>最基本的工作单元就是Cache设备，cache负责最终用户的访问请求，<strong>把缓存在本地的内容快速地提供给用户</strong>。同时还负责<strong>与源站点进行内容同步</strong>，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cache设备的数量、规模、总服务能力是衡量一个CDN系统服务能力的最基本的指标。</li>
<li><strong>负载均衡系统：</strong>主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（GSLB）和本地负载均衡（SLB）。<strong>全局负载均衡</strong>主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的cache的物理位置。<strong>本地负载均衡</strong>主要负责节点内部的设备负载均衡</li>
<li><strong>运营管理系统：</strong>运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。</li>
</ul>
<h2 id="CDN工作原理"><a href="#CDN工作原理" class="headerlink" title="CDN工作原理"></a>CDN工作原理</h2><p>用户未使用CDN缓存资源的过程：</p>
<ol>
<li>浏览器通过DNS对域名进行解析（DNS解析过程），依次得到此域名对应的IP地址</li>
<li>浏览器根据得到的IP地址，向域名的服务主机发送数据请求</li>
<li>服务器向浏览器返回响应数据</li>
</ol>
<p>用户使用CDN缓存资源的过程：</p>
<ol>
<li>对于点击的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给CNAME指向的CDN专用的DNS服务器。</li>
<li>CND专用DNS服务器将CND的全局负载均衡设备IP地址返回给用户，用户向CDN的全局负载均衡设备发起数据请求</li>
<li>CDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</li>
<li>区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备</li>
<li>全局负载均衡设备把服务器的IP地址返回给用户，用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/12/30/67nrFjWZp3LwJD2.png" alt="用户使用CDN缓存资源的过程"></p>
<h2 id="CDN的好处"><a href="#CDN的好处" class="headerlink" title="CDN的好处"></a>CDN的好处</h2><p>除了加速的网站访问速度，CDN还有什么好处呢</p>
<ol>
<li>有利于搜索排名。换位想想，你愿意去访问一个加载特别慢的网站吗，你如果不愿意，那么这些搜索引擎自然就不会把你放在结果排名的前面</li>
<li>减少托管成本。</li>
</ol>
<p>（1）在性能方面，引入CDN的作用在于：</p>
<ul>
<li>用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</li>
<li>部分资源请求分配给了CDN，减少了服务器的负载</li>
</ul>
<p>（2）在安全方面，CDN有助于防御DDoS、MITM等网络攻击：</p>
<ul>
<li>针对DDoS：通过监控分析异常流量，限制其请求频率</li>
<li>针对MITM：从源服务器到 CDN 节点到 ISP（Internet Service Provider），全链路 HTTPS 通信</li>
</ul>
<p>除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1496434">资料1</a></li>
</ul>
<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。</p>
<p>在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。</p>
<h2 id="懒加载的好处"><a href="#懒加载的好处" class="headerlink" title="懒加载的好处"></a>懒加载的好处</h2><ul>
<li><strong>减少无用资源的加载</strong>：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>
<li><strong>提升用户体验</strong>: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>
<li><strong>防止加载过多图片而影响其他资源文件的加载</strong> ：会影响网站应用的正常使用</li>
</ul>
<h2 id="懒加载与预加载的区别"><a href="#懒加载与预加载的区别" class="headerlink" title="懒加载与预加载的区别"></a>懒加载与预加载的区别</h2><p>这两种方式都是提高网页性能的方式。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p>
<ul>
<li><strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载</strong>，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。</li>
<li><strong>预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。</strong>通过预加载能够减少用户的等待时间，提高用户的体验。预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。</li>
</ul>
<h2 id="懒加载的实现原理"><a href="#懒加载的实现原理" class="headerlink" title="懒加载的实现原理"></a>懒加载的实现原理</h2><p>图片的加载是由<code>src</code>引起的，当对<code>src</code>赋值时，浏览器就会请求图片资源。根据这个原理，我们使用HTML5 的<code>data-xxx</code>属性来储存图片的路径，在需要加载图片的时候，将<code>data-xxx</code>中图片的路径赋值给<code>src</code>，这样就实现了图片的按需加载，即懒加载。</p>
<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>
<h1 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能</p>
<p>为了优化体验，限制调用次数，可以采用 <strong>防抖（debounce）</strong> 和 <strong>节流（throttle）</strong> 的方式来减少调用频率</p>
<p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p>
<p><strong>适⽤场景：</strong> </p>
<ul>
<li>拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动 </li>
<li>缩放场景：监控浏览器resize </li>
<li>动画场景：避免短时间内多次触发动画引起性能问题 </li>
</ul>
<p>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>
<p><strong>适⽤场景：</strong> </p>
<ul>
<li>按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次 </li>
<li>服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">500</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> preTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> newTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newTime <span class="token operator">-</span> preTime <span class="token operator">>=</span> delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
            preTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">throttle2</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay<span class="token operator">=</span><span class="token number">500</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>
                timer <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        <span class="token keyword">let</span> args <span class="token operator">=</span> arguments
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
            <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h1><p>小图用base64格式；</p>
<p>选择正确的图片格式：</p>
<ul>
<li><p>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p>
</li>
<li><p>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p>
</li>
<li><p>照片使用 JPEG</p>
</li>
</ul>
<h2 id="常见的图片格式及使用场景"><a href="#常见的图片格式及使用场景" class="headerlink" title="常见的图片格式及使用场景"></a>常见的图片格式及使用场景</h2><ol>
<li><p><strong>BMP</strong>，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</p>
</li>
<li><p><strong>GIF</strong>是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。<strong>文件小，支持动画以及透明</strong>的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</p>
</li>
<li><p><strong>JPEG</strong>是有损的、采用直接色的点阵图。优点是采用了直接色，更丰富的色彩适合用来存储照片，不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</p>
</li>
<li><p><strong>PNG-8</strong>是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</p>
</li>
<li><p><strong>PNG-24</strong>是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</p>
</li>
<li><p><strong>SVG</strong>是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。SVG图片在放大时，不会失真，非常适合用来绘制Logo、Icon等</p>
</li>
<li><p><strong>WebP</strong>支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的。相同质量的图片，WebP具有更小的文件体积。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</p>
<ul>
<li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li>
<li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li>
<li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>组件库开发技巧</title>
    <url>/archives/590dfd2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>插件就是一个store、一个组件库、接受一个vue参数</p>
<span id="more"></span>

<h1 id="组件库开发"><a href="#组件库开发" class="headerlink" title="组件库开发"></a>组件库开发</h1><p>在组件库的main.js中 定义一个UI，给其一个install方法，导出出去</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token constant">UI</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Carousel<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Carousel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">UI</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在使用中：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>
<span class="token keyword">import</span> <span class="token constant">UI</span> <span class="token keyword">from</span> <span class="token string">'@/libs/ui'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token constant">UI</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h1 id="递归组件的开发技巧"><a href="#递归组件的开发技巧" class="headerlink" title="递归组件的开发技巧"></a>递归组件的开发技巧</h1><p>在无限多级菜单案例中，需要用到 递归组件 的设计。</p>
<p>也很简单，在递归组件中 调用自己，传入所需要的参数即可。</p>
<p>在下面这个案例中，ReSubMenu是递归组件，自己使用自己时，传入所需要的data属性即可。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>sub<span class="token operator">-</span>menu<span class="token operator">></span>
        <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"c of data.children"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>menu<span class="token operator">-</span>item 
				v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!c.children"</span>
                <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"c.id"</span>
            <span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">-</span>item<span class="token operator">></span>
            <span class="token operator">&lt;</span>re<span class="token operator">-</span>sub<span class="token operator">-</span>menu
                v<span class="token operator">-</span><span class="token keyword">else</span>
                <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"c.id"</span>
                <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"c"</span>
            <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>re<span class="token operator">-</span>sub<span class="token operator">-</span>menu<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>sub<span class="token operator">-</span>menu<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ReSubMenu'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> Object
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>网络基础知识</title>
    <url>/archives/2fa9840e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://s2.loli.net/2022/12/14/Op8ZBRauxcdk7qw.png"></p>
<span id="more"></span>

<h1 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h1><p><img data-src="https://s2.loli.net/2022/12/14/ml2YRGZ3D7WHLEx.png" alt="计算机网络结构"></p>
<ul>
<li><code>OSI体系结构</code>: 概念清楚，理论也比较完整，但复杂不实用。</li>
<li><code>TCP/IP体系结构</code>:TCP/IP是一个四层体系结构，得到了广泛的运用。</li>
<li><code>五层体系结构</code>:  折中<code>OSI体系结构</code>和<code>TCP/IP体系结构</code>，综合二者的优点，这样既简洁，又能将概念讲清楚。</li>
</ul>
<h2 id="五层网络体系结构"><a href="#五层网络体系结构" class="headerlink" title="五层网络体系结构"></a><strong>五层网络体系结构</strong></h2><p><code>应用层</code>：应用层是网络协议的最高层，主要任务<strong>通过进程间的交互完成特定网络应用</strong>。应用层协议定义的是<code>应用程序（进程）间通信和交互的规则</code>。如 DNS、HTTP、SMTP…</p>
<p><code>运输层</code>：有时也译为传输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</p>
<ul>
<li>传输控制协议 (Transmission Control Protocol，TCP)：提供<strong>面向连接的</strong>、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>
<li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>
</ul>
<p><code>网络层</code>：网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。在发送数据时，网络层把运输层产生的报文段或用户数据封装成<code>分组</code>或 <code>包</code>进行传送。</p>
<p><code>数据链路层</code>：简称为<code>链路层</code>。在两个相邻节点传输数据时，将网络层交下来的IP数据报<code>组装成帧</code>，在两个相邻节点之间的链路上传送<code>帧</code>。</p>
<p><code>物理层</code>：保证数据可以在各种物理媒介上进行传输</p>
<p><img data-src="https://s2.loli.net/2022/12/14/6xzDZsWJcOkyj12.webp" alt="三层模型对比"></p>
<h1 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h1><p>TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族。</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP，<strong>transmission control protocol 传输控制协议</strong>，</p>
<p>一种面向连接的，可靠的，基于字节流的传输层通信协议，数据传输单位是 报文段，建立连接的过程就是三次握手。</p>
<ol>
<li>面向连接。三次握手 建立可靠连接</li>
<li>仅支持单播传输。只能1对1</li>
<li>面向字节流</li>
<li>可靠传输。TCP给每个包一个序号，也保证了按序接收。接收端实体对已成功收到的字节发回一个相应的确认(ACK)；在合理的往返时延(RTT)内未收到确认，那么对应的数据将会被重传</li>
<li>提供拥塞控制。当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</li>
</ol>
<p><strong>TCP应用场景：</strong> 效率要求相对低，但对准确性要求相对高的场景。文件传输、接受邮件、远程登录。</p>
<p><img data-src="https://s2.loli.net/2022/10/14/kGpiKSqWLAdHolu.png" alt="image-20221014142705409"></p>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><strong>user data protocol 用户数据报协议</strong>，喇叭喊人，数据传输单位是 用户数据报。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<ol>
<li><strong>面向无连接</strong>。不需要三次握手建立连接，想发数据随时发，不会对数据报文进行拆分和拼接操作</li>
<li><strong>有单播，多播，广播的功能</strong>。</li>
<li><strong>面向报文</strong>。UDP对应用层交下来的报文，既不合并，也不拆分。因此，应用程序必须选择合适大小的报文</li>
<li><strong>不可靠性</strong>。不会备份数据，不关心对方是否已经正确接收</li>
<li><strong>头部开销小，传输数据报文时是很高效</strong>。UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多。在传输数据报文时是很高效的。</li>
</ol>
<p><strong>UDP应用场景：</strong> 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话、广播通信（广播、多播）。</p>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><table>
<thead>
<tr>
<th></th>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody><tr>
<td>是否连接</td>
<td>无连接</td>
<td>面向连接</td>
</tr>
<tr>
<td>是否可靠</td>
<td>不可靠传输，不使用流量控制和拥塞控制</td>
<td>可靠传输（数据顺序和正确性），使用流量控制和拥塞控制</td>
</tr>
<tr>
<td>连接对象个数</td>
<td>支持一对一，一对多，多对一和多对多交互通信</td>
<td>只能是一对一通信</td>
</tr>
<tr>
<td>传输方式</td>
<td>面向报文</td>
<td>面向字节流</td>
</tr>
<tr>
<td>首部开销</td>
<td>首部开销小，仅8字节</td>
<td>首部最小20字节，最大60字节</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于实时应用，例如视频会议、直播</td>
<td>适用于要求可靠传输的应用，例如文件传输</td>
</tr>
</tbody></table>
<p>字节就是散乱的数据 报文就是添加了标记，封装后的数据</p>
<h2 id="UDP协议为什么不可靠"><a href="#UDP协议为什么不可靠" class="headerlink" title="UDP协议为什么不可靠"></a>UDP协议为什么不可靠</h2><ol>
<li>不保证消息交付</li>
<li>不保证交付顺序</li>
<li>不跟踪连接状态</li>
<li>不进行拥塞控制</li>
</ol>
<h2 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230125203116958.webp" alt="image-20230125203116958"></p>
<p>三次握手，指建立一个TCP连接时，需要客户端和服务器总共发送3个包。主要作用就是为了<strong>确认双方的接收能力和发送能力是否正常</strong>、同步连接双方的序列号和确认号，交换TCP窗口大小信息  为后面的可靠性传送做准备。</p>
<ul>
<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 seq = x ，此时客户端处于 SYN_SEND 状态。</li>
<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 seq = y。同时会把客户端的 seq  + 1 即 x + 1作为ACK 的值，表示已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>
<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 seq  + 1 即 y + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>
</ul>
<p><strong>那为什么要三次握手呢？两次不行吗？</strong></p>
<ul>
<li>为了确认双方的接收能力和发送能力都正常</li>
<li>如果是用两次握手，则会出现下面这种情况：</li>
</ul>
<p><strong>为了防止已失效的连接请求报文段突然又传送到了服务端，造成双方的不一致，导致资源的浪费</strong></p>
<p>客户端发出一个SYN报文段，由于阻塞或者其他原因在网络中滞留，以至于客户端认为丢包了（其实并没有丢），于是重新发出一个SYN报文段，假设这一次顺利完成了，那么双方建立连接。</p>
<p>这看起来似乎没什么问题，但网络中有一个隐患，就是那个还在网络中传输的SYN报文段，如果这个SYN在连接期间被服务端收到了，那服务端只会无视它，这样就万事大吉了，<strong>但如果是在连接释放之后被收到呢？</strong>此时服务端认为有人向他发出连接请求，于是响应一个SYNACK回去，如果采用两次握手的话，那么服务器认为此时连接已经建立好了。但是当客户端收到这个SYNACK时，如果他并没有发起连接，那么他不会理睬这个SYNACK，就当没事发生过（如果客户端此时正好发起连接，那其实他也不会理睬这个SYNACK，因为确认号不对啊。）。那问题就大了，这时候服务器以为连接好了，向客户端发送数据，而客户端处于CLOSED状态，会丢弃这些包，这样就很浪费了。并且还有一个尴尬的问题，就是这个时候当客户端打算发起连接时，服务端又不理睬了，在这里尬这，他们就别想互发数据了。当然这些问题似乎不是不可解决的，当客户端发现服务端老是向自己发数据，而自己总是丢弃，可能会向服务端发一个RST（报文段的RST标记号为1），强制服务端关闭连接。但资源总归是浪费了一会了。而用三次握手就不会出现这样的问题。</p>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230125204137979.webp" alt="image-20230125204137979"></p>
<p>男：“我觉得我们可能不太合适，我们分手吧，我不会再主动联系你。”（发出关闭连接的请求）<br>女：“你要分手，可以，但是我还没做好心理准备，可以让我再跟你说多几句话吗？”（发出ACK报文段）<br>（此后男生不会再主动联系女生，而女生还会联系男生）<br>女：“好，我该说的话都说完了，我们好聚好散吧。”（发送关闭连接的报文段）<br>男：“再见。”（发出ACK报文段，让女生知道我已经收到了）<br>（女生收到后，放下了男生，即释放了资源）<br>（男生在等待一段时间后，女生没有再回信，男生就默认女生已经收到最后的告别信了，于是放下女生，即释放了资源，从此不相往来（除非复合，即重新建立连接））</p>
<p>不开玩笑：</p>
<ul>
<li><strong>第一次挥手</strong>：若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>
<li><strong>第二次挥手</strong>：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明<strong>客户端到服务端的连接已经释放</strong>，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，<strong>但是服务端仍旧可以发送数据给客户端</strong>。</li>
<li><strong>第三次挥手</strong>：服务端如果此时还有没发完的数据会继续发送，完毕后会<strong>向客户端发送连接释放请求</strong>，然后服务端便进入 LAST-ACK 状态。</li>
<li><strong>第四次挥手</strong>：客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>
</ul>
<p>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>
<h4 id="那为什么需要四次挥手呢？"><a href="#那为什么需要四次挥手呢？" class="headerlink" title="那为什么需要四次挥手呢？"></a>那为什么需要四次挥手呢？</h4><p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。</p>
<h2 id="TCP的重传机制"><a href="#TCP的重传机制" class="headerlink" title="TCP的重传机制"></a>TCP的重传机制</h2><p>TCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该数据进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>
<h2 id="TCP的拥塞控制机制"><a href="#TCP的拥塞控制机制" class="headerlink" title="TCP的拥塞控制机制"></a>TCP的拥塞控制机制</h2><p>TCP的拥塞控制机制主要是以下四种机制：慢启动、拥塞避免、快速重传、快速恢复</p>
<h3 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h3><p>开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小</p>
<h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</p>
<h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><p>接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要<strong>连续收到三个重复确认</strong>就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p>
<p>由于不需要等待设置的重传计时器到期，能尽早重传，能提高整个网络的吞吐量</p>
<h3 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h3><h2 id="TCP的流量控制机制"><a href="#TCP的流量控制机制" class="headerlink" title="TCP的流量控制机制"></a>TCP的流量控制机制</h2><p>流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的<strong>滑动窗口</strong>进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>
<h2 id="TCP的可靠传输机制"><a href="#TCP的可靠传输机制" class="headerlink" title="TCP的可靠传输机制"></a>TCP的可靠传输机制</h2><p>基于连续 ARQ 协议和滑动窗口协议。</p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="常见的HTTP请求方法"><a href="#常见的HTTP请求方法" class="headerlink" title="常见的HTTP请求方法"></a>常见的HTTP请求方法</h2><ul>
<li>GET: 向服务器获取数据；</li>
<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>
<li>PUT：上传文件，更新数据；</li>
<li>DELETE：删除服务器上的对象；</li>
<li>HEAD：获取报文首部，与GET相比，不返回报文主体部分；</li>
<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>
<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</li>
<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</li>
</ul>
<h2 id="GET和POST的请求"><a href="#GET和POST的请求" class="headerlink" title="GET和POST的请求"></a>GET和POST的请求</h2><p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p>
<ul>
<li><strong>应用场景：</strong>GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>
<li><strong>是否缓存：</strong>因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li>
<li><strong>发送的报文格式：</strong>Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li>
<li><strong>安全性：</strong>Get 请求将请求的参数放入 url 中向服务器发送，不太安全，因为请求的 url 会被保留在历史记录中。</li>
<li><strong>请求长度：</strong>浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。</li>
<li><strong>参数类型：</strong>post 的参数传递支持更多的数据类型。</li>
</ul>
<blockquote>
<p><strong>幂等</strong>的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> ， <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD"><code>HEAD</code></a> ， <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT"><code>PUT</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE"><code>DELETE</code></a> 等方法都是<strong>幂等</strong>的，而 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 方法不是</p>
</blockquote>
<h2 id="POST和PUT请求的区别"><a href="#POST和PUT请求的区别" class="headerlink" title="POST和PUT请求的区别"></a>POST和PUT请求的区别</h2><ul>
<li>PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为是<strong>更新数据</strong>）</li>
<li>POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>
</ul>
<h2 id="HTTP-1-0-、1-1-和-2-0"><a href="#HTTP-1-0-、1-1-和-2-0" class="headerlink" title="HTTP 1.0 、1.1 和  2.0"></a>HTTP 1.0 、1.1 和  2.0</h2><h3 id="HTTP-1-0和-HTTP-1-1-有以下区别"><a href="#HTTP-1-0和-HTTP-1-1-有以下区别" class="headerlink" title="HTTP 1.0和 HTTP 1.1 有以下区别"></a><strong>HTTP 1.0和 HTTP 1.1</strong> <strong>有以下区别</strong></h3><ul>
<li><strong>连接方面</strong>，http1.0 使用非持久连接， http1.1 使用持久连接，多个 http 请求复用同一个 TCP 连接。</li>
<li><strong>资源请求方面</strong>。http1.0 中，服务器<strong>传输整个对象</strong>，<strong>不支持断点续传</strong>功能，<strong>不支持传输部分</strong>，浪费带宽；http1.1 在请求头引入了 range 头域，<strong>它允许只请求资源的某个部分</strong>，即返回码是 206（Partial Content）</li>
<li><strong>缓存方面</strong>，http1.0 缓存头 If-Modified-Since、Expires ，http1.1 则引入了<strong>更多的缓存头来控制缓存策略</strong>，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等</li>
<li>http1.1 中<strong>新增了 host 字段指定服务器的域名</strong>。随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此可以将请求发往到同一台服务器上的不同网站。</li>
<li>http1.1 新增了很多<strong>请求方法</strong>，如 PUT、HEAD、OPTIONS 等。</li>
</ul>
<h3 id="管道网络传输和队头堵塞"><a href="#管道网络传输和队头堵塞" class="headerlink" title="管道网络传输和队头堵塞"></a><strong>管道网络传输和队头堵塞</strong></h3><p>HTTP/1.1 采用了长连接使得管道（pipeline）网络传输成为可能。</p>
<p>在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但还是得按顺序，如果前面的回应特别慢，后面就会堵。这称为队头堵塞。</p>
<p><strong>队头堵塞的解决方案：</strong></p>
<p>（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。</p>
<p>（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</p>
<p><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230125205025638.webp"></p>
<h3 id="HTTP-1-1-和-HTTP-2-0-的区别"><a href="#HTTP-1-1-和-HTTP-2-0-的区别" class="headerlink" title="HTTP 1.1 和 HTTP 2.0 的区别"></a>HTTP 1.1 和 HTTP 2.0 的区别</h3><ul>
<li><p><strong>二进制协议</strong>：在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个<strong>彻底的二进制协议</strong>，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。</p>
</li>
<li><p><strong>多路复用：</strong>HTTP/2 仍然复用 TCP 连接，但是实现了多路复用。在一个连接里，客户端和服务器都可以<strong>不用按照顺序同时发送多个</strong>请求或回应，这样就避免了”队头堵塞”的问题。</p>
</li>
<li><p><strong>标记数据包：</strong> HTTP/2 的数据包是不按顺序发送的，必须要对数据包做标记，指出它属于哪个请求。</p>
<p>HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。</p>
</li>
<li><p><strong>头信息压缩：</strong>HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息，浪费带宽，影响速度。HTTP/2 引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</p>
</li>
<li><p><strong>服务器推送：</strong>HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，可以减少一些延迟时间。</p>
</li>
<li><p><a href="https://www.cnblogs.com/frankyou/p/6145485.html">HTTP 2.0 增加了对 TLS 加密的支持，提高了安全性和兼容性</a></p>
<p>HTTP/2  下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</p>
</li>
</ul>
<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>HTTP1.0 中默认是在每次请求/应答完成后立即断开连接，这就是<strong>短连接</strong>。</p>
<p>当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，这就是<strong>长连接</strong>。</p>
<ul>
<li>HTTP1.0版本是默认没有Keep-alive，想要保持连接，必须手动配置发送<code>Connection: keep-alive</code>，想要断开，发送<code>Connection:close</code></li>
<li>HTTP1.1 规定了默认保持长连接</li>
</ul>
<h4 id="如何建立Keep-Alive"><a href="#如何建立Keep-Alive" class="headerlink" title="如何建立Keep-Alive"></a>如何建立Keep-Alive</h4><ul>
<li>客户端向服务器在发送请求报文同时在首部添加发送<code>Connection: keep-alive</code>字段</li>
<li>服务器收到请求并处理 Connection字段，并回送<code>Connection:Keep-Alive</code>字段给客户端</li>
<li>客户端接收到Connection字段，Keep-Alive连接建立成功</li>
</ul>
<p>断开也是同理，字段换成<code>Connection:close</code></p>
<p><strong>Keep-Alive可以减少延迟，降低拥塞等优点</strong>，但值得住的是，长时间的Tcp连接容易导致系统资源无效占用，<strong>浪费系统资源</strong></p>
<h3 id="HTTP如何加载页面的多张图片？"><a href="#HTTP如何加载页面的多张图片？" class="headerlink" title="HTTP如何加载页面的多张图片？"></a>HTTP如何加载页面的多张图片？</h3><ul>
<li>在<code>HTTP 1</code>下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用<strong>多域名部署</strong>解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</li>
<li>在<code>HTTP 2</code>下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。</li>
</ul>
<h3 id="HTTP2的头部压缩算法HPACK"><a href="#HTTP2的头部压缩算法HPACK" class="headerlink" title="HTTP2的头部压缩算法HPACK"></a>HTTP2的头部压缩算法HPACK</h3><p>HPACK算法：在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</p>
<ul>
<li>静态字典：由 header 字段的预定义静态列表组成。</li>
<li>动态字典：以<strong>先进先出</strong>的顺序维护的 header 字段列表</li>
<li>压缩算法：<code>Huffman哈夫曼</code> 编码</li>
</ul>
<p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p>
<p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1604070508591-32d79893-7e98-40c8-b779-ffb6da42cd1b.png" alt="头部压缩算法"></p>
<h2 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h2><p>HTTP请求报文由4部分组成: 请求⾏ 、请求头部 、空⾏、请求体 </p>
<img data-src="https://s2.loli.net/2022/12/08/Rg5AaQuisDjmebS.png" alt="HTTP请求报文组成" style="zoom:50%;" />

<p>（1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 </p>
<p>（2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔  </p>
<ul>
<li>User-Agent：产⽣请求的浏览器类型。 </li>
<li>Accept：客户端可识别的内容类型列表。 </li>
<li>Host：请求的主机名，<a href="http://www.example.com./">www.example.com。</a> </li>
</ul>
<p>（3）请求体: post put等请求携带的数据 </p>
<h2 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h2><p>响应报⽂由4部分组成: 响应⾏、 响应头、 空⾏、 响应体 </p>
<img data-src="https://cdn.nlark.com/yuque/0/2021/png/1500604/1615907658281-b3a51c98-db27-45be-9b0c-fb2c7665b015.png" alt="HTTP响应报文" style="zoom: 50%;" />

<ul>
<li>响应⾏：由<strong>网络协议版本，状态码和状态码的原因短语</strong>组成，例如 HTTP/1.1 200 OK 。 </li>
<li>响应头：响应部⾸组成 </li>
<li>响应体：服务器响应的数据 </li>
</ul>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>状态码的类别：</p>
<table>
<thead>
<tr>
<th><strong>类别</strong></th>
<th>原因</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>Informational(信息性状态码)</td>
<td>接受的请求正在处理</td>
</tr>
<tr>
<td>2xx</td>
<td>Success(成功状态码)</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>Redirection(重定向状态码)</td>
<td>需要进行附加操作一完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>Client Error (客户端错误状态码)</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>Server Error(服务器错误状态码)</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<p><strong>2XX 成功</strong> 请求被正常处理了</p>
<ul>
<li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li>
<li>204 No content，表示请求成功，但响应报文不含实体的主体部分。一般在服务器端不需要往客户端发送内容时使用。</li>
<li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li>
<li>206 Partial Content，进行范围请求。http1.0 还不支持；http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206</li>
</ul>
<p><strong>3XX 重定向</strong>，浏览器需要执行某些特殊的处理以正确处理请求</p>
<p><strong>302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307</strong></p>
<ul>
<li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li>
<li>302 found，临时性重定向，表示资源临时被分配了新的 URL<ul>
<li><strong>使用场景：</strong><ul>
<li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li>
<li>未登陆的用户访问用户中心重定向到登录页面。</li>
<li>访问404页面重新定向到首页。</li>
</ul>
</li>
</ul>
</li>
<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<ul>
<li>303 状态码通常作为 PUT 或 POST 操作的返回结果，请求重定向页面的方法要总是使用 GET</li>
</ul>
</li>
<li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端<strong>保持请求方法不变</strong>向新的地址发出请求</li>
<li>304 not modified，虽然被划分在 3XX 类别中，但是和重定向没有关系。<ul>
<li>不是一种错误，而是告诉客户端有缓存，直接用缓存数据。返回页面的只有头部信息，没有内容，这样提高了网页的性能。</li>
</ul>
</li>
</ul>
<p><strong>4XX 客户端错误</strong></p>
<ul>
<li>400 bad request，<strong>请求报文存在语法错误</strong></li>
<li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息，当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</li>
<li>403 forbidden，表示对请求资源的访问被服务器拒绝，不能再继续进行验证，该访问是永久禁止的</li>
<li>404 not found，表示在服务器上没有找到请求的资源</li>
</ul>
<p><strong>5XX 服务器错误</strong></p>
<ul>
<li>500 internal sever error，表示服务器端在执行错误</li>
<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>
<li>502 bad gateway，扮演网关或代理角色的服务器 接收的响应无效。</li>
<li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li>
</ul>
<h2 id="HTTP协议的优缺点"><a href="#HTTP协议的优缺点" class="headerlink" title="HTTP协议的优缺点"></a>HTTP协议的优缺点</h2><p>HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性</p>
<p>http的优缺点不是绝对的，在某些特定情况下显示出来的优缺点，有时优点可以是缺点，有时缺点可以是优点。</p>
<p>优点：</p>
<ol>
<li>灵活可扩展，可以传输各种数据，传输类型由 Content-Type 加以标记</li>
<li>可靠，http基于tcp/ip，是一个可靠的连接</li>
<li>无状态，每次的请求和答复都是独立的，没有任何联系，可以减轻服务器的负担，对服务器无要求，因此可以组成集群。</li>
</ol>
<p>缺点：</p>
<ol>
<li><strong>无状态：</strong>HTTP 是一个无状态的协议，如果后续处理需要前面的信息，则它必须重传。cookie技术为了解决这一问题</li>
<li><strong>明文传输：</strong>协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li>
</ol>
<h2 id="HTTP和HTTPS协议的区别"><a href="#HTTP和HTTPS协议的区别" class="headerlink" title="HTTP和HTTPS协议的区别"></a>HTTP和HTTPS协议的区别</h2><p>HTTP和HTTPS协议的主要区别如下：</p>
<ul>
<li><strong>安全性</strong>：HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；</li>
<li><strong>端口</strong>：HTTP协议端口是80，HTTPS协议端口是443；</li>
<li>HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。</li>
</ul>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>超文本传输安全协议（Hypertext Transfer Protocol Secure，HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
<p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685749-8cc21a1b-4277-42b1-aeed-18978c1cdb95.png?x-oss-process=image/resize,w_1500" alt="http与https的区别"></p>
<p>HTTP协议采用<strong>明文传输</strong>信息，存在<strong>信息窃听</strong>、<strong>信息篡改</strong>和<strong>信息劫持</strong>的风险，而协议TLS/SSL具有<strong>身份验证</strong>、<strong>信息加密</strong>和<strong>完整性校验</strong>的功能，可以避免此类问题发生。</p>
<h2 id="TLS-SSL的工作原理"><a href="#TLS-SSL的工作原理" class="headerlink" title="TLS/SSL的工作原理"></a>TLS/SSL的工作原理</h2><p><strong>TLS/SSL</strong>全称<strong>安全传输层协议</strong>（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</p>
<p>TLS/SSL的功能实现主要依赖三类基本算法：<strong>散列函数hash</strong>、<strong>对称加密</strong>、<strong>非对称加密</strong>。这三类算法的作用如下：</p>
<ul>
<li>散列函数：防止信息篡改，验证数据的完整性</li>
<li>对称加密算法：采用协商的秘钥对数据加密</li>
<li>非对称加密：实现身份认证和秘钥协商</li>
</ul>
<p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png" alt="TLS/SSL"></p>
<p>综合上述算法特点，TLS/SSL的工作方式就是<strong>客户端使用非对称加密与服务器进行通信</strong>，<strong>使用对称加密实现身份的验证</strong>。</p>
<h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><p>常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果。</p>
<p>用于防止信息篡改并验证数据的完整性。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。</p>
<p>双方使用同一个秘钥对数据进行加密和解密，但有一个问题，如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。</p>
<p>用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。</p>
<p>掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。</p>
<h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</p>
<p>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</p>
<p>这个方法最要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>
<p><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685765-ffc9a525-ccad-43f0-bb25-8e17281d68fe.png" alt="数字证书"></p>
<h2 id="HTTPS如何保证安全"><a href="#HTTPS如何保证安全" class="headerlink" title="HTTPS如何保证安全"></a>HTTPS如何保证安全</h2><ul>
<li>对称加密：简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题。；</li>
<li>⾮对称加密： 安全性更⾼，但是速度很慢，影响性能。 </li>
</ul>
<p>解决方案：</p>
<p>结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。 </p>
<p>这又带来一个中间人问题：</p>
<p>如果在客户端和服务器之间存在⼀个中间⼈,中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,就可以轻松解密所有数据。</p>
<p>这时候就需要第三方颁发CA，证明身份的身份，防⽌被中间⼈攻击。证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。</p>
<p>如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。 </p>
<p>数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。 </p>
<h2 id="HTTPS通信过程"><a href="#HTTPS通信过程" class="headerlink" title="HTTPS通信过程"></a>HTTPS通信过程</h2><ol>
<li>客户端向服务器发起请求，请求中包含使用的协议版本号、<strong>生成的一个随机数</strong>、以及客户端支持的加密方法。</li>
<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及<strong>一个服务器生成的随机数</strong>。</li>
<li><strong>客户端确认服务器证书有效后，生成一个新的随机数</strong>，并使用数字证书中的公钥，加密这个随机数，然后发给服务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</li>
<li>服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</li>
<li>客户端和服务器端根据约定的加密方法使用前面的<strong>三个随机数</strong>，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li>
</ol>
<h2 id="HTTPS特点"><a href="#HTTPS特点" class="headerlink" title="HTTPS特点"></a>HTTPS特点</h2><p>优点：<strong>身份验证</strong>、<strong>信息加密</strong>和<strong>完整性校验</strong> 记牢这三个优点就够了</p>
<p>缺点：</p>
<ol>
<li>HTTPS需要做服务器和客户端双方做加解密处理，耗费资源，过程复杂，增加页面的加载时间；</li>
<li>SSL证书是收费的，功能越强大的证书费用越高</li>
<li>SSL证书需要绑定IP，不能在同一个IP上绑定多个域名</li>
</ol>
<h1 id="在浏览器中输入-Google-com-后发生了什么？"><a href="#在浏览器中输入-Google-com-后发生了什么？" class="headerlink" title="在浏览器中输入 Google.com 后发生了什么？"></a>在浏览器中输入 Google.com 后发生了什么？</h1><ol>
<li><p><strong>解析URL：</strong>对URL进行解析，分析需要用的传输协议和请求资源的路径</p>
</li>
<li><p><strong>缓存判断：</strong>浏览器判断请求的资源是否在缓存中，如果在且没有失效，直接使用，否则向服务器发起请求</p>
</li>
<li><p><strong>DNS解析：</strong>获取URL域名的IP地址，首先会判断本地是否有该域名的IP地址缓存，如果有则使用，如果没有向本地DNS服务器发起请求。本地DNS服务器检查自己是否有缓存，如果没有向根域名服务器发起请求，得到负责的顶级域名服务器地址后，再向顶级域名服务器发请求，得到权威域名服务器的地址，再向权威域名服务器发起请求，最终得到域名的IP地址。本地DNS服务器将这个ip地址返回给用户。</p>
<p>用户向本地DNS服务器的请求属于递归请求；</p>
<p>本地DNS服务器向各个域名服务器的请求属于迭代请求</p>
</li>
<li><p><strong>获取MAC地址：</strong>当得到IP地址后，还需要知道目的主机MAC地址。因为应用层下发数据给传输层，TCP协议指定端口，下发给网络层，网络层制定好ip地址，下发给数据链路层，需要通信双方的MAC地址。</p>
<p>通过ip地址与子网掩码与运算，判断主机和请求主机是否在同一个子网中，如果在同一个子网里，使用APR协议获取目的主机的MAC地址，如果不在，请求转发网关，由它代为转发，此次也可以通过ARP协议获取网关MAC地址，此次目的主机的 MAC 地址应该为网关的地址；</p>
</li>
<li><p><strong>TCP三次握手</strong>，建立TCP连接</p>
</li>
<li><p><strong>HTTPS握手：</strong>如果是HTTPS协议，则存在TLS的四次握手过程</p>
</li>
<li><p><strong>返回数据：</strong>浏览器解析数据，开始渲染页面</p>
</li>
<li><p><strong>四次挥手</strong>，中断连接</p>
</li>
</ol>
<h1 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h1><p>URL代表资源的路径地址，而URI代表资源的名称。</p>
<p>URL类似于住址，它告诉你一种寻找目标的方式(在这个例子中，是通过街道地址找到一个人)。要知道，上述定义同时也是一个URI。  </p>
<p><strong>URL是URI的一个子集</strong>，告诉我们访问网络位置的方式</p>
<p><img data-src="https://s2.loli.net/2022/10/13/uwXdpFOnlC4D5rt.png"></p>
<h2 id="域名摸索之路"><a href="#域名摸索之路" class="headerlink" title="域名摸索之路"></a>域名摸索之路</h2><p>这里介绍一下我域名摸索之路：</p>
<p>我的ychch.top域名是在腾讯云买的，DNS服务器一开始就是用的 adonis.dnspod.net  hermosa.dnspod.net 这两个，我的博客是在github.io上写的，起初通过 www CNAME ychch.github.io 解析到github主页上，但是这么做国内用户不能直接访问，所以我就换到 vercel，vercel提供免费的网站托管，国内外都可以流畅访问，我就把 ychch.top 的DNS服务器改成了vercel中的ns1.vercel-dns.com，ns2.vercel-dns.com，这一步仍然需要在 腾讯云中域名管理系统中改。</p>
<p>改完之后的任何解析操作（增加二级域名…) 就到 <a href="https://vercel.com/dashboard/domains">vercel 控制台</a> 中去增改就好。</p>
<p><img data-src="https://s2.loli.net/2022/10/13/6inOkuYDK5FRg2P.png" alt="image-20221013222106500"></p>
<p><img data-src="https://s2.loli.net/2022/10/13/pC9ZO4gBdYjhIqR.png" alt="image-20221013222708371"></p>
<h1 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h1><p>DNS，domain name server，域名服务器，提供一种主机名到 IP 地址的转换服务。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。</p>
<p><strong>域名系统被设计成一个联机分布式的数据库系统，并采用客户/服务器模型</strong>.每个域名服务器不但能够进行一些域名到IP地址的解析，而且还必须具有连向其他域名服务器的信息。当自己不能进行域名到IP地址的转换时，能够知道到什么地方去找其他域名服务器。</p>
<h2 id="DNS同时使用TCP和UDP协议"><a href="#DNS同时使用TCP和UDP协议" class="headerlink" title="DNS同时使用TCP和UDP协议"></a>DNS同时使用TCP和UDP协议</h2><p><strong>DNS占用53号端口，同时使用TCP和UDP协议。</strong></p>
<p>（1）在区域传输的时候使用TCP协议</p>
<ul>
<li>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>
<li>TCP是一种可靠连接，保证了数据的准确性。</li>
</ul>
<p>（2）在域名解析的时候使用UDP协议</p>
<ul>
<li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器<strong>负载更低，响应更快</strong>。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li>
</ul>
<ul>
<li><code>根域名服务器</code>用来<code>管辖顶级域(如.com)</code>， 通常它并<strong>不直接</strong>把待查询的域名直接转换成IP地址，而是<code>告诉本地域名服务器</code>下一步应当找哪个<code>顶级域名服务器</code>进行查询。</li>
<li>顶级域名服务器：管理在该顶级域名服务器注册的所有二级域名。收到DNS查询请求时,就给出相应的回答，给不出来就找下一级的权限服务器</li>
<li><code>授权域名服务器</code>总能将其管辖的<code>主机名</code>转换为该主机的<code>IP地址</code>。</li>
<li>本地域名服务器对域名系统非常重要，一个大学，一个电线联通站点等等。主机发出的DNS查询发给本地域名服务器，再由本地域名服务器代为询问。</li>
</ul>
<p>在Windows系统中配置<code>“本地连接”</code>时，就需要填写DNS地址，这个地址就是<code>本地DNS (域名服务器)的地址</code></p>
<p><img data-src="https://s2.loli.net/2022/12/15/teDAv2bXn1LhSWc.png" alt="服务器"></p>
<h2 id="DNS完整的查询过程"><a href="#DNS完整的查询过程" class="headerlink" title="DNS完整的查询过程"></a>DNS完整的查询过程</h2><ol>
<li>在<strong>浏览器的缓存</strong>中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</li>
<li>将请求发送给<strong>本地DNS服务器（校园网，路由器等）</strong>，在本地域名服务器缓存中查询，如果找到返回结果，若找不到继续下一步</li>
<li>本地DNS服务器向<strong>根域名服务器(互联网的主目录）</strong>发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>
<li>本地DNS服务器向<strong>顶级域名服务器（.top顶级域名）</strong>发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>
<li>本地DNS服务器向**权限域名服务器（ychch.top)**发送请求，域名服务器返回对应的结果</li>
<li>本地DNS服务器将返回结果返回给浏览器，并保存缓存便于下次使用</li>
</ol>
<h2 id="迭代查询与递归查询"><a href="#迭代查询与递归查询" class="headerlink" title="迭代查询与递归查询"></a>迭代查询与递归查询</h2><p>实际上，DNS解析是一个包含迭代查询和递归查询的过程。</p>
<ul>
<li><strong>递归查询</strong>指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。</li>
<li><strong>迭代查询</strong>指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。</li>
</ul>
<p><strong><code>主机</code>向<code>本地域名服务器</code>的查询采用的是<code>递归</code>查询</strong>，**<code>本地域名服务器</code>向<code>根域名服务器</code>的查询采用<code>迭代</code>查询**</p>
<h2 id="DNS-记录和报文"><a href="#DNS-记录和报文" class="headerlink" title="DNS 记录和报文"></a>DNS 记录和报文</h2><p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为（Name，Value，Type，TTL）</p>
<p>四种 Type 的值，分别是 A、NS、CNAME 和 MX ：</p>
<ul>
<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>
<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>
<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>
<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>
</ul>
<p>主机记录：</p>
<p><img data-src="https://s2.loli.net/2022/12/05/yT9ds8Rpb2mN6cL.png" alt="主机记录"></p>
<p>记录类型：</p>
<img data-src="https://s2.loli.net/2022/12/05/Kd3qCfVzD6E9QbA.png" alt="记录类型" style="zoom: 67%;" />

<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>
<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p>
<p><strong>WebSocket 特点的如下：</strong></p>
<ul>
<li>支持双向通信，实时性更强</li>
<li>可以发送文本，也可以发送二进制数据‘’</li>
<li>建立在TCP协议之上，服务端的实现比较容易</li>
<li>数据格式比较轻量，性能开销小，通信高效</li>
<li>没有同源限制，客户端可以与任意服务器通信</li>
<li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>
</ul>
<h2 id="即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？"><a href="#即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？" class="headerlink" title="即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？"></a>即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h2><h3 id="短轮询的基本思路："><a href="#短轮询的基本思路：" class="headerlink" title="短轮询的基本思路："></a><strong>短轮询的基本思路：</strong></h3><p>浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式<strong>本质上还是浏览器发送请求</strong>，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。</p>
<p>这种方式的优点是<strong>比较简单，易于理解</strong>。缺点是这种方式由于需要不断的建立 http 连接，<strong>严重浪费了服务器端和客户端的资源</strong>。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>
<h3 id="长轮询的基本思路："><a href="#长轮询的基本思路：" class="headerlink" title="长轮询的基本思路："></a><strong>长轮询的基本思路：</strong></h3><p>首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。<strong>如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。</strong>客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。</p>
<p>长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，<strong>相比之下节约了资源</strong>。</p>
<p>长轮询的缺点在于，<strong>连接挂起也会导致资源的浪费</strong>。</p>
<h3 id="SSE-的基本思想："><a href="#SSE-的基本思想：" class="headerlink" title="SSE 的基本思想："></a><strong>SSE 的基本思想：</strong></h3><p><strong>服务器使用流信息向服务器推送信息</strong>。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个<strong>连续不断的数据流</strong>。这时，<strong>客户端不会关闭连接，会一直等着服务器发过来的新的数据流</strong>，视频播放就是这样的例子。</p>
<p>SSE 的方式是单向通信的，只能由服务器端向客户端推送信息</p>
<p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，<strong>不需要建立过多的 http 请求，相比之下节约了资源</strong>。</p>
<h3 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a><strong>WebSocket</strong></h3><p>是 HTML5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。<strong>WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息</strong>。</p>
<p>使用 WebSocket 协议的缺点是在服务器端的<strong>配置比较复杂</strong>。</p>
<p>对于这四种即使通信协议，从性能的角度来看：</p>
<p><strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong></p>
<p>但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：</p>
<p><strong>短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket</strong></p>
<p>所以，还是要根据具体的使用场景来判断使用哪种方式。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器原理</title>
    <url>/archives/f1e02d11.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img data-src="https://s2.loli.net/2022/12/09/hn6szuTWENfaHPZ.png"></p>
<span id="more"></span>

<h1 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h1><h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><p>XSS攻击指的是跨站脚本攻击(Cross-Site Scripting)，是<strong>一种代码注入攻击</strong>。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>
<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>
<p>攻击者可以通过XSS攻击进行以下操作：</p>
<ul>
<li>获取页面的数据，如DOM、cookie、localStorage；</li>
<li>DOS攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>
<li>破坏页面结构；</li>
<li>流量劫持（将链接指向某网站）</li>
</ul>
<h3 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h3><p>XSS 可以<strong>分为存储型、反射型和 DOM 型</strong>：</p>
<ul>
<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>
<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成 XSS 攻击。 </li>
<li>DOM 型指的通过修改页面的 DOM 节点形成的 XSS。</li>
</ul>
<p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。 </p>
<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。  </p>
<p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。 </p>
<h2 id="如何抵御XSS"><a href="#如何抵御XSS" class="headerlink" title="如何抵御XSS"></a>如何抵御XSS</h2><ul>
<li>抵御XSS攻击的一般方法是对用户输入的数据进行转义或者过滤，防止恶意的脚本代码被执行</li>
<li>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</li>
</ul>
<blockquote>
<ol>
<li>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</li>
<li>通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy"></li>
</ol>
</blockquote>
<ul>
<li>对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</li>
</ul>
<h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2><p>CSRF 攻击指的是<strong>跨站请求伪造攻击</strong>。</p>
<p>CSRF攻击的过程是，用户在浏览器上登录了网站A，并且网站A返回了Cookie信息给浏览器，用户没有退出网站A；然后用户在同一浏览器上访问了网站B，网站B上有一些隐藏的链接或者表单，指向网站A的一些敏感操作；当用户点击这些链接或者表单时，浏览器会自动带上网站A的Cookie信息，发送请求到网站A，网站A认为这是用户的合法请求，从而执行了攻击者想要的操作</p>
<p>CSRF 攻击的<strong>本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充</strong>。</p>
<h2 id="如何抵御CSRF"><a href="#如何抵御CSRF" class="headerlink" title="如何抵御CSRF"></a>如何抵御CSRF</h2><ul>
<li>使用验证码。验证码是一种让用户进行二次身份验证的方式，可以阻止攻击者伪造用户的请求。但是验证码会影响用户的体验，不适合频繁使用。</li>
<li>使用Token。Token是一种服务器生成的随机字符串，可以放在表单的隐藏字段或者URL的参数中，每次用户发送请求时，都要带上Token。服务器会验证Token的有效性，如果Token不匹配或者过期，就拒绝请求。Token可以有效防止CSRF攻击，但是需要服务器保存和管理Token。</li>
<li>使用Referer。Referer是HTTP请求头中的一个字段，表示请求的来源网站。服务器可以检查Referer是否来自合法的网站，如果不是，就拒绝请求。Referer可以简单地防止CSRF攻击，但是也有一些缺点，比如Referer可能被篡改或者禁用。</li>
<li>使用SameSite。SameSite是Cookie的一个属性，表示Cookie是否可以跨站发送1。如果设置为Strict或者Lax，就可以阻止Cookie在跨站请求中被发送，从而防止CSRF攻击。SameSite是一种比较新的防御方式，但是也有一些兼容性和局限性的问题。</li>
</ul>
<h2 id="有哪些可能引起前端安全"><a href="#有哪些可能引起前端安全" class="headerlink" title="有哪些可能引起前端安全"></a>有哪些可能引起前端安全</h2><ul>
<li>跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等； </li>
<li>iframe的滥⽤: iframe中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在iframe中运⾏JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</li>
<li>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）: 指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击 </li>
<li>恶意第三⽅库: ⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</li>
</ul>
<h2 id="网络劫持有哪几种，如何防范？"><a href="#网络劫持有哪几种，如何防范？" class="headerlink" title="网络劫持有哪几种，如何防范？"></a>网络劫持有哪几种，如何防范？</h2><p>⽹络劫持分为两种: </p>
<p>（1）<strong>DNS</strong>劫持: (输⼊京东被强制跳转到淘宝这就属于dns劫持) </p>
<ul>
<li>DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器</li>
<li>302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容 </li>
</ul>
<p>（2）<strong>HTTP</strong>劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告) </p>
<p>DNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。 </p>
<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>进程是资源分配的最小单位，线程是CPU调度的最小单位。</p>
<p>进程放在应用上来说就代表了一个程序；线程是进程中的更小单位，描述了执行一段指令所需的时间。</p>
<p>进程和线程之间的关系：</p>
<ol>
<li>进程中的任意一线程执行出错，都会导致整个进程的崩溃</li>
<li>线程之间共享进程中的数据</li>
<li>当进程关闭，操作系统会回收进程所占用的内存</li>
<li>进程之间的内容相互隔离</li>
</ol>
<h2 id="浏览器的进程"><a href="#浏览器的进程" class="headerlink" title="浏览器的进程"></a>浏览器的进程</h2><img data-src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603803289911-191cabf3-e7e2-4354-a83d-858668cc116f.png" alt="浏览器的进程" style="zoom:80%;" />

<ul>
<li><strong>浏览器进程</strong>：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能</li>
<li><strong>渲染进程</strong>：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li>
<li><strong>GPU 进程</strong>：其实， GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li>
<li><strong>网络进程</strong>：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li>
<li><strong>插件进程</strong>：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li>
</ul>
<p><strong>打开一个网页，最少需要四个进程</strong>：1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程。如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</p>
<p>虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：</p>
<ul>
<li><strong>更高的资源占用</strong>：因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</li>
<li><strong>更复杂的体系架构</strong>：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</li>
</ul>
<h2 id="渲染进程的线程有哪些"><a href="#渲染进程的线程有哪些" class="headerlink" title="渲染进程的线程有哪些"></a>渲染进程的线程有哪些</h2><ol>
<li><p>GUI渲染线程，渲染浏览器页面</p>
</li>
<li><p>JS引擎线程，负责处理Javascript脚本程序，一个Tab页中无论什么时候都只有一个JS引擎线程在运行JS程序；</p>
</li>
<li><p>时间触发线程，用来控制事件循环；</p>
</li>
<li><p><strong>定时器触发进程</strong>即setInterval与setTimeout所在线程；</p>
</li>
<li><p>异步http请求线程，XMLHttpRequest连接后通过浏览器新开一个线程请求；</p>
<p>检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行；</p>
</li>
</ol>
<p><strong>GUI渲染线程和JS引擎线程是互斥的</strong>，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行</p>
<h2 id="进程之间的通信方式"><a href="#进程之间的通信方式" class="headerlink" title="进程之间的通信方式"></a>进程之间的通信方式</h2><p><strong>管道通信</strong></p>
<p>管道就是操作系统在内核中开辟的一段缓冲区，进程1可以将需要交互的数据拷贝到这段缓冲区，进程2就可以读取了。</p>
<h2 id="僵尸进程和孤儿进程是什么？"><a href="#僵尸进程和孤儿进程是什么？" class="headerlink" title="僵尸进程和孤儿进程是什么？"></a>僵尸进程和孤儿进程是什么？</h2><ul>
<li><strong>孤儿进程</strong>：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</li>
<li><strong>僵尸进程</strong>：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。</li>
</ul>
<h2 id="死锁？-如何解决死锁？"><a href="#死锁？-如何解决死锁？" class="headerlink" title="死锁？ 如何解决死锁？"></a>死锁？ 如何解决死锁？</h2><p>所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</p>
<p>系统中的资源可以分为两类：</p>
<ul>
<li>可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，CPU和主存均属于可剥夺性资源；</li>
<li>不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</li>
</ul>
<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="对浏览器缓存机制的理解"><a href="#对浏览器缓存机制的理解" class="headerlink" title="对浏览器缓存机制的理解"></a>对浏览器缓存机制的理解</h2><ul>
<li>浏览器第一次加载资源，服务器返回200. 浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</li>
<li>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源；</li>
<li>如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</li>
<li>服务器收到请求后，优先根据Etag值判断被请求文件有无做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</li>
<li>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；</li>
</ul>
<p>很多网站的资源后面都加了版本号，这样做的目的是：每次升级了 JS 或 CSS 文件后，为了防止浏览器进行缓存，强制改变版本号，客户端浏览器就会重新下载新的 JS 或 CSS 文件 ，以保证用户能够及时获得网站的最新更新。</p>
<h2 id="浏览器资源缓存位置"><a href="#浏览器资源缓存位置" class="headerlink" title="浏览器资源缓存位置"></a>浏览器资源缓存位置</h2><h3 id="Server-Worker"><a href="#Server-Worker" class="headerlink" title="Server Worker"></a>Server Worker</h3><p>Service Worker 运行在 JavaScript 主线程之外，虽然由于脱离了浏览器窗体无法直接访问 DOM，但是它可以完成离线缓存、消息推送、网络代理等功能。它可以让我们<strong>自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。当 Service Worker 没有命中缓存的时候，需要去调用 <code>fetch</code> 函数获取  数据。也就是说，如果没有在 Service Worker 命中缓存，会根据缓存查找优先级去查找数据。<strong>但是不管是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示是从 Service Worker 中获取的内容。</strong></p>
<h3 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h3><p>Memory Cache 就是内存缓存，它的效率最快，<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。</strong>一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p>
<p>内存缓存中有一块重要的缓存资源是preloader相关指令下载的资源，preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。</p>
<h3 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h3><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上。</strong>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></p>
<p>绝大部分的缓存都来自 Disk Cache</p>
<h3 id="访问缓存优先级"><a href="#访问缓存优先级" class="headerlink" title="访问缓存优先级"></a>访问缓存优先级</h3><ol>
<li>先在内存中查找,如果有,直接加载。</li>
<li>如果内存中不存在,则在硬盘中查找,如果有直接加载。</li>
<li>如果硬盘中也没有,那么就进行网络请求。</li>
<li>请求获取的资源缓存到硬盘和内存。</li>
</ol>
<h2 id="协商缓存和强缓存的区别"><a href="#协商缓存和强缓存的区别" class="headerlink" title="协商缓存和强缓存的区别"></a>协商缓存和强缓存的区别</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>强缓存，如果缓存资源有效，直接使用缓存资源，不必向服务器发起请求。</p>
<p>通过http头信息中expires和cache-control属性</p>
<p>服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。</p>
<p>Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，它提供了对资源的缓存的更精确的控制。</p>
<p><code>Cache-Control</code>可设置的字段：</p>
<ul>
<li><code>public</code>：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，</li>
<li><code>private</code>：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；</li>
<li><code>no-cache</code>：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；</li>
<li><code>no-store</code>：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；</li>
<li><code>max-age=</code>：设置缓存的最大有效期，单位为秒；</li>
<li><code>s-maxage=</code>：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；</li>
<li><code>max-stale[=]</code>：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。</li>
</ul>
<p>一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。</p>
<p><strong>no-cache和no-store很容易混淆：</strong></p>
<ul>
<li>no-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；</li>
<li>no-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。</li>
</ul>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。</p>
<p>命中协商缓存的条件有两个：</p>
<ul>
<li><code>max-age=xxx</code> 过期了</li>
<li>值为<code>no-store</code></li>
</ul>
<p>使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。</p>
<p>协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 <strong>Etag</strong> 和 <strong>Last-Modified</strong> 属性。</p>
<p>（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。</p>
<p>（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。</p>
<p>当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。</p>
<p><strong>总结：</strong></p>
<p>强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。</p>
<h2 id="为什么需要浏览器缓存？"><a href="#为什么需要浏览器缓存？" class="headerlink" title="为什么需要浏览器缓存？"></a>为什么需要浏览器缓存？</h2><p>所谓的<strong>浏览器缓存</strong>指的是浏览器将用户请求过的静态资源，存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载，不需要再去服务端请求了。</p>
<p>使用浏览器缓存，有以下优点：</p>
<ul>
<li>减少了服务器的负担，提高了网站的性能</li>
<li>加快了客户端网页的加载速度</li>
<li>减少了多余网络数据传输</li>
</ul>
<h2 id="点击刷新按钮或者按-F5、按-Ctrl-F5-（强制刷新）、地址栏回车有什么区别？"><a href="#点击刷新按钮或者按-F5、按-Ctrl-F5-（强制刷新）、地址栏回车有什么区别？" class="headerlink" title="点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？"></a>点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</h2><ul>
<li><strong>点击刷新按钮或者按 F5：</strong>浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是 304，也有可能是 200。</li>
<li><strong>用户按 Ctrl+F5（强制刷新）：</strong>浏览器不仅会对本地文件过期，而且不会带上 If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。</li>
<li>地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。</li>
</ul>
<h1 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h1><h2 id="对浏览器的理解"><a href="#对浏览器的理解" class="headerlink" title="对浏览器的理解"></a>对浏览器的理解</h2><p>浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。</p>
<ul>
<li>shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。</li>
<li>内核是浏览器的核心。内核是基于标记语言显示内容的程序或模块。</li>
</ul>
<h2 id="对浏览器内核的理解"><a href="#对浏览器内核的理解" class="headerlink" title="对浏览器内核的理解"></a>对浏览器内核的理解</h2><p>浏览器内核主要分成两部分：</p>
<ul>
<li>渲染引擎就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件显示其他类型数据，例如PDF 格式。</li>
<li>JS 引擎：解析和执行 javascript 来实现网页的动态效果。</li>
</ul>
<p>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</p>
<h2 id="常见浏览器内核"><a href="#常见浏览器内核" class="headerlink" title="常见浏览器内核"></a>常见浏览器内核</h2><table>
<thead>
<tr>
<th>5大主流浏览器</th>
<th>内核</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>trident</td>
</tr>
<tr>
<td>chrome</td>
<td>webkit  -&gt;  blink</td>
</tr>
<tr>
<td>safari</td>
<td>webkit</td>
</tr>
<tr>
<td>firefox</td>
<td>gocko</td>
</tr>
<tr>
<td>opera</td>
<td>presto  -&gt; blink</td>
</tr>
</tbody></table>
<h3 id="浏览器的主要组成部分"><a href="#浏览器的主要组成部分" class="headerlink" title="浏览器的主要组成部分"></a>浏览器的主要组成部分</h3><ul>
<li><strong>⽤户界⾯</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯。 </li>
<li><strong>浏览器引擎</strong> - 在⽤户界⾯和呈现引擎之间传送指令。 </li>
<li><strong>渲染引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。 </li>
<li><strong>⽹络</strong> - ⽤于⽹络调⽤，⽐如 HTTP 请求。其接⼝与平台⽆关，并为所有平台提供底层实现。 </li>
<li><strong>JavaScript</strong> <strong>解释器</strong>。⽤于解析和执⾏ JavaScript 代码。 </li>
<li><strong>数据存储</strong> - 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“⽹络数据库”，这是⼀个完整（但是轻便）的浏览器内数据库。 </li>
</ul>
<p> 浏览器的每个标签⻚都分别对应⼀个呈现引擎实例。<strong>每个标签⻚都是⼀个独⽴的进程</strong></p>
<h1 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h1><h2 id="DOM-tree"><a href="#DOM-tree" class="headerlink" title="DOM tree"></a>DOM tree</h2><p>解析是根据收到的HTML文件生成DOM树；加载是加载内部资源，比如img等；</p>
<p>解析和加载异步完成，解析完毕并不说明页面加载完毕</p>
<p>加载，当前节点若解析完成（并不是页面解析完成），就开始加载资源</p>
<p>解析过程中：</p>
<ol>
<li>解析过程是将节点挂载到DOM树上，遵循<strong>深度优先解析</strong>原则</li>
<li>遇到link的外部css，遇到css的代码会进行css的加载，并行操作</li>
<li>遇见script标签时，会先执行js代码，然后继续构建DOM树，<strong>这就是在底部加入JavaScript代码的原因</strong>。</li>
</ol>
<h2 id="CSSom"><a href="#CSSom" class="headerlink" title="CSSom"></a>CSSom</h2><p>CSSom类似于DOM tree的生成过程。</p>
<h2 id="渲染树"><a href="#渲染树" class="headerlink" title="渲染树"></a>渲染树</h2><p>render tree = DOM tree + CSS tree，渲染树构建完毕后，浏览器的渲染引擎根据它绘制页面。</p>
<ul>
<li>渲染树不包含隐藏节点，display:none head类等不需要绘制的节点；visibility: hidden 绘制了只是看不见</li>
<li>渲染树的每个节点都有自己的样式，被当成一个盒子box，具有内容填充、边距、边框、位置、大小等其他样式</li>
</ul>
<h2 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h2><p>当浏览器渲染引擎对页面的节点操作时，就会产生回流或者重绘。<strong>回流一定重绘，重绘不一定回流</strong></p>
<h3 id="回流reflow"><a href="#回流reflow" class="headerlink" title="回流reflow"></a><strong>回流reflow</strong></h3><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局。这一阶段浏览器要弄清楚各个节点在页面中的<strong>确切位置和大小，所有相对测量值都将转换为屏幕上的绝对像素</strong>。这一过程被称为 回流，也被称为“自动重排”。</p>
<p>当<strong>元素属性发生改变且影响布局时</strong>（宽度、高度、内外边距等），产生回流，相当于 刷新页面。</p>
<ul>
<li>回流是相当消耗性能的，开发中应该减少回流次数</li>
<li>回流会引起 渲染树中的一部分或全部重新构建</li>
<li>引起回流的因素：<ul>
<li>页面初始化，即（至少有一次回流）</li>
<li>DOM节点增加 删除、位置变化</li>
<li>元素的尺寸、边距、填充、边框、显示(display:none block)改变</li>
<li>浏览器窗口尺寸变化，resize</li>
<li>向浏览器请求某些样式信息 offset client scroll width </li>
</ul>
</li>
</ul>
<h3 id="重绘repaint"><a href="#重绘repaint" class="headerlink" title="重绘repaint"></a><strong>重绘repaint</strong></h3><p>当元素<strong>属性发生改变且不影响布局</strong>时（背景颜色、透明度、字体样式等），产生重绘，相当于 不刷新页面，动态更新内容。</p>
<ul>
<li>若发生回流，浏览器根据新的渲染树重新绘制，这个过程称为 重绘</li>
</ul>
<h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a><strong>优化策略</strong></h3><ul>
<li>浏览器<strong>队列处理机制</strong></li>
<li>增添样式 放在 class中，批量处理，减少回流次数  或者 this.style.cssText 做动态值变化</li>
<li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流</li>
<li>documentFragment</li>
<li>动画一定要做绝对定位，相对定位每次变化都会引起父级的回流重绘</li>
<li>……</li>
</ul>
<p><strong>浏览器的渲染队列机制：</strong>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。         </p>
<h2 id="渲染过程中遇到JS文件如何处理"><a href="#渲染过程中遇到JS文件如何处理" class="headerlink" title="渲染过程中遇到JS文件如何处理"></a>渲染过程中遇到JS文件如何处理</h2><p>JavaScript文件的加载、解析与执行会阻塞DOM的构建，JS文件也会导致CSSOM阻塞DOM的构建</p>
<h2 id="async、defer和window-onload的区别"><a href="#async、defer和window-onload的区别" class="headerlink" title="async、defer和window.onload的区别"></a>async、defer和window.onload的区别</h2><p><img data-src="https://s2.loli.net/2022/12/13/pQGk9N2UHnjZeg3.png" alt="img"></p>
<p>async属性的script脚本：HTML解析与script加载并行发生，但在script执行时，HTML解析被阻塞，script执行结束后，继续HTML解析。多个带async属性的标签，不能保证加载的顺序</p>
<p>defer属性的script脚本：HTML解析与script加载并行发生，但script的执行要等到所有的HTML解析完成后才会发生。多个带defer属性的标签，按照顺序执行</p>
<p>1.defer和async在网络加载过程是一致的，都是异步执行的； </p>
<p>2.两者的区别在于脚本加载完成之后何时执行</p>
<p><strong>window.onload()</strong> 方法用于在网页加载完毕后立刻执行的操作，即当 HTML 文档加载完毕后，立刻执行某个方法。</p>
<h2 id="CSS如何阻塞文档解析"><a href="#CSS如何阻塞文档解析" class="headerlink" title="CSS如何阻塞文档解析"></a>CSS如何阻塞文档解析</h2><p>理论上，样式表不改变DOM树，也就没有必要停下文档解析等待它们。但是，JavaScript脚本执行时可能会请求样式信息，如果样式还没有加载解析，脚本会得到错误的值。 </p>
<p>为了避免这种错误，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。至此，CSS可以阻塞文档解析</p>
<h2 id="浏览器渲染优化"><a href="#浏览器渲染优化" class="headerlink" title="浏览器渲染优化"></a>浏览器渲染优化</h2><p><strong>针对JavaScript：</strong></p>
<p>（1）尽量将JavaScript文件放在body的最后，用async和defer属性来异步引入</p>
<p>（2） body中间尽量不要写<code>&lt;script&gt;</code>标签</p>
<p><strong>针对CSS：</strong></p>
<p>（1）在开发过程中，导入外部样式使用link，而不用@import。</p>
<p>（2）如果css少，尽可能采用内嵌样式，直接写在style标签中</p>
<p>使用CSS有三种方式：使用<strong>link、@import、内联样式</strong>，其中link和@import都是导入外部样式。区别：</p>
<ul>
<li><strong>link</strong>：浏览器会派发一个新线程(HTTP线程)去加载资源文件，与此同时GUI渲染线程会继续向下渲染代码</li>
<li><strong>@import</strong>：GUI渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)</li>
<li><strong>style</strong>：GUI直接渲染</li>
</ul>
<p>外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在head中，让浏览器尽快发送请求去获取css样式。</p>
<p><strong>针对DOM树、CSSOM树</strong></p>
<p>（1）HTML代码层级尽量不要太深，减少CSSD代码的层级</p>
<p>（2）使用语义化的标签，避免不标准语义化的特殊处理</p>
<p><strong>减少回流与重绘</strong></p>
<h2 id="如何优化关键渲染路径？"><a href="#如何优化关键渲染路径？" class="headerlink" title="如何优化关键渲染路径？"></a>如何优化关键渲染路径？</h2><p><strong>关键渲染路径</strong>是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。</p>
<ol>
<li>通过异步、延迟加载或者消除非关键资源来减少关键资源的请求数量</li>
<li>优化必须的请求数量和每个请求的文件体积</li>
<li>通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。</li>
</ol>
<h2 id="一定要掌握的时间线"><a href="#一定要掌握的时间线" class="headerlink" title="一定要掌握的时间线"></a>一定要掌握的时间线</h2><p>在浏览器加载页面开始到页面加载完成，按顺序发生的每一件事情</p>
<ol>
<li><p>生成document对象，以供DOM操作</p>
</li>
<li><p>解析文档，构建DOM树</p>
<p>document.readyState = ‘loading’</p>
</li>
<li><p>遇到link开始异步加载css外部文件的新线程，遇到style开始异步构建CSSOM的新线程</p>
</li>
<li><p>没有设置异步加载的script，阻塞文档解析，等到JS脚本加载并执行完成后，继续解析文档</p>
</li>
<li><p>异步加载script，异步加载JS脚本，不阻塞解析文档（不能使用documen.write)</p>
</li>
<li><p>解析文档遇到img，先解析节点。创建加载线程，异步加载图片资源，不阻塞解析文档</p>
</li>
<li><p>文档解析完成，document.readyState = ‘interactive’</p>
</li>
<li><p>defer script，JS脚本按照顺序执行</p>
</li>
<li><p>DOMContentLoaded事件，</p>
</li>
<li><p>async script加载并执行完毕，img等资源加载完毕，window对象中的onload事件才开始触发，document.readyState = ‘complete’</p>
</li>
</ol>
<p>window.onload 和 DOMContentLoaded的区别：window.onload是页面全部加载完毕才触发，DOMContentLoaded是文档解析完成和异步脚本加载完成后就触发</p>
<h1 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h1><p>浏览器本地存储方式主要5种，点击随便一个网页，F12，应用程序下的存储就可以看到了。</p>
<p>下面的学习对应着一个真实的网页会快很多</p>
<p><img data-src="https://s2.loli.net/2022/12/09/t4JQZ1aPoNdcBuw.png"></p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie</p>
<p><strong>Cookie的特性：</strong></p>
<ul>
<li>Cookie一旦创建成功，名称就无法修改</li>
<li>Cookie是无法跨域名的</li>
<li>每个Cookie的大小不能超过4kb</li>
<li>Cookie在请求一个新的页面的时候都会被发送过去</li>
</ul>
<p>如果需要域名之间跨域共享Cookie，有两种方法：</p>
<ol>
<li>使用Nginx反向代理</li>
<li>在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId</li>
</ol>
<p><strong>Cookie的使用场景：</strong></p>
<ul>
<li>最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。</li>
<li>可以用来统计页面的点击次数</li>
</ul>
<p><strong>Cookie字段组成：</strong></p>
<ul>
<li><p><strong>Name</strong>：cookie的名称</p>
</li>
<li><p><strong>Value</strong>：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌；</p>
</li>
<li><p><strong>Size</strong>： cookie的大小</p>
</li>
<li><p><strong>Domain</strong>：可以访问该cookie的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的 Cookie。</p>
<p>当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。</p>
</li>
<li><p><strong>Path</strong>：可以访问此cookie的页面路径。 比如domain是ychch.com，path是<code>/about</code>，那么只有<code>/about</code>路径下的页面可以读取此cookie</p>
</li>
<li><p><strong>Secure</strong>： 指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。</p>
<p>但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。</p>
</li>
<li><p><strong>HTTP</strong>： 该字段包含<code>HTTPOnly</code> 属性 ，该属性用来设置cookie能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，这种类型的cookie只能通过服务端来设置。该属性用于防止客户端脚本通过<code>document.cookie</code>属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。</p>
</li>
<li><p><strong>Expires/Max-size</strong> ： 此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</p>
</li>
</ul>
<h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><p>LocalStorage是HTML5新引入的特性。</p>
<p><strong>LocalStorage的优点：</strong></p>
<ul>
<li>在大小方面，LocalStorage的大小一般为5MB，有时候我们存储的信息较大，Cookie就不能满足我们的需求，LocalStorage可以储存更多的信息</li>
<li>LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li>
<li>仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</li>
</ul>
<p><strong>LocalStorage的缺点：</strong></p>
<ul>
<li>浏览器兼容问题，IE8以下不支持</li>
<li>隐私模式，无法读取LocalStorage</li>
<li>LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li>
</ul>
<p><strong>LocalStorage的常用API：</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 保存数据到 localStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 获取数据</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 删除保存的数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 删除所有保存的数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取某个索引的Key</span>
localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>LocalStorage的</strong>使用场景：</p>
<ul>
<li>有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可</li>
<li>在网站中的用户浏览信息和一些不常变动的个人信息等可以存储在本地的LocalStorage中</li>
</ul>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><p>SessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p>
<p><strong>SessionStorage与LocalStorage对比：</strong></p>
<ul>
<li>都在<strong>本地进行数据存储</strong>；</li>
<li><strong>都不能被爬虫爬取</strong>；</li>
<li>SessionStorage也有同源策略的限制，但是更严格，SessionStorage只有在<strong>同一浏览器的同一窗口下</strong>才能够共享；</li>
</ul>
<p><strong>SessionStorage的使用场景</strong></p>
<ul>
<li>由于SessionStorage具有时效性，可以用来存储游客登录的信息和临时的浏览记录。当关闭网站之后，这些信息也就随之消除了。</li>
</ul>
<h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>cookies、localStorage、sessionStorage都是存储少量数据的存储方式，当需要在本地存储大量数据时，使用浏览器的 indexDB 。</p>
<p>这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，更接近 NoSQL 数据库。它内部⽤键值对进⾏存储数据，可以进⾏快速读取操作，⾮常适合web场景，同时⽤JavaScript进⾏操作会⾮常方便。</p>
<p>IndexedDB 具有以下特点</p>
<ul>
<li><p><strong>键值对储存</strong>：IndexedDB 内部采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入。</p>
<p>对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。</p>
</li>
<li><p><strong>异步</strong>：IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。</p>
<p>异步设计是为了防止大量数据的读写，拖慢网页的表现。</p>
</li>
<li><p><strong>支持事务</strong>：IndexedDB 支持事务（transaction），系列操作中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</p>
</li>
<li><p><strong>同源限制：</strong>IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</p>
</li>
<li><p><strong>储存空间大</strong>：IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</p>
</li>
<li><p><strong>支持二进制储存</strong>：IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</p>
</li>
</ul>
<h1 id="浏览器同源策略"><a href="#浏览器同源策略" class="headerlink" title="浏览器同源策略"></a>浏览器同源策略</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p>
<p>它认为自任何站点装载的信赖内容是不安全的。当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，而不是那些来自其它站点可能怀有恶意的资源。</p>
<p>同源指的是：protocol<strong>协议</strong>、domain<strong>域名</strong>、port<strong>端口号</strong>必须一致。</p>
<p><strong>同源政策主要限制了三个方面：</strong></p>
<ul>
<li>当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。</li>
<li>当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。</li>
<li>当前域下 ajax 无法发送跨域请求。</li>
</ul>
<h2 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h2><p>有了跨域限制，才使我们能安全的上网。但是在实际中，有时候我们需要突破这样的限制，下面将介绍几种跨域的解决方法。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS是一种W3C标准，它允许服务器通过一些自定义的头部来限制哪些源可以访问它自身的资源。CORS需要浏览器和服务器同时支持。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p><strong>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p>
<p>根据是否需要预检请求，CORS可以分为简单请求和复杂请求</p>
<h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>满足以下两大条件，就属于简单请求</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">（<span class="token number">1</span><span class="token punctuation">)</span> 请求方法是以下三种方法之一：
<span class="token constant">HEAD</span>
<span class="token constant">GET</span>
<span class="token constant">POST</span>
（<span class="token number">2</span>）<span class="token constant">HTTP</span>的头信息不超出以下几种字段：
Accept
Accept<span class="token operator">-</span>Language
Content<span class="token operator">-</span>Language
Last<span class="token operator">-</span>Event<span class="token operator">-</span><span class="token constant">ID</span>
Content<span class="token operator">-</span>Type：只限于三个值application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded、multipart<span class="token operator">/</span>form<span class="token operator">-</span>data、text<span class="token operator">/</span>plain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于简单请求，浏览器直接发出CORS请求。浏览器在头信息之中，自动增加一个<code>Origin</code>字段。<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。这种错误<strong>无法通过状态码识别</strong>，因为HTTP回应的状态码有可能是200。</p>
<p>如果<code>Origin</code>指定的域名在许可范围内，响应报文会多出几个头信息字段。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//要么是请求时Origin字段的值，要么是一个*</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com
<span class="token comment">//布尔值，表示是否允许发送Cookie</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Credentials<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token comment">//如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Expose<span class="token operator">-</span>Headers<span class="token operator">:</span> FooBar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="withCredentials"><a href="#withCredentials" class="headerlink" title="withCredentials"></a>withCredentials</h4><p>CORS请求默认不发送Cookie和HTTP认证信息，如果要把Cookie发到服务器，一方面服务器同意，指定<code>Access-Control-Allow-Credentials = true</code> 字段；另一方面，请求中打开<code>withCredentials</code>属性</p>
<p>需要注意的是，如果要发送Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。</p>
<h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code></p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>
<p>“预检”请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。除了<code>Origin</code>字段，”预检”请求的头信息包括两个特殊字段。</p>
<p><strong>Access-Control-Request-Method</strong></p>
<p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是<code>PUT</code></p>
<p><strong>Access-Control-Request-Headers</strong></p>
<p>一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code></p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>利用<code>&lt;script&gt;</code>标签没有跨域限制，通过<code>&lt;script&gt;</code>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 原生JavaScript实现</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>
    <span class="token comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback'</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回调执行函数</span>
    <span class="token keyword">function</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>JSONP的缺点：</strong></p>
<ul>
<li>具有局限性， 仅支持get方法</li>
<li>不安全，可能会遭受XSS攻击</li>
</ul>
<h3 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h3><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一。</p>
<p><code>window.postMessage()</code> 方法允许来自一个文档的脚本可以传递文本消息到另一个文档里的脚本，可以用这种消息传递技术来实现安全的通信，称为“<strong>跨文档消息传递</strong>”。</p>
<p><strong>发送消息</strong></p>
<p>postMessage(data,origin)方法接受两个参数：</p>
<ul>
<li><strong>data</strong>： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li>
<li><strong>origin</strong>： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</li>
</ul>
<p><strong>接收消息</strong></p>
<p>如果指定的源匹配的话，那么当调用 <code>postMessage()</code> 方法的时候，在目标窗口的Window对象上就会触发一个 <code>message</code> 事件。</p>
<h3 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h3><p>Nginx跨域的原理是利用Nginx的代理功能，让浏览器认为它访问的是同源的服务器，而实际上是访问了其他的服务器。这样就避免了浏览器的跨域限制。</p>
<h3 id="nodejs中间件代理跨域"><a href="#nodejs中间件代理跨域" class="headerlink" title="nodejs中间件代理跨域"></a>nodejs中间件代理跨域</h3><p>node中间件实现跨域代理，原理大致与nginx相同，是一种解决前后端交互时跨域问题的方法。它利用Nodejs作为中间层，转发前端的请求到后端服务器，从而绕过浏览器的同源策略。</p>
<h3 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h3><p>此方案仅限主域相同，子域不同的跨域应用场景。父窗口：(domain.com/a.html)，子窗口：(child.domain.com/a.html)。两个页面都通过js强制设置document.domain为基础主域domain.com，就实现了同域。</p>
<h3 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h3><p>WebSocket协议是一种在浏览器和服务器之间进行全双工通信的技术。WebSocket协议不受同源策略的限制，因此可以跨域请求。</p>
<p>利用webSocket的API，可以直接new一个socket实例，然后通过open方法内send要传输到后台的值，也可以利用message方法接收后台传来的数据。</p>
<h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><ul>
<li><strong>正向代理：</strong>隐藏客户端</li>
</ul>
<p>客户端想获得一个服务器的数据，但是因为种种原因无法直接获取。于是客户端设置了一个代理服务器，并且指定目标服务器，之后代理服务器向目标服务器转交请求并将获得的内容发送给客户端。这样本质上起到了对真实服务器隐藏真实客户端的目的。实现正向代理需要修改客户端，比如修改浏览器配置。</p>
<ul>
<li><strong>反向代理：</strong>隐藏服务器</li>
</ul>
<p>服务器为了能够将工作负载分不到多个服务器来提高网站性能 (负载均衡)等目的，当其受到请求后，会首先根据转发规则来确定请求应该被转发到哪个服务器上，然后将请求转发到对应的真实服务器上。这样本质上起到了对客户端隐藏真实服务器的作用。</p>
<p>一般使用反向代理后，需要通过修改 DNS 让域名解析到代理服务器 IP，这时浏览器无法察觉到真正服务器的存在，当然也就不需要修改配置了。</p>
<ul>
<li><strong>两者异同</strong></li>
</ul>
<p>正向代理和反向代理的结构是一样的，都是 client-proxy-server 的结构，它们主要的区别就在于中间这个 proxy 是哪一方设置的。在正向代理中，proxy 是 client 设置的，用来隐藏 client；而在反向代理中，proxy 是 server 设置的，用来隐藏 server。</p>
<p><img data-src="https://cdn.nlark.com/yuque/0/2020/jpeg/1500604/1605256274960-50bd9e69-dde9-4782-b2c0-6afc8188fca2.jpeg" alt="正向代理和反向代理"></p>
<h2 id="Nginx的概念及其工作原理"><a href="#Nginx的概念及其工作原理" class="headerlink" title="Nginx的概念及其工作原理"></a>Nginx的概念及其工作原理</h2><p>Nginx 是一款轻量级的 Web 服务器，也可以用于反向代理、负载平衡和 HTTP 缓存等。Nginx 使用异步事件驱动的方法来处理请求，是一款面向性能设计的 HTTP 服务器。</p>
<p>传统的 Web 服务器如 Apache 是 process-based 模型的，而 Nginx 是基于event-driven模型的。正是这个主要的区别带给了 Nginx 在性能上的优势。</p>
<p>Nginx 架构的最顶层是一个 master process，这个 master process 用于产生其他的 worker process，这一点和Apache 非常像，但是 Nginx 的 worker process 可以同时处理大量的HTTP请求，而每个 Apache process 只能处理一个。</p>
<h1 id="浏览器事件机制"><a href="#浏览器事件机制" class="headerlink" title="浏览器事件机制"></a>浏览器事件机制</h1><h2 id="事件是什么"><a href="#事件是什么" class="headerlink" title="事件是什么"></a>事件是什么</h2><p>事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）</p>
<p>事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型：</p>
<ul>
<li><strong>DOM0 级事件模型</strong>，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。所有浏览器都兼容这种方式。直接在dom对象上注册事件名称，就是DOM0写法。</li>
<li><strong>IE 事件模型</strong>，在该事件模型中，一次事件共有两个过程，事件处理阶段和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。</li>
<li><strong>DOM2 级事件模型</strong>，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。</li>
</ul>
<h2 id="如何阻止事件冒泡"><a href="#如何阻止事件冒泡" class="headerlink" title="如何阻止事件冒泡"></a>如何阻止事件冒泡</h2><ul>
<li>普通浏览器使用：event.stopPropagation() </li>
<li>IE浏览器使用：event.cancelBubble = true;</li>
</ul>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件委托 是利用浏览器事件冒泡的机制，将子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件委托。</p>
<p>使用事件委托可以不必要为每一个子元素都绑定一个监听事件，<strong>减少内存消耗</strong>。并且还可以<strong>实现事件动态绑定</strong>，比如说新增了一个子节点，并不需要单独地为它添加一个监听事件，它绑定的事件会交给父元素中的监听函数来处理。</p>
<p>事件委托不是只有优点，它也是有<strong>缺点</strong>的：</p>
<p>比如 focus、blur 之类的事件没有事件冒泡机制，所以无法实现事件委托；mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。</p>
<h1 id="浏览器垃圾回收机制"><a href="#浏览器垃圾回收机制" class="headerlink" title="浏览器垃圾回收机制"></a>浏览器垃圾回收机制</h1><p>GC<code>就是</code>Garbage Collection<code> 也就是我们常说的</code>垃圾回收机制，它工作在引擎的内部，对于前端来说是相对无感的。</p>
<p>一般的高级语言里面会自带 GC，比如 Java、Python、JavaScript 等，也有无 GC 的语言，比如 C、C++ 等，那这种就需要我们程序员手动管理内存了，相对比较麻烦。</p>
<h2 id="V8的垃圾回收机制"><a href="#V8的垃圾回收机制" class="headerlink" title="V8的垃圾回收机制"></a>V8的垃圾回收机制</h2><p>V8 的垃圾回收策略主要基于分代式垃圾回收机制，V8 中将堆内存分为新生代和老生代两区域，采用不同的垃圾回收器。</p>
<p>新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持<code>1～8M</code>的容量，而老生代的对象为存活时间较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大。</p>
<h3 id="新生代垃圾回收器"><a href="#新生代垃圾回收器" class="headerlink" title="新生代垃圾回收器"></a>新生代垃圾回收器</h3><p>新生代对象是通过一个名为 <code>Scavenge</code> 的算法进行垃圾回收，主要采用了一种复制式的方法即 <code>Cheney 算法</code>：</p>
<p><code>Cheney 算法</code> 中将堆内存一分为二，一个是处于使用状态的空间我们暂且称之为 <code>使用区</code>，一个是处于闲置状态的空间我们称之为 <code>空闲区</code>：</p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fd1a43f0380484288590fff97466d4b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<p>当开始进行垃圾回收时，新生代垃圾回收器会对使用区中的活动对象做标记，标记完成之后将使用区的活动对象复制进空闲区并进行排序，随后进入垃圾清理阶段，即将非活动对象占用的空间清理掉。最后进行角色互换，把原来的使用区变成空闲区，把原来的空闲区变成使用区。</p>
<h3 id="老生代垃圾回收"><a href="#老生代垃圾回收" class="headerlink" title="老生代垃圾回收"></a>老生代垃圾回收</h3><p>先来说下什么情况下对象会出现在老生代空间中：</p>
<ul>
<li>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。</li>
<li>To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</li>
</ul>
<p>对于大多数占用空间大、存活时间长的对象会被分配到老生代里，因为老生代中的对象通常比较大，如果再如新生代一般分区然后复制来复制去就会非常耗时，从而导致回收执行效率不高，所以老生代垃圾回收器来管理其垃圾回收执行，它的整个流程就采用的就是<strong>标记清除</strong>了。</p>
<p>标记阶段，从一组根元素开始，递归遍历这组根元素，遍历过程中能到达的元素称为活动对象，没有到达的元素就可以判断为非活动对象。</p>
<p>清除阶段，直接将非活动对象，也就是数据清理掉。</p>
<p>分代式机制把一些新、小、存活时间短的对象作为新生代，采用一小块内存频率较高的快速清理，而一些大、老、存活时间长的对象作为老生代，使其很少接受检查，新老生代的回收机制及频率是不同的，可以说此机制的出现很大程度提高了垃圾回收机制的效率。</p>
<h3 id="并行回收"><a href="#并行回收" class="headerlink" title="并行回收"></a>并行回收</h3><p> JavaScript 是一门单线程的语言，它是运行在主线程上的，那在进行垃圾回收时就会阻塞 JavaScript 脚本的执行，需等待垃圾回收完毕后再恢复脚本执行，我们把这种行为叫做 <code>全停顿</code>。</p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05a802dfb84b494ea0bac6281e292a11~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<p>假如一次 GC 的时间过长，对用户来说就可能造成页面卡顿等问题。这里引入多个辅助线程来同时处理，以此加速垃圾回收的执行速度</p>
<p>在执行垃圾回收的过程中，会启动了多个线程来负责新生代中的垃圾清理操作，这些线程同时将对象空间中的数据移动到空闲区域，这个过程中由于数据地址会发生改变，所以还需要同步更新引用这些对象的指针，这就是并行回收。</p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da8164de8a1245fe962673e9c2bfb473~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<h3 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h3><p><code>并行回收</code> 可以提高回收效率，对于新生代垃圾回收器能够有很好的优化，但是它还是一种全停顿式的垃圾回收方式；</p>
<p>对于老生代来说，它的内部存放的都是一些比较大的对象，对于这些大的对象 GC 时哪怕我们使用并行策略依然可能会消耗大量时间</p>
<p>在 2011 年，V8 对老生代的标记进行了优化，从 <code>全停顿标记</code>切换到<code>增量标记</code></p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cf5dc1cf0b04856809050ed165a0d7a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<p>如果采用非黑即白的标记策略，那在垃圾回收器执行了一段增量回收后，暂停后启用主线程去执行了应用程序中的一段JavaScript 代码，随后当垃圾回收器再次被启动，这时候内存中黑白色都有，我们无法得知下一步走到哪里了</p>
<p>为了解决这个问题，V8 团队采用了一种特殊方式： <code>三色标记法</code></p>
<h3 id="惰性清理"><a href="#惰性清理" class="headerlink" title="惰性清理"></a>惰性清理</h3><p>增量标记其实只是对活动对象和非活动对象进行标记，对于真正的清理释放内存 V8 采用的是<code>惰性清理</code></p>
<p>当增量标记完成后，假如当前的可用内存足以让我们快速的执行代码，其实我们是没必要立即清理内存的，可以将清理过程稍微延迟一下，让 JavaScript 脚本代码先执行，也无需一次性清理完所有非活动对象内存，可以按需逐一进行清理直到所有的非活动对象内存都清理完毕，后面再接着执行增量标记。</p>
<h3 id="并发回收"><a href="#并发回收" class="headerlink" title="并发回收"></a>并发回收</h3><p>并行回收依然会阻塞主线程，增量标记同样有增加了总暂停时间、降低应用程序吞吐量两个缺点，那么怎么才能在不阻塞主线程的情况下执行垃圾回收并且与增量相比更高效呢？</p>
<p>并发回收了，它指的是主线程在执行 JavaScript 的过程中，辅助线程能够在后台完成执行垃圾回收的操作，辅助线程在执行垃圾回收的时候，主线程也可以自由执行而不会被挂起：</p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f28fab4cc224c18952929a738959a98~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p>
<p>辅助线程在执行垃圾回收的时候，主线程也可以自由执行而不会被挂起，这是并发的优点，但同样也是并发回收实现的难点，因为它需要考虑主线程在执行 JavaScript 时，堆中的对象引用关系随时都有可能发生变化，这时辅助线程之前做的一些标记或者正在进行的标记就会要有所改变，所以它需要额外实现一些<code>读写锁机制</code>来控制这一点。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>新生代主要使用分为了使用区和空闲区，使用相关的算法进行垃圾回收机制;</li>
<li>老生代使用<code>标记清除算法</code>，还是使用了<code>并行回收</code>、<code>增量标记</code>、<code>惰性清理</code>来辅提高回收效率，增量标记中使用<code>三色标记法</code>来达到暂停和恢复的作用;</li>
<li>还是使用<code>并发回收</code>使回收更高效;</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>2023寒假记事</title>
    <url>/archives/911aeea6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>现在也尝试着多做一些记录，以此篇记录倒数第二个寒假时光~</p>
<span id="more"></span>

<h3 id="1-8-高中同学聚餐"><a href="#1-8-高中同学聚餐" class="headerlink" title="1.8 高中同学聚餐"></a>1.8 高中同学聚餐</h3><p>每年过年回来和高中同学一起吃饭，聊聊一年里新奇有趣的事，吐槽一下苦闷，不同行业之间交流见闻，是我每次回来都很期待的事情。</p>
<p>今天约了三五好友，湖边散步，聊天说地，晚上一起吃的火锅。</p>
<p>和老同学一起，总是格外的放松，难得的快乐</p>
<table>
<thead>
<tr>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108232854430.webp" alt="image-20230108232854430"></th>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108232948867.webp" alt="image-20230108232948867"></th>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233046533.webp" alt="image-20230108233046533"></th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108232758478.webp" alt="image-20230108232758478"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233123644.webp" alt="image-20230108233123644"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233158403.webp" alt="image-20230108233158403"></td>
</tr>
<tr>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233219158.webp" alt="image-20230108233219158"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233310478.webp" alt="image-20230108233310478"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230108233318813.webp" alt="image-20230108233318813"></td>
</tr>
</tbody></table>
<h3 id="1-14-炸年货"><a href="#1-14-炸年货" class="headerlink" title="1.14 炸年货"></a>1.14 炸年货</h3><h3 id="1-15-初雪"><a href="#1-15-初雪" class="headerlink" title="1.15 初雪"></a>1.15 初雪</h3><table>
<thead>
<tr>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1783.webp" alt="IMG_1783"></th>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1789.webp" alt="IMG_1789"></th>
<th><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1781.webp" alt="IMG_1781"></th>
</tr>
</thead>
<tbody><tr>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1797.webp" alt="IMG_1797"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1799.webp" alt="IMG_1799"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1792.webp" alt="IMG_1792"></td>
</tr>
<tr>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1795.webp" alt="IMG_1795"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1803.webp" alt="IMG_1803"></td>
<td><img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/IMG_1801.webp" alt="IMG_1801"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>寒假记事</tag>
      </tags>
  </entry>
  <entry>
    <title>2023总结与新年展望</title>
    <url>/archives/66bfc408.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5f03024f38b5a4cb39b80e4bea940dbf3dace1a005a64b95cc3b013c1c9ce6fa"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>年度总结</category>
        <category>随记</category>
      </categories>
      <tags>
        <tag>新年展望</tag>
      </tags>
  </entry>
  <entry>
    <title>2023跨年</title>
    <url>/archives/610a7c6b.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ff1e27ff5e5b74572b112b589ba676d967730f7040e359fcb33196398500359c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>深圳跨年</tag>
      </tags>
  </entry>
  <entry>
    <title>人际剖析</title>
    <url>/archives/b834e058.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img data-src="https://s2.loli.net/2022/09/12/4RP2Q3A6fqgDEWJ.png" style="zoom:80%;" />
<span id="more"></span>

<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>魅力由框架与能量组成</p>
<p>人与人交往的过程就是试探彼此框架的过程，例如初次见面的客气与礼貌</p>
<p>框架即是自己喜欢什么，不喜欢什么，底线是什么，这些都可以适时向其他人传递，而不让其他人触犯自己的底线。</p>
<h1 id="能量"><a href="#能量" class="headerlink" title="能量"></a>能量</h1><p>能量最重要的组成部分就是实力</p>
<p>“胜兵先胜而后求战，败兵先战而后求胜”</p>
<p>胜负只是果，先决条件才是因，胜负在战斗之前就已分，战场只是将这个果呈现出来而已。</p>
<p>“善战者无智名，无勇功”，后人批注曰，“善战者无赫赫之功，善医者无煌煌之名”。真正的善战者是不出名的，因为他的胜利是常态，有名气的人是力挽狂澜之人，但他们并不是真正的善战者。同理，真正精通医术之人可以防患于未然，并不出名。</p>
<h2 id="实力"><a href="#实力" class="headerlink" title="实力"></a>实力</h2><p><strong>“自卑和自傲是孪生兄弟，我们要自信，自信的支柱是实力”</strong></p>
<ol>
<li>社会就是慕强的</li>
</ol>
<p>强者的沉默是足智多谋，强者的话痨是平易近人，相反，弱者的沉默是低情商，不会沟通，弱者的话痨是说不到点子上。别人如何看待你就是取决于他们怎么看待你的实力</p>
<ol start="2">
<li>绝对实力面前，所谓的技巧、手段都没用</li>
</ol>
<p>例如当大部分人抱怨找不到对象的时候，少部分人却能有如此多选择</p>
<p>以上两点就很好的解释了 世间普遍存在的二八定律和马太效应，这是作为个体的我们无法改变的，我们能做的就是 在了解游戏规则的前提下，如何玩好人生这盘游戏</p>
<h3 id="如何提升实力"><a href="#如何提升实力" class="headerlink" title="如何提升实力"></a>如何提升实力</h3><p><strong>提升个人魅力最直接的办法就是提升个人实力</strong>，实力又可以细分为：<strong>价值 + 稀缺性</strong></p>
<p>在想着如何提升之前，得先找到属于自己的赛道</p>
<h4 id="找到赛道"><a href="#找到赛道" class="headerlink" title="找到赛道"></a>找到赛道</h4><p>赛道的寻找 ，优势和兴趣缺一不可，即你擅长的+你喜欢的</p>
<ul>
<li><p>优势：做的又快又好，不费力，能受到赞扬</p>
</li>
<li><p>兴趣：自身对此感兴趣，举例打游戏需要坚持吗</p>
</li>
</ul>
<h4 id="明晰价值"><a href="#明晰价值" class="headerlink" title="明晰价值"></a>明晰价值</h4><p>不存在绝对的价值，只存在相对的价值，很多价值只有在特定的场所里才有用。例如 滑雪冠军在企业里并无价值，但在冬奥赛场上却受人瞩目。（ps，这里仅假设简单条件）</p>
<p>我们要挖掘出 自己能被他人所需要的价值</p>
<h4 id="挖掘稀缺性"><a href="#挖掘稀缺性" class="headerlink" title="挖掘稀缺性"></a>挖掘稀缺性</h4><p>世界上有价值的东西很多，例如阳光空气水，但是它们并不稀奇，所以也无所谓价格；再例如种田和工地打工，这些也是有价值的活动，但因为门槛低，所以工资也不高。</p>
<p>不要奢望雇佣关系上有念旧情，就像换手机，经济好用才是真理，故不要把希望寄托于他人，只能提升自己。</p>
<p>为了构建自身的稀缺性，可以从以下五个方面来思考：</p>
<p><strong>信息</strong></p>
<p>在这个信息泛滥的时代，搜集和整理高质量信息本身就是一种能力。自古以来，信息差就是可以用来赚钱的。例如阿虚同学，我自认我的搜索能力也是不错的</p>
<p><strong>知识</strong></p>
<p>知识是需要长期积累，量变到质变，才能形成体系化的理解。知识体系化，才可以形成跨学科的理解</p>
<p><strong>能力</strong></p>
<p>知识是听来的、看来的、学来的，那么能力一定是在实践中练出来的。计算机的盛行，很大一部分原因就是数理化的知识可以高效的转换成就业时的能力，同理，文学类的难就业，也和文史知识本身比较难转换成能力。</p>
<p>赚钱的本质是 有能力解决别人的问题和需求，别人以金钱来为此交换。故要学会将自己所学知识转换成社会里所需要的能力。</p>
<p><strong>认知</strong></p>
<p>认知，即高纬度的思想。推己及人，换位思考；跳出当下，纵思全局；从未来目标逆推现在的行动；立身当下时间维度，预判未来的趋势和风口。</p>
<p>以上种种都是不同类型的认知，提升认知的方法就是多接触高人，特别是同领域的高人。</p>
<p><strong>资源</strong></p>
<p>商业资源：供应商、渠道、客户</p>
<p>个人资源：钱、人脉和修养或谈资</p>
<p>人脉并不是微信里加了很多大佬的联系方式，<strong>判断人脉的标准在于你是否能为他提供帮助</strong></p>
<h2 id="除了实力"><a href="#除了实力" class="headerlink" title="除了实力"></a>除了实力</h2><h3 id="真实"><a href="#真实" class="headerlink" title="真实"></a>真实</h3><p>真实的东西一定是有力量的东西。以短视频赛道为例，在这个市场趋近饱和的市场，经常全网爆火的是一些真实的东西，比如“退、退、退”。同理，为什么人们喜欢看街头吵架，也是因为真实</p>
<p>真实很简单，却很多人做不到。</p>
<p>不管成功与否，做个真实真诚的人总是不愧于自己的</p>
<h3 id="神性与兽性"><a href="#神性与兽性" class="headerlink" title="神性与兽性"></a>神性与兽性</h3><p>人性是一种介于神性与兽性的东西。</p>
<p>神性，即我们要去哪里，我们的目标、愿景和使命。</p>
<p>当我们有坚定的目标时，我们就有会有一种底气，我现在不厉害，不代表我以后不厉害。莫欺少年穷，要有这种心态，不惧怕任何人，不畏惧任何挑战</p>
<p>兽性，即我们从哪里来</p>
<p>婴儿每走一步摔一步，会摔到会走而已；狮子在捕猎的时候，会思考没有捕到这个猎物会怎么办吗，抓不到就抓不到，抓下一头就是了。要有很简单的兽性智慧，不去想那么多，做思想的巨人，做行动的傻子</p>
<p><strong>当你想很多就会有很多的问题，当你在行动得到的全部都是答案</strong>，即使是错误的答案，那也是宝贵的经验。</p>
<h3 id="主场"><a href="#主场" class="headerlink" title="主场"></a>主场</h3><p>主场能够带给我们能量，即主场优势。要明晰自己的主场并加以利用</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p>【【人际剖析1】进来了解什么叫魅力】 <a href="https://www.bilibili.com/video/BV1Ag411S7ie?share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3">https://www.bilibili.com/video/BV1Ag411S7ie?share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3</a></p>
</li>
<li><p>【【人际剖析2】我无所畏惧，因为】 <a href="https://www.bilibili.com/video/BV1124y1o7ik?share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3">https://www.bilibili.com/video/BV1124y1o7ik?share_source=copy_web&amp;vd_source=fb759cd2f0879744ce434e7e4b45ddc3</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>自我探索</category>
        <category>随记</category>
      </categories>
  </entry>
  <entry>
    <title>兰大人出躺村有多费劲</title>
    <url>/archives/a81542e6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>b站同名视频，算是博客内嵌视频的一个小测试，也欢迎一键三连~</p>
<p>右键画面可更改播放速度</p>
<span id="more"></span>

<iframe src="//player.bilibili.com/player.html?aid=847451818&bvid=BV1cL4y1v7oo&cid=392530002&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>



]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>vlog</tag>
      </tags>
  </entry>
  <entry>
    <title>怎叹</title>
    <url>/archives/6c30b541.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最喜欢这版的翻唱</p>
<span id="more"></span>


    <div id="aplayer-PASEMLhY" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="0030R0gA49FWxZ" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<h1 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h1><p>唱一首水调歌头</p>
<p>那明月何时能有</p>
<p>我站在梧桐树下</p>
<p>期待你回眸</p>
<p>若今生牵你的手</p>
<p>又哪怕岁月悠悠</p>
<p>只盼那清风依旧</p>
<p>与你长相守</p>
<p>散不去只剩温柔</p>
<p>这秋风吹去离愁</p>
<p>只感叹浮生若梦</p>
<p>无人在身后</p>
<p>抬头看梨花翩翩</p>
<p>是谁在独自承受</p>
<p>怎奈何蓦然回首</p>
<p>你皱起眉头</p>
<p>怎叹呐山有木兮那木有枝</p>
<p>心悦君兮啊君不知</p>
<p>可是前世与你错过太多事</p>
<p>怎叹呐秋有月兮那月有诗</p>
<p>也不及与你相守时</p>
<p>梦里与你山水再相识</p>
<p>散不去只剩温柔</p>
<p>这秋风吹去离愁</p>
<p>只感叹浮生若梦</p>
<p>无人在身后</p>
<p>抬头看梨花翩翩</p>
<p>是谁在独自承受</p>
<p>怎奈何蓦然回首</p>
<p>你皱起眉头</p>
<p>怎叹呐山有木兮那木有枝</p>
<p>心悦君兮啊君不知</p>
<p>可是前世与你错过太多事</p>
<p>怎叹呐秋有月兮那月有诗</p>
<p>也不及与你相守时</p>
<p>梦里与你山水再相识</p>
<p>怎叹呐山有木兮那木有枝</p>
<p>心悦君兮啊君不知</p>
<p>可是前世与你错过太多事</p>
<p>怎叹呐秋有月兮那月有诗</p>
<p>也不及与你相守时</p>
<p>梦里与你山水再相识</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>22岁生日</title>
    <url>/archives/733988f0.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ddbc92d15e1c5663550cf81e3cce71c41b5de17021d6d497c2af602aa03d9528">76a564cf6a4091bde4fff08fa9cda2a247c4cdd737369a731c51df7d65acd49b4e01eff2db11f7f71dd5d8041f2873a34c7b018d654fb61739c890a6a44889e3675924e640a59206cbaa04bfc658aff070cacd128282ddf03a06a955b91291d95b66602f170c9d9d8c8d8ccdc7620d14fd86697f465e431b408fb3c9d09a471e1c2bb682292299c785b35f51322ad8cc2fbeb471b92069190c49fbc603d57d4628f583847efc600aebb244974ed0f5a2b3be4f9fcec15b1fdf5d9e303105269da4d8f936110d009f42082937235733dad134de85cffb089bdb775b961010911f708bf89d4bff7c5af6b309504b5cc39453040a6788220275e463701d97a22968aa164db8e1577be8003afdd6b5a9d4538af0bf4746dc312538a35d04d427f25af9628664a789dd99bea108f95399d795bb0608c3dcb19475160a078951104472be447d0c1fd6e757c171a1b337920560c4c0c836f49e2c783e1c3f7efb2ac7475a66242647b814a21a6bdc1b5a2cea0087b1a4dad2da2303d30e5eac215c37e6893ef30253aeaed5173a1db9cfad39dd291eef29e39f8ae1786bb0471ed812140c99e1f9c6bf1c8b1d31c09b441f895084f99f4c8f5e58389546be25aefa99456f7b468a97afc66bf5a4031f94f330c86d8d037b9235429d8b89e6ce2470bd086283f257bb21d21f193b354fa25fde5cd7561273b3486483cd2f995639af9a9c7637394ba3af388ee261710d5c78befc6c95bb70fccfa55ce396c3a3665765e9eb74e976b304eab7e355f09df5c60c63d5afe540deb2c8756149f50d403ccda9a5824cad0c874e820a58be8ac9aef3c657674e02d3ed4996ead7c8e84980d7350120d8c511740734f33a047829d19d091cd200fabcf6a1a4f387a04c8bbbf0d3488770c542a15e4c6853932187137dd0d32b2e96881d31c3e667e3a2e71871932eb890b8ee147226e78cdc4a4e3df04538726022e540736d2b0c4c20d3fdbd4fecdcf4bba8456f1d6d9fffbedd3bb845e9709024ae2f519f800d62f12437a7c8e71d46f4be6a6fa9b0e8416a41fb1a31bdedfb12e44eac9346854a14b54ce4f6e43e1ea6ec2101e02c480b97b6b33d37aecd591fe6af0bc623ff9711a05abe9d04c8f309535f8091c0e8a1a713ea56eed64d421aea7966c9ee68b0fd6bb9cf235744d9984228f5e5336d165c1183740b5ed90357a82e0df1b249e2f7b38a08b80e8a418678e062d1bdadf6829147403a7a1c60522ae07761f5c7c5bd699e8f3b6908cc30f084e968fb89834da41df77d94ef8f1d1de37011001e61cdeceb35035a4522c86067c9a29819de8f68f469ca9230026176934f88795cb6f7bd910bbdc22faf369e5932983a1f5e86a6b0d7db99f8ca655fb4009e9d6e035f18641731e0291f99f07bc68d766715a43e89ebb953bf077f885cfb5212e54de62e60f14c07188bdc4958ce0e6f47b55e13bd5a21bd772d53515e986fc2d0cb98041c93dad3d01591c7fe60f6cfa24b0444a8253de1de95559f0f7055632a84c96763284c6e1bebf951f1309b16b5925a490b2681a4efa8c253c17cb646214ab00321758fc1f2ca0be10ded8b164e8d08b6dd6bdcd7ab1af99901594785b78978f9aeeab89731d0e081af602f349518a639ead34215e5c977e52a6727c8be1aafc796849624e82fe0fcf7aa1cc940c68f80e8445fb06d5dd42f9c7f825cd45dda07a0e13e046fee947fc000a05e4d1d0fc9a96d83bc673482646367161b8bcd10aa661c5c53dd6ca73d83a7f00aae151b1d7e299a64c2c06f0885f0dc1e748e8b721153ef6b62673b6a180f06c4984063e7b9d45118c92b78b76f08d72ed9c9093962ac2fca26fb0251564504eb6ec828a27abd9679be4a320aa7ed01d4018a00f9726b08cd3938af1e34d55a6b9c2ff4752e088a378e01114d1f90bd42909cec1a689d8a9041e5cf2e131e4fd09f4d5c7d513278ce772a61526fa3acee5519ad01ef003f48c81f55ad8c84ff55494756cc739f7ce96934aa4418364e2cea4a888286ef5d05a99fdacd4fd9ed26cf5403d2e19a24f343431b7ba9df8edd1dc8e101912a4c4aca1fd6285a63348c66efb52d1151f401fff560b60c76633b0591412de1d426b5aaf261aadce4f39680494ed26d2cce82300dc8de2c163e61679bf0f59253d1301f63289501c1469e3da221dc8d6f083ecbb6b9dbeb446382b0fb86546b1823ebba8c651da57142247cc366163899cd3cd594beb4ac2c0b7354e1663c69cc4ce1739f47f3e1e183bb22d889ce013e6ca546d667f77de097ab869a986e469cf167c676fa2263bfeb4ee382c1b29e84f24296f3c31ab28d8222c6a877ff9fd7d900df55f8acf5c7721689531d3f0dade02aa4ef5a09f05f02f9f6db2ace5cbcc0b20c131ea68b3f033a0edc95b20d8dbd831483668b4ba229268743a903d0d3153c36ba52b2cb68ac65fe8981f9b6a3b73a1d41524b4e73dc395d2eb11b5badc08253a4563ab1484e80214363a4b054c6f6a536a362d6a4b830fe526053b5c5f17563cb0badd2ac79aabf6aabbbcf476953122f8eb45fe36a50f2b8312794add3de3d75ada4316b1b6b21c1112669c3d82516c7ee03264de0b4fb45f19147db46423cd1ee2342910f8bb877581bb8a05744b4947300acead53319c9dcb862a464d9973fe36ba2d2fed3ca4071691fd5c66567688301150541e15255865b20d667945dad5e794a17d11501e21a6a2732c58dea3911c360c9218169de55abfc6966396f60f5072efb2214938c990c2435763825c7166a0742ee9cc932619ed5fda27f93284ff61221599c7a6922cdcb8250c45958c57cb9d6cbafe826469f9d87e59c95569926ae75834cdbc29336f3273d09addb939f95a5d5b59a765d4b4f08bb5089c7e3e7691ec437d360a621350d37826c5556a86ec7f9b3e0cf5a1dad66be4567863de709334dc4b01e1cfd94bf7a8192cea5158e7407b6f819187b66c512c15ae3467654702b50fae0da7b62e2e80f31a168dc9bf33f6a2888c21d0dd5b019e65aa7f957903cb17bb27751e3cc6aaea9f9700eed6033d1b7e939fa6f51a273c89e23800f362767be5605312e1d75fd4e7cdfcf0c4178ef5c1add037399c8c225f6ff4dad1970e95bdfcef8c2e7d98169894bd730408a571e10961bdafcb4f431ca4720d926ecbc1af741c66947c8811dfb3ba8cbcc5dca08fc13be566737773b1aef7db4934f4f3dda7c11bc4f370d36d017f5f13357b9ac4290714aff432843275395cccd23a0b77aa02c207143a8a4c4dde9e869bfa8d6e21a42a5d5ca2b45a63e2e0ad58e20893087528ce9e69ab66c373a2446c04efd4e01f579aa5c1729c5b5b4b8f7097bd64319be49d53089fc76961ad7be9a2a6f7adc21e85db87d2b36fe235a4813f8f073a30ae7a0c26ed150e781206d948acc6d063a5a60411d3b401bc37f524fcbcf0c003965a2927395729763cd7ef58d3ffe937601a376b7f027dedefd09023a7c2f75f468ecce0f4e94930def7566c5f9dd3db090386311d8ce4f7bf00d44bb2e27f9e42b8c4642fd6da87129df84a8126b5e63c6470d3376fa12f3a9d0f1658e1e52fd14a41e205741052120d3d65e267998aa5df7943e9be920e533be76aa7faea979c5cc34c061a770aed4315cd3b9321baf0dd59763b95cc665d02772128fa9a83adf832a1fcfe8e31e9d2ade87736eb5b100d493653131ba57ec24498e691f7eb8f54643cc3722f0d52ce564fd574da4fcc75870a9fd0525f177eff9c75736a484a05051feac7db771f500970ee62c496ac1aa7554306b72fecd1e2c6708613603584cc1f47b9a436c8120a9631f3b3773a89574850e03e9394c9b88ab8f1e2857c2a47d0fa05519b1b5793e31e39e6982a51b1cfc7c6951823b0a5467cf17b9929afcbc154f52b3916f4a82851953f5ee40ec3da01e70329b91aea99fc633fec2fc5eff6099b5ff85bc67c5c5ad40bb21f71a7f6e7e84c8e076ef21316067c2a62cbe3ea19178738950764e1e85b09c4ba3743be0f6d640fada834925594590f3a5346f2aec0ba70bb289dd86e2c15c73d58e18</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>生日</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭光猫改桥接</title>
    <url>/archives/98abee74.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天一到家又被家里的WiFi开始折磨。因为小区比较老了，之前光纤埋线只埋了一个端口，导致现在只有爸妈房间可以装路由。</p>
<p>家里空间比较大，墙壁比较厚，导致我房间一直处于信号荒漠区，晚上在家躺床玩手机还用不上wifi，被折磨了四年o_o ….</p>
<p>前两年在客厅装了个tplink的信号增强器，有效果，我姐的房间实现网络覆盖，but我的还在荒漠区(;´༎ຶД༎ຶ`)</p>
<p>前一阵看<a href="https://post.smzdm.com/p/aevx5gdz/">一篇文章</a>介绍申请公网IP里提到 拨号方式中路由和桥接的不同，这次回家第一件事就是试试这个。</p>
<span id="more"></span>

<h3 id="关于拨号方式"><a href="#关于拨号方式" class="headerlink" title="关于拨号方式"></a>关于拨号方式</h3><p>现在大多运营商都是光迁入户，然后通过光猫实现广电转换。现在光猫基本上都有两种模式，路由模式和桥接模式，两种模式的区别如下:</p>
<p><strong>路由模式:使用光猫完成光电转换，并进行拨号，并路由给其他设备，光猫任务量比较大。</strong></p>
<p><strong>桥接模式:光猫只完成光电转换，使用下一级路由器进行拨号，并路由，光猫任务量轻。主要任务是由路由器完成。</strong></p>
<p>因为运营商赠送的光猫一般情况下性能相对较弱，对于家中设备多的折腾一族来说，因为有大量的设备，端口转发等等，光猫基本上不能满足需求。所以大都是选择光猫桥接，路由器进行拨号，最好选一个性能强悍点的路由器。</p>
<p>光猫改桥接有两种方法：一种打客服电话，他们会后台同步，把配置改为桥接；但是我电话打过去了，湖北电信不肯提供这个服务，无奈；另一种就是拿到超级管理员密码，自行修改。关于这个我也打了电话，问他们超级管理员密码，依旧是说没有，反正没有帮上任何忙</p>
<h3 id="如何拿到超管密码"><a href="#如何拿到超管密码" class="headerlink" title="如何拿到超管密码"></a>如何拿到超管密码</h3><p>尝试了网络上很多方法，得出的结论是大多数帖子都失效了，联通电信移动 又不傻，不会放任一些万能密码的，现在应该都是每台光猫独自的密码，看这种类似的教程还是要看新不看旧；</p>
<p>我是跟着这个视频成功的：<a href="https://www.bilibili.com/video/BV1LS4y187NX/?vd_source=57ac88e7b8d0e5cd1b0c032745042667">电信光猫100%获取超级管理员密码，光猫改桥接，通过小翼管家返回密码_哔哩哔哩_bilibili</a></p>
<p>主要用到小翼管家 和 一个抓包软件，教程里是httpcanary，我用的是IOS系统，所以自己换成了stream。思路流程还是和视频里一样，这里就不赘述了。</p>
<p>这里额外想提一点：</p>
<p>很多时候，跟着网上的教程做一些配置，不能无脑全称跟，还是要有一些基础知识备着，这样才能在一些环节自己做替换。 比如这次的抓包软件 ，以前的我可能就是借台安卓机，非要一步步全程按照教程来，但最近自己正好在学http请求头相关的浏览器知识，所以知其所以然后就自己找了个 ios的抓包软件，软件里界面啥的都不一样，但是只要自己知道为什么做这一步，很多时候就可以举一反三了。</p>
<h3 id="路由改桥接"><a href="#路由改桥接" class="headerlink" title="路由改桥接"></a>路由改桥接</h3><p>连接光猫的wifi，通过超级管理员密码进入光猫管理后台，具体设置指南可以看下面这篇文章，讲的也挺详细，但是有两点不要跟：</p>
<p><a href="https://zhuanlan.zhihu.com/p/358075010">光猫桥接模式设置指南 - 知乎 (zhihu.com)</a></p>
<ol>
<li><strong><del>超级管理员密码：nE7jA%5m</del></strong>  错的</li>
<li><del>关闭光猫的DHCP服务</del>  没有必要，且不建议这么做</li>
</ol>
<p>下图是我的配置截图</p>
<img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230107224133514.webp" alt="image-20230107224133514" style="zoom:67%;" />

<h3 id="光猫接路由"><a href="#光猫接路由" class="headerlink" title="光猫接路由"></a>光猫接路由</h3><p>路由模式下，光猫既干光电转换，又做进行拨号，任务量比较大；改成桥接模式后光猫只完成光电转换，拨号就交给路由器。</p>
<p>GG的是 我又不知道家里的宽带密码，好在现在的服务越来越好了，直接网上可以查询修改，<a href="https://hb.189.cn/pages/selfservice/custinfomanager/password/resetpassword.jsp">附上链接</a></p>
<p>进入路由器后台管理系统，我用的TP-LINK。在上网连接里 使用 <strong>宽带上网</strong>，使用账号密码，就搞定了。网络测速：<a href="https://www.speedtest.cn/">测速网 - 专业测网速</a></p>
<p>搞完明显网络好了很多，上来的流程说来简单，但是也搞了我好几个小时(;´༎ຶД༎ຶ`)。但是这种成功DIY也是超级快乐的。</p>
<img data-src="https://ychch-blog.oss-cn-hongkong.aliyuncs.com/image-20230107230043140.webp" alt="image-20230107230043140" style="zoom:67%;" />

]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>光猫改造</tag>
      </tags>
  </entry>
  <entry>
    <title>数学之美-阅读精摘</title>
    <url>/archives/f0135a41.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>数学之美 是早有耳闻一本著作，去年买了一直也没翻开，最近在看论文，被论文里的诸多方法论折磨的头疼，然后就打算来翻翻这本书<br>阅读的过程中，学习到很多东西，将以摘录+心得的方式记录下来</p>
<img data-src="https://pic4.zhimg.com/50/v2-2e18d7cfc726faa99cf8af8d232532ff_hd.jpg?source=1940ef5c" style="zoom: 33%;" />

<span id="more"></span>

<h3 id="学术请教"><a href="#学术请教" class="headerlink" title="学术请教"></a><strong>学术请教</strong></h3><blockquote>
<p>贾里尼克教授在学术上给我最大的帮助就是提高了我的学术境界，他告诉我最多的是：有什么方法不好，至于什么方法好，他相信我比他强，自己能找到。所以他节省了我很多可能做无用功的时间，同时，他考虑问题的方法让我终身受益</p>
<p>​                                                                                                        ——第7章 贾里尼克和现代语言处理</p>
</blockquote>
<h3 id="如何成为世界一流"><a href="#如何成为世界一流" class="headerlink" title="如何成为世界一流"></a><strong>如何成为世界一流</strong></h3><blockquote>
<p>一个人想要在自己的领域做到世界一流，他的周围必须有非常多的一流人物</p>
<p>​                                                                                                        ——第7章 贾里尼克和现代语言处理</p>
</blockquote>
<h3 id="有关教育"><a href="#有关教育" class="headerlink" title="有关教育"></a><strong>有关教育</strong></h3><p>贾里尼克和我都同意这样几个观点</p>
<blockquote>
<ol>
<li><p>中小学生没有必要花那么多时间读书，他们的<strong>社会经验、生活能力以及在那时树立起的志向将帮助他们的一生</strong></p>
</li>
<li><p>中学阶段花很多时间比同伴多学的课程，上大学以后会用很短时间就能读完。因此，<strong>一个学生在中小学建立的那一点点优势在大学很快就会丧失殆尽</strong></p>
</li>
<li><p><strong>学习是持续一辈子的过程</strong>，很多中学成绩优异的亚裔学生进入名校后表现不足那些出于兴趣而读书的美国同伴，因为前者持续学习的动力不足</p>
</li>
<li><p>书本的内容可以早学，也可以晚学，但是<strong>错过了成长阶段却是无法补回来的</strong>。现在中国百分之九十九的孩子在读书上花的时间都比我当时要多，但是这些孩子可能有百分之九十九在学术上的建树不如我，更不如贾里尼克，这实在是教育的误区</p>
<p>​                                                                                                ——第7章 贾里尼克和现代语言处理</p>
</li>
</ol>
</blockquote>
<h3 id="术与道"><a href="#术与道" class="headerlink" title="术与道"></a><strong>术与道</strong></h3><blockquote>
<p>技术分为术与道两种，具体的做事方法是术，做事的原理和原则是道。很多具体的技术会从独门绝技到普及，再到落伍，追求术的人一辈子工作很辛苦，<strong>只有掌握了道才能永远游刃有余</strong>。很多希望我介绍“术”的人是想走捷径，但是<strong>真正做好一件事没有捷径</strong>，离不开一万小时的专业训练和努力。</p>
<p>​                                                                                                ——第8章  简单之美—布尔代数和搜索引擎</p>
</blockquote>
<p>未完 …</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>数学之美</tag>
      </tags>
  </entry>
  <entry>
    <title>拒绝久坐，健康生活</title>
    <url>/archives/7ebadd91.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>健康生活，拒绝久坐！</p>
<img data-src="https://s2.loli.net/2022/10/11/9f1Y24qRawETlOi.jpg" alt="img" style="zoom:50%;" />

<span id="more"></span>

<h1 id="视频内容总结"><a href="#视频内容总结" class="headerlink" title="视频内容总结"></a>视频内容总结</h1><h2 id="一、脖子变化（颈型颈椎病）"><a href="#一、脖子变化（颈型颈椎病）" class="headerlink" title="一、脖子变化（颈型颈椎病）"></a><strong>一、脖子变化（颈型颈椎病）</strong></h2><h3 id="1、症状"><a href="#1、症状" class="headerlink" title="1、症状"></a><strong>1、症状</strong></h3><ul>
<li>平时坐久了脖子就开始疼</li>
<li>低下头摸到自己后颈骨上最突兀的这个骨头，然后向上摸凹陷的小坑，稍微用点力按，有疼痛感。</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/10/11/9f1Y24qRawETlOi.jpg"></p>
<h3 id="2、该怎么办？"><a href="#2、该怎么办？" class="headerlink" title="2、该怎么办？"></a><strong>2、该怎么办？</strong></h3><ul>
<li>不要瞎去按摩，因为里面可能会有炎症</li>
<li>应该做就是用热毛巾湿敷，有助于消炎止痛。</li>
</ul>
<h3 id="3、保护颈椎动作"><a href="#3、保护颈椎动作" class="headerlink" title="3、保护颈椎动作"></a>3、保护颈椎动作</h3><h4 id="①歪头"><a href="#①歪头" class="headerlink" title="①歪头"></a>①歪头</h4><p>（1）挺胸抬头，坐在椅子上，两眼目视前方然后</p>
<p>（2）歪头感觉你的斜方肌在拉伸，坚持8秒回正，再另外一侧歪头，坚持8秒回正</p>
<p>（3）来回两次为一组，每组做四次。</p>
<p>注：<strong>千万不要过度疼痛</strong>，要找那种刚要疼就停的感觉。</p>
<h4 id="②伸手往反方向扭头"><a href="#②伸手往反方向扭头" class="headerlink" title="②伸手往反方向扭头"></a>②伸手往反方向扭头</h4><p>（1）挺胸，抬头坐在椅子上，两眼目视前方</p>
<p>（2）伸右手，同时向左看，达到疼痛的临界点，持续8秒回正，再相反方向做一遍，持续8秒回正</p>
<p>（3）来回两次为一组，每组做四次。</p>
<p><img data-src="https://s2.loli.net/2022/10/11/g3CaeTXPxnJ8R41.jpg" alt="img"></p>
<h3 id="4、为什么不能过度疼痛呢？"><a href="#4、为什么不能过度疼痛呢？" class="headerlink" title="4、为什么不能过度疼痛呢？"></a>4、为什么不能过度疼痛呢？</h3><p>因为如果你是非肌肉型的脖子疼（如下图），那这么做会加大你的损害程度，达到疼痛的临界点就足以拉伸紧张的肌群了。</p>
<h3 id="5、非肌肉型的颈椎病该咋办呢？"><a href="#5、非肌肉型的颈椎病该咋办呢？" class="headerlink" title="5、非肌肉型的颈椎病该咋办呢？"></a>5、非肌肉型的颈椎病该咋办呢？</h3><p>①【用颈托】限制脖子活动范围。比如整个颈托卡在脖子上</p>
<p>②【直腰不低头】要写字的时候，腰部就跟着成一条直线倾斜</p>
<p>③【目标与视线平行】把你的显示器垫高，大概让眼睛与屏幕上沿平行，就能保证你不低头了。 </p>
<h2 id="二、腰部变化（腰肌劳损）"><a href="#二、腰部变化（腰肌劳损）" class="headerlink" title="二、腰部变化（腰肌劳损）"></a><strong>二、腰部变化（腰肌劳损）</strong></h2><h3 id="1、腰疼该怎么办？"><a href="#1、腰疼该怎么办？" class="headerlink" title="1、腰疼该怎么办？"></a><strong>1、腰疼该怎么办？</strong></h3><p>①坐在凳子上没一会就开始腰疼</p>
<p>用暖宝宝</p>
<p>机制：腰肌脑损，你一加热让血管打开，促进血液循环，无菌炎症引起的腰痛就缓解了。</p>
<p>②疼得很严重（临床指导下使用）</p>
<p>可以使用一些非甾体抗炎药，例如布洛芬、双氯芬酸、塞来昔布等</p>
<h3 id="2、缓解腰痛动作"><a href="#2、缓解腰痛动作" class="headerlink" title="2、缓解腰痛动作"></a><strong>2、缓解腰痛动作</strong></h3><p>（1）心疼的抱抱自己</p>
<p>站起身慢慢的蹲下，然后双臂抱膝重点来了。此时低头屁股往下坐，慢慢感觉你后背在拉伸，坚持个8秒，再起身做四次完成。</p>
<p><img data-src="https://s2.loli.net/2022/10/11/3DXOWjPlRgeLTQb.jpg"></p>
<p>机制：坐久了竖脊肌过度紧张，这么一拉伸就缓解了。</p>
<p>（2）大腿夹矿泉水瓶</p>
<p>矿泉水瓶子，坐在椅子上把它夹在两膝盖中间，然后双脚向外撇，坚持8秒，每天做四组</p>
<img data-src="https://s2.loli.net/2022/10/11/kLmIR5Do7EbwGTe.jpg" alt="img" style="zoom:67%;" />

<h3 id="3、正确坐姿"><a href="#3、正确坐姿" class="headerlink" title="3、正确坐姿"></a><strong>3、正确坐姿</strong></h3><p>可以用椅垫、靠腰、颈枕把人和椅子之间的缝隙填满，也可以用人体工学椅（全贴合）</p>
<img data-src="https://s2.loli.net/2022/10/11/qWvnYexJiZ8klj3.jpg" style="zoom: 67%;" />

<h2 id="三、久坐导致的疾病"><a href="#三、久坐导致的疾病" class="headerlink" title="三、久坐导致的疾病"></a><strong>三、久坐导致的疾病</strong></h2><p>疾病：前列腺炎、痔疮</p>
<p>原因：坐时间长了，血液循环不畅</p>
<p>预防：PC肌训练</p>
<h3 id="1、预防久坐最实际有效的方法"><a href="#1、预防久坐最实际有效的方法" class="headerlink" title="1、预防久坐最实际有效的方法"></a><strong>1、预防久坐最实际有效的方法</strong></h3><p>每半小时变换一下姿势，可以起来活动活动，在合理的角度内调整自己的坐姿（腰背部要填满）</p>
<h3 id="2、久坐健康指南"><a href="#2、久坐健康指南" class="headerlink" title="2、久坐健康指南"></a><strong>2、久坐健康指南</strong></h3><p><img data-src="https://s2.loli.net/2022/10/11/cetyBMThl7wXN2P.jpg"></p>
<h1 id="原视频"><a href="#原视频" class="headerlink" title="原视频"></a>原视频</h1><iframe src="//player.bilibili.com/player.html?aid=603891029&bvid=BV1mB4y1j77G&cid=857849956&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p><a href="https://www.bilibili.com/h5/note-app/view?cvid=19020101&pagefrom=comment">笔记详情 (bilibili.com)</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1mB4y1j77G/?t=41&vd_source=57ac88e7b8d0e5cd1b0c032745042667">【医学博士】每天久坐8小时，身体会发生哪些变化？I 考研党、上班族必须收藏！_哔哩哔哩_bilibili</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>随记</category>
        <category>养生之道</category>
      </categories>
      <tags>
        <tag>久坐</tag>
      </tags>
  </entry>
  <entry>
    <title>画江湖之不良人</title>
    <url>/archives/e0ab66cc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>悠悠众生 因果循环 大道至简</p>
<p>世间若尽是不如意事，越是执着，便越是苦</p>
<p>不如安下心来</p>
<p>看该看的风景，做好该做之事</p>
<p>初行娆疆 所悟如此</p>
<p>就像曾经有一位紫衣姑娘 第一次来中原时一样</p>
<span id="more"></span>

<hr>
<p>前几日心情烦闷，把自己关在寝室花了两天刷完了不良人1—5季，可谓是除了睡觉就是在看剧了</p>
<p>报复性看剧的缘故，没有慢慢欣赏这部优秀的国漫作品，但看的过程中依旧很感动，特别是三四季</p>
<p>不良人我很早就看过，当时只有第1部，百度一下才知道不良人从14年就开始制作了，就算一年拍一部，也应该有七八部了，更新上确实忒慢了。</p>
<p>翻了翻知乎和贴吧，看到好多说若森快凉了的消息，我这心里又是一紧，慢就慢吧，可一定要一直更新下去！</p>
<p>等到下次更新后，我会从头再看一遍的┗|｀O′|┛ 嗷~~</p>
<h4 id="资源链接："><a href="#资源链接：" class="headerlink" title="资源链接："></a>资源链接：</h4><p>「不良人第一部」<a href="https://www.aliyundrive.com/s/YPD1NgKoXGf">https://www.aliyundrive.com/s/YPD1NgKoXGf</a></p>
<p>「不良人第二部」<a href="https://www.aliyundrive.com/s/Hip2dtFf6B9">https://www.aliyundrive.com/s/Hip2dtFf6B9</a></p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>不良人</tag>
      </tags>
  </entry>
  <entry>
    <title>中国平安前端面试</title>
    <url>/archives/19065a70.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="00c71fa204ddb4349ed2b32825c47fbbeded12adce43ff82a7e6e8ceec8f1b59"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>中国平安</tag>
      </tags>
  </entry>
  <entry>
    <title>南方基金+qq音乐</title>
    <url>/archives/43293ce1.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f7cff10dda9405c8de3f05a0f2d8b577c77e54fff4b619a3a5310d53bc24d9a7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>南方基金</tag>
        <tag>qq音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>小红书前端面经</title>
    <url>/archives/d7c4b1e.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5f524c34bfe4f82fb40085b0133c7fab0a43102a0e070e8b7c267b19cd867b6d">76a564cf6a4091bde4fff08fa9cda2a247c4cdd737369a731c51df7d65acd49b4e01eff2db11f7f71dd5d8041f2873a34c7b018d654fb61739c890a6a44889e3675924e640a59206cbaa04bfc658aff070cacd128282ddf03a06a955b91291d95b66602f170c9d9d8c8d8ccdc7620d14fd86697f465e431b408fb3c9d09a471e1c2bb682292299c785b35f51322ad8cc2fbeb471b92069190c49fbc603d57d4628f583847efc600aebb244974ed0f5a2b3be4f9fcec15b1fdf5d9e303105269da4d8f936110d009f42082937235733dad134de85cffb089bdb775b961010911f708bf89d4bff7c5af6b309504b5cc39453040a6788220275e463701d97a22968aa164db8e1577be8003afdd6b5a9d4538af0bf4746dc312538a35d04d427f25a49f20d90baa2f666c6808e28cf628218f6f00a62fa4623687ee5ff0f966000d3d9693242021e09935a7f5b71fe5c906b55ce48f5666c5c40bcdcf0e367a7519c2b63efb7e8165dd0ac2c4622f8e07ff8912275959aca1d0d13d38e5f31b72db10714b993e2fb2a6fffb6095910c890f433b06d05bfd7e962e3c0b7e76d635d56b6ff8b6bd6a5f2ca89cba38f1f03e72d2c252cfb1d2908be35cfa1374601bc84fa59a49aa2a5f91a03b3aeee5688485dbc2109f16cc29df950655fc2877c59388171cbe57f00ea02dd996dd705c31f7ce83ba1825d0f81b9e644cb6818cef43fd90345da618876133c294470322c77db2d1cda22b5e1107477b6f4cc36ecd0bb6ea31cde7df2ffa5d6a068ebbf4efba529db7d11d18df9ade9e9c9326828b84d7c311947387bcc80b0f6ec5e971ce14d0f6eb32c72fa77ba7a2f1fb6de3f2d6a6b13be8ca1676d48b793d5871a9d5fbeae764c9e041c5ecea622a7b49d95534bf1d0cb236d53a241dbefb0409203984dca6a52a6b9d9624cd58972700ba5a6d29741149e89bedaf5b09a89e95754375f138d50e8d78d3e02540ea5ff5af87c3015b6064e377a0581d5967af232f3b1893d9fc31fa446a996d39a3bede5cca6976bbe6029e6153e3c3eb057318c13c244c0dc5659bc60863b3a669adbfbcbfe3c5cf18e33468387c48c8728374bdae88b8bc59c041a4a4b08b2302ab237cb1e7b95a1ee20baa5a20ce9ed86fe5d2837a05b66372bfe56d94500ce136a38cc56f7bc04cb7ed8af55a749bf90fb10b3bc78a4978304febb27ec7f24d2fb947fb6786dfd3b89e0cc89aa0181cd8dbe5e1cf6fabd0f156d7e4c9fd2a41b7b471aeb8637ab4eb0a72987d2f0f8808b60527de798ce122ae9b8fbce1050fe9b461009348ef681ad540a3b6d77a6ed22f34151758c71044b89377dc9b8b991f5b957ceb4f79b0a39db89e48e0649f63e1a82af32db9107c14c6a6bd2aec7b1f2609298c750125296c4fbd82c06d04f0884e6b6d2134afb6cc4967e6c2e35d15f23b88a2380481b750965f5ae1730fd6cee2b4a176fccc4c5ba4f8bf72a902969b2ab3768d26e485b6b95c1873a700096747530047b2db413d355cff5cf7608fdec8060439b9819f20b6bd5f3eec37ce62f54439479f573d13f4257bdada8c6061cdf978d6483cc974da7bfefc81e8e9bc3a643c7e271d6a72f8a250ae1c6c72dde0fa757578c55e5144b434a87e70e695f4b7bfdf8edf56866cbd6955883ca43912fbd3c680f928088a9bd5d92f68366c385d84deefdf9a96351617c50b262704dd8c86dd4b2a85ceb25a4e5d530f4dcd995d5b411c3afd9052138f182d611a5c5c641da0a867c993b664997681c23259a234716136a90ef1002cad044b30e2cde9e819587d874e114df626cf1711fe0a80ce3545a6e29d2e5e8592e5881223b2f1f49be9e9ae8dcb8e15f604b3adf7b92057e808320b5e16092410b841e831d13615bbc19f1e2f161e18fd33c05b0400eaee6b25576932521ae5c188eddd68881904e651f75e537fad493e55d8dc07b8b14c3904cc39556660775272200bea7c49bf03d8f85aed267e0ee5ca309b948f04b51bde3ba6c4164195399502ebc2ac82e721aea127b72fd3c53e0fcd409fc519ec4cc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>小红书</tag>
      </tags>
  </entry>
  <entry>
    <title>拼多多前端面试</title>
    <url>/archives/cfccc4d5.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1e7c4440af1cb466ad4b0014ec29bac6c5adc94d349ae69d3c9f77e3c8065894"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>拼多多</tag>
      </tags>
  </entry>
  <entry>
    <title>求职之路</title>
    <url>/archives/11073bfc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以此记录前端求职历程</p>
<span id="more"></span>

<h1 id="求职规划"><a href="#求职规划" class="headerlink" title="求职规划"></a>求职规划</h1><p>校招分为三个阶段：</p>
<p>​      <strong>1.暑期实习：</strong>大三或研二下学期的3月初开始，6~8月为实习时间。<br>​      <strong>2.秋招：</strong>7月初提前批开始，10月底随着各学校三方下发陆续结束。<br>​      <strong>3.春招：</strong>第二年年初陆续开始， 经历过秋招失败之后，别松懈，总结秋招经验，寒假期间在牛客网的求职-<a href="https://www.nowcoder.com/school/schedule">校招板块</a>中关注春招动态。</p>
<p>时间规划：</p>
<p><img data-src="https://s2.loli.net/2022/11/14/uhaEHpzMJkD8WN1.png"></p>
<p>现在是22年十一月，还有时间准备简历和技能树</p>
<p> 从书本+技能树+面经三大方面巩固基础知识，通过项目累积经验。</p>
]]></content>
      <categories>
        <category>求职之路</category>
      </categories>
      <tags>
        <tag>求职之路</tag>
      </tags>
  </entry>
  <entry>
    <title>百度前端提前批</title>
    <url>/archives/9dc3568f.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6b9381cab2c2404f66fc0748c020cce2584dd2b5cd8bbe29576063247c5f1333">76a564cf6a4091bde4fff08fa9cda2a247c4cdd737369a731c51df7d65acd49b4e01eff2db11f7f71dd5d8041f2873a34c7b018d654fb61739c890a6a44889e3675924e640a59206cbaa04bfc658aff070cacd128282ddf03a06a955b91291d95b66602f170c9d9d8c8d8ccdc7620d14fd86697f465e431b408fb3c9d09a471e1c2bb682292299c785b35f51322ad8cc2fbeb471b92069190c49fbc603d57d4628f583847efc600aebb244974ed0f5a2b3be4f9fcec15b1fdf5d9e303105269da4d8f936110d009f42082937235733dad134de85cffb089bdb775b961010911f708bf89d4bff7c5af6b309504b5cc39453040a6788220275e463701d97a22968aa164db8e1577be8003afdd6b5a9d4538af0bf4746dc312538a35d04d427f25a49f20d90baa2f666c6808e28cf628218f6f00a62fa4623687ee5ff0f966000d35c986e8c2fe7be3615bccac775965d71d6f76ae2057b2aad249ccf1931b54b4192222e03bcf684fa97f1cc50297095fc37636696c7a8d8d3823e21d9f04e3c130ba22666685a10b850a098ed8abd924696d352122b825e8d8f68236120bfe83964a1ade0d6dbe67fe9dd47970f7c5920beb0f42fce5748eb4d0b2f5d2415a98ba4764b283c8cef6bc7ef8f8accdd323612c53b30e7d32257073f7177833cff1b2c626c9cf64442c97ef2c714e32db35d493d18612fad29d0abf6e0fdb24ade50ab0ac03066b28ed033933a5f0729311ee9ff5d08ca79c9ef07df8ac6d9f04c854349901c725193a71edcb8897b8c7057a9e3aebeca8344f8ee343f15d2adabf4bd5045d4b3d71661714eb919e8532cfacf083a41ad65ec07143703962826da4d7047e22f79960dd9055f164974d650a18a8ecffc5d55fba21bfd18518c3840d7aae73373e6bb0f20e023f4a987fa96e9ce7f778506141ff713c7df1cd8544d06bea0583a27707815da1bcf512b08170dfbca31281eb231c6f7c069200c9c1e915c4c68c51bf8c6d60a654e998d0980abe3f0e4bed5d43a9be7d37c693cf3acd3707994317415abaa3c9a9e2d68c84262dc8fd78e9c1627a3f89c8e52cf288b361e5e03019c2a4472d6b2391095de83b7086f922ecd2256240ca644ceedd72df0a2cef917d899d0b732f73b5c9240d38fc4a041f5fcccdc361762400d9e5baff5f993244ff2b54e0a283e837365e6fa587e1a678cd9e7389263acafa08ac18003aedaab84017a5ee3558049a6b08b96b96cb207b3a47d34d4a1b8681602588c58931793e365f280c621fc9aad0f58b5f2ad9fc565432acf3aa0eaca14b7d67ad672de4ae418ee6d2000a084c80040fd67d30800410561b53af1071a99a480c61e826a43a0c8f7a16d7cddf908c175b581e87e66144b1569ffb9f371207b4dda1e5ca1e728140ff373baeaf453cbc2facbe1c0ea1657d2cb537499221ad7c2dd95457c7abc0829f7497a886676888baae686d8d1964b19ecc70d2a794580b4c77dadf5b73801ecc798a50a0f2ab505d25383548b6b1a3eb43ac647a71fc35def191fc7f81dd50259af5fd9e54b052e7884cc1c9e835a0f7c1540cef6388dcce312fdb7e4e1e313964e97bfea863ff8afd4f2967b0aabf659cec745b822b9b36f1f1235b3077f97cfa00ee5f5da89dbc3ccf40fa721be1fffb9603301300fb1069e84c54999b93ad780655879310be069181a01127d9f6a7ec99a115a44e507877f3b3e20666418addf4cf36d740d72902c8cdbc650b8dc06c7182debd1d3953448a96833f2d974f6a74f5a57f838ede26ed43e90c7bb3ba4534da277b79b6b026246de29fc8a3468e4a13d03b911f57b15a1f5b3034fd91ad99dea56738c796a1236f3f613b31c534eebb7571b8cdfb40d29bb6e661af29285409ec4fd03c967c2a09fb0744d2a09a90349185e9ef8be5ebaa7b6b5aa2832f2871df4c9dce57367944a153ba3af419a254aca49abe4736f56143e6b32a281c7d51cc8ca5bdf0f6c8503aa737a27db2fe06eab09d6fd3210d23d6ee82c4fa8d395e1a52ce803864fec239af56345cb53644a9c2d0964228846b8b03efc0745bac276577249be5dd2a3bcb74cb068d3e8de17b390260357bd2f0c68a47d7831dae8510537144490550bc2ee6fb728b759fd53d4cdc6162d27abd3794ae92e11510ea7c6df598e93ea2add044a642ec889f4031b84ed0f88a35b1f8bc3ddf52924ba4bacd70bc74554ad6b8d2cc5fe33840e0a1df8a6de4b65e5b45a8725dd12dbccaa932678912bb3ddbe012459e80317c7b0f8d883e8be491c9a104096126cde0b36345fee079c46c63288bfe6fc9a49cfbc0d377d59c96a93b3f6e0fdf4f940acc769d03247ffd3bb4bbf7a20937f6592fdead96f630de296512b96051cb21c33c1b6f3cfee07fed96647fbc8b01bac2f852513bdeadb34954937b03f0a46e636ba75e1e71f8e8e49d7843fca46697412960d78befd8de4a91cadaed8d52141d65e6c5d5f4a163efa1c34ad085bb67c8352f2d06678d2768c8368ec6838744e7232722cce652a001c794f0517434f70a2fa7036d8675536ba9d11054f5d7dbffc927eaab7be9b4a8d75a0a770347e14ebdb9dbc7e9e97df7c26193763df4a0a7b30e94c818a87f3603a9400648c492ba2a0af1f20b39667d1667efadeb04057040133b313b98f9ef1ad431473cf51ffc36cb729c7746a6b2b04a30535a339f43584568581dba3e8cde663a2291b459485cf9a939eaa6ee6477a3479a689c464ebaae9b735330c3f1341c0d66498ea730cf9d79a86297b7ab3fb573d1bdd98f0e813314eddb5cd59f4c9c0f01f62311cdfb6856473decc9d4b8ccfbd7d76397335c1f912892eabc2aefb60174ad2dde0a518ffdcf75eece53fd800bad4098f60ddc884830f2946dd55ca201f56b0c7545c93e6b305c84b28952044b3c30ff78972def95d0a23807e7e47f8d0899d137acadc4e2412d11a710e7f732f50545623562e8d85efc97f66c6c154d8c42b2eddddd6171cdd5a5bc019247f1e903eb42b86a93b08b4017b0ca46bbeb965ff385c3b483dc4edf3b9990cb87b6088417d1e71dc190b986b1aecc06e42b6eeb63d0453311ebd2b2c4a5b9682d8204f40f89bcc532ad7e899febca91f4aa34459333c4c071314f2a6f2a215c1c99118c86b0deb2642c8cebf70548510bf5031993b896262f843bd6e6c41be2003961f64525e8bbe68b577354059cc1e9c1a5eca32617d22515b3ffebc3e794877aff612b8a5b2ad16a2cb823affd9dada26b9be23199e66068381abc9f1d6186233b69850911884ee030732294a126977b74f6ee521e90420106ae728d1c9d32e02b8e76c4219bdaa703b55493ed43d8b20cba6ef3d3af6600031387a07a74b89bcd647bcfae6390560dbef96dba6a8e1d56852ceec77fa3231f3d740d5bc4e21849c979089d02692d821506f1628638575b4b0bc3b56ad69f13f6b5e9c3f73da8c18041b91289ee327e2ebeb287c95f98d301b521af8196b01a9840e12afc1935589f22d31d71753e8b2f3dc0717b97e5dd989491de7ac017d2e711fd7eb933ee52300cd59dff0e4c13fdfa0a73a87827c8fc6e94d108c9258220fc63c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>百度</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云SLS前端提前批面试</title>
    <url>/archives/a1cc9d5d.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="725a8809de4ace19c6e136c5bbd244db2f2ceeb716a20f860f6d89648a94d2ac"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>顺丰地图前端面试</title>
    <url>/archives/7a7b7b88.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a6477ec31aa42478050121fd123b571769a999e8f2c511487adb4bc80d8186e7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">请输入密码</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>顺丰地图</tag>
      </tags>
  </entry>
  <entry>
    <title>Picx图床推荐</title>
    <url>/archives/3eece56f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>PicX 是一款基于 GitHub API &amp; jsDelivr 开发的具有 CDN 加速功能的图床管理工具<br>免费、稳定好用、不限容量不限速度，~~Picx谁用谁知道~~~</p>
<p>因为不知名原因，PicX的压缩突然出了问题，这就严重影响了我的使用，问了开发者之后，他们说没有问题，however搞了半天还是没有搞定，就换了个平台，一下子入坑 PicGo+Typora+smms，感觉比PicX 好用</p>
<p>详情请转至：<a href="https://ychch.top/archives/b19d3262.html%EF%BC%8C%E8%AF%A6%E6%83%85%E9%A1%B5%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%AF%E4%BB%A5%E5%BD%93%E6%88%90%E6%98%AF%E5%9B%BE%E5%BA%8A%E7%9A%84%E4%BB%8B%E7%BB%8D">https://ychch.top/archives/b19d3262.html，详情页的内容可以当成是图床的介绍</a></p>
<img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/Picx.7d9g65n3wt00.webp" alt="Picx" style="zoom: 50%;" />


<span id="more"></span>

<h1 id="何为图床"><a href="#何为图床" class="headerlink" title="何为图床"></a>何为图床</h1><p>图床就是在互联网中存储图片的空间，举个例子<br>QQ空间里的相册、微博里的相册其实都是一种形式的图床，当你将这些照片分享给好友时，你分享的是其实是一个独一无二的访问链接，这个链接指向的空间就是图床。<br>简而言之：</p>
<blockquote>
<p> 图床 = ( 图片 + 访问链接) 的集合</p>
</blockquote>
<h1 id="为什么需要图床"><a href="#为什么需要图床" class="headerlink" title="为什么需要图床"></a>为什么需要图床</h1><p>会接触到图床的人通常是一些网络上喜欢写博客的人，写博客时通常会采用markdown的格式去编辑文字。<br>markdown中添加图片通常是使用如下标签：</p>
<blockquote>
<p>! [图片名称] (图片链接地址)</p>
</blockquote>
<p>当你的文章发布到互联网中时，其他人如果也想看到这张图片，必须将图片放到互联网中云端存储，每张图片就会有独一无二的访问链接，当图片一多，就变成了图床。</p>
<h1 id="使用图床中常见的问题"><a href="#使用图床中常见的问题" class="headerlink" title="使用图床中常见的问题"></a>使用图床中常见的问题</h1><p>市面上的图床主要分为免费和付费两种，收费的优点在于地址保持、独立域名、速度和稳定性上可以会好一点，免费的大部分都不太靠谱，有跑路的风险。<br>下面列举了使用图床中常见的问题</p>
<ul>
<li>hexo静态博客写文章，不知图片保存到哪里去…</li>
<li>花钱租服务器托管图片，又贵又难配置…</li>
<li>网上心仪图片的链接，用着用着某一天就失效了…</li>
<li>市面上的大多数图床，付费、容量小、限时限流又限量，劝退一众博主…</li>
<li>….</li>
</ul>
<p>Picx则兼顾了两种的优点，又免费又好用，配置起来也简单</p>
<h1 id="Picx功能特性"><a href="#Picx功能特性" class="headerlink" title="Picx功能特性"></a>Picx功能特性</h1><p>PicX 是一款基于 GitHub API &amp; jsDelivr 开发的具有 CDN 加速功能的图床管理工具，免费、稳定好用、不限容量不限速度，非常好用</p>
<ul>
<li>支持github、CDN两种外链，国内国外访问都有保障</li>
<li>支持拖拽、复制粘贴、选择文件等多种方式选择图片</li>
<li>支持图片重命名、哈希化和设置命名前缀</li>
<li>支持批量上传、删除和复制图片</li>
<li>支持多级目录管理</li>
<li>支持一键转化markdown格式外链</li>
<li>支持图片压缩</li>
</ul>
<img data-src="https://s2.loli.net/2022/03/18/C89lR6MJwnbt2pi.png" style="zoom:80%;" />

<h1 id="目前不足的"><a href="#目前不足的" class="headerlink" title="目前不足的"></a>目前不足的</h1><ul>
<li>不支持设置图片水印</li>
<li><strong>不支持其他git厂商</strong>(gitee or coding)</li>
</ul>
<h1 id="Picx使用教程"><a href="#Picx使用教程" class="headerlink" title="Picx使用教程"></a>Picx使用教程</h1><p>Picx的使用非常简单，配置下来10分钟就搞定了，主要分为以下三步</p>
<ol>
<li>创建github仓库</li>
<li>获取github token</li>
<li>配置图床即可</li>
</ol>
<img data-src="https://s2.loli.net/2022/03/18/lzN14TSnAgOwqXe.png" style="zoom: 80%;" />

<p>在这里就不赘述了，具体可见官方文档</p>
<blockquote>
<p><a href="https://picx-docs.xpoet.cn/tutorial/get-start.html">https://picx-docs.xpoet.cn/tutorial/get-start.html</a></p>
</blockquote>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>-<a href="https://picx-docs.xpoet.cn/">picx官方文档</a><br>-<a href="https://opensourcelibs.com/lib/picx">https://opensourcelibs.com/lib/picx</a><br>-<a href="https://www.cnblogs.com/cs-markdown10086/p/15091673.html">https://www.cnblogs.com/cs-markdown10086/p/15091673.html</a></p>
]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建之路</title>
    <url>/archives/9a82cdbe.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>hexo是一个快速、简洁高效的博客框架，适合想象丰富的博主们自由打造博客空间。</p>
<p>我在配置好基础的框架后，开始根据网络上各位大佬们的博客进行的模仿改造，现将一系列的搭建过程记录下来，希望越来越好。</p>
<span id="more"></span>


<h1 id="博客现状"><a href="#博客现状" class="headerlink" title="博客现状"></a>博客现状</h1><p><strong>待完成：</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 优化网站加载速度，会优化搜索排名！</li>
<li><input disabled="" type="checkbox"> 背景音乐的添加(没考虑好，加了可能比较鸡肋)</li>
</ul>
<p><strong>已完成：</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> hexo基础建站</li>
<li><input checked="" disabled="" type="checkbox"> 更换背景图片</li>
<li><input checked="" disabled="" type="checkbox"> 本地搜索</li>
<li><input checked="" disabled="" type="checkbox"> 搭建 影像馆 页面</li>
<li><input checked="" disabled="" type="checkbox"> 站点收录，目前还存在一些小问题</li>
<li><input checked="" disabled="" type="checkbox"> 域名的购买及配置</li>
<li><input checked="" disabled="" type="checkbox"> 加入豆瓣读书、影评界面</li>
<li><input checked="" disabled="" type="checkbox"> 网站的站点收录</li>
<li><input checked="" disabled="" type="checkbox"> 添加 只言片语 页面</li>
<li><input checked="" disabled="" type="checkbox"> 如何添加置顶</li>
<li><input checked="" disabled="" type="checkbox"> 如何通过点击放大网站图片</li>
<li><input checked="" disabled="" type="checkbox"> 优化网站字体</li>
<li><input checked="" disabled="" type="checkbox"> 博客访问量统计</li>
<li><input checked="" disabled="" type="checkbox"> 粒子时钟 + 鼠标点击烟火特效</li>
<li><input checked="" disabled="" type="checkbox"> 背景娘 ，加个简单的背景娘，太花了分散注意力</li>
<li><input checked="" disabled="" type="checkbox"> 加评论，<del>现在用的是Valine评论，考虑换一个好用点的</del>，现在换成了waline</li>
<li><input checked="" disabled="" type="checkbox"> 加个友链~~~</li>
<li><input checked="" disabled="" type="checkbox"> 图片链接 用的是 Typora+Picgo，可以自动上传，且访问稳定</li>
<li><input checked="" disabled="" type="checkbox"> 文章末尾加版权信息</li>
<li><input checked="" disabled="" type="checkbox"> 美化归档/标签/分类页</li>
<li><input checked="" disabled="" type="checkbox"> hexo 多平台同步使用，坚果云同步文件夹</li>
<li><input checked="" disabled="" type="checkbox"> 随时上锁日志</li>
</ul>
<h1 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h1><p>hexo是一个快速、简洁且高效的博客框架。写作上支持markdown语法，同时支持非常多<strong>第三方功能插件</strong>，可拓展性很好。</p>
<p>我的博客基于hexo，选用的是<strong>Next主题</strong>中Gemini风格，是一款简约风格的主题。</p>
<p>我想让自己专注于内容，尽少的被花哨的功能迷昏了眼，虽然DIY起来确实是很欢乐~~</p>
<p>有四点需要提前说明：</p>
<ol>
<li>以下的绝大多数功能都是已经开发好的功能插件，安装后简单配置一下即可，使用起来很简单，我这里不再多赘述，附上网络上已有的靠谱链接，再写一下使用中需要注意的地方</li>
<li>其次就是很多功能如访问量、评论、本地搜索等在<strong>Next主题下</strong>的config配置文件下已经被提前写好了，你需要做的就是<strong>找到他们</strong>，把<strong>默认的false改成true即可</strong>。其他的主题可能config配置文件下没有集成那么多功能，需要去安装相对应的插件🙄</li>
<li>有些功能如看板娘、影像馆等如果自己去加一些代码，也不要畏难。耐心+细心 跟着网上的教程也很快的</li>
<li>不同版本的next配置文件会发生一些变化，比如swig格式改成njk格式，配置文件的路径也变化，但是万变不离其宗，照搬代码的时候不要太死板！！</li>
<li>再深度的改造就需要自己有比较好的前端开发能力了，可以在前期的copy过程中多留心，去思考，后面摸清楚之后结合自己的喜爱去设计自己的内容</li>
</ol>
<h1 id="基础建站"><a href="#基础建站" class="headerlink" title="基础建站"></a>基础建站</h1><p>具体过程参考下文：</p>
<ul>
<li><a href="https://tding.top/archives/7f189df5.html">Hexo建站教程</a></li>
</ul>
<h1 id="更换背景图片"><a href="#更换背景图片" class="headerlink" title="更换背景图片"></a>更换背景图片</h1><p>目前我这里只是简单的换了一个背景图片，没有加什么特效，也木有视频作为背景，后面看情况再做优化</p>
<p>更换背景图片的做法是，进入<code>themes\next\source\css\main.styl</code>，我在这里选用的是next主题</p>
<p>在最底下插段代码，参数可以根据参数具体含义和背景图片自行调整 (如果没有找到这个 main.styl 目录，直接去主题文件夹下 sources 找 css 文件，在主要的 styl 下附上这段代码，也是一样的效果)</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">body <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(/images/your-picture.jpg)</span><span class="token punctuation">;</span> <span class="token comment">//这里把图片直接放在images下</span></span>
    <span class="token property-declaration"><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span> </span>
    <span class="token property-declaration"><span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span> <span class="token comment">//不重复</span></span>
    <span class="token property-declaration"><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>      <span class="token comment">//填充</span></span>
    <span class="token property-declaration"><span class="token property">background-position</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token unit">%</span> <span class="token number">50</span><span class="token unit">%</span><span class="token punctuation">;</span> <span class="token comment">//放在屏幕正中间</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>修改 <code>Hexo/theme/next/_config.yml</code>文件</p>
<p>ctrl+f 搜索全局 输入<code>local search</code>，修改配置项，具体如下</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Local Search
# Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb
local_search:
  enable: true
  # If auto, trigger search by changing input.
  # If manual, trigger search by pressing enter key or search button.
  trigger: auto
  # Show top n results per article, show all results by setting to -1
  top_n_per_article: 1
  # Unescape html strings to the readable one.
  unescape: false
  # Preload the search data when the page loads.
  preload: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="搭建影像馆界面"><a href="#搭建影像馆界面" class="headerlink" title="搭建影像馆界面"></a>搭建影像馆界面</h1><p>小丁的博客是我最早期关注的博客之一，我的博客里有很多模仿他的地方，非常感谢</p>
<p>具体过程参考下文：</p>
<ul>
<li><a href="https://tding.top/archives/607c3b85.html">Hexo-NexT 实现相册</a></li>
<li><a href="https://blog.csdn.net/weixin_42529972/article/details/109485019">关于给hexo博客增加相册页面</a></li>
</ul>
<h1 id="站点收录"><a href="#站点收录" class="headerlink" title="站点收录"></a>站点收录</h1><p>检查自己的网站是否被收录，在搜索因素输入 <code>site:ychch.top</code> 即可</p>
<p>如下图，有搜索结果就是被收录了😁：</p>
<img data-src="https://s2.loli.net/2022/04/21/imeRxt8quw1KYhk.png" style="zoom:80%;" />

<p>这样就是没有被收录😥：</p>
<img data-src="https://s2.loli.net/2022/04/21/JUa1wvnfp7ZGl5x.png" style="zoom:80%;" />

<p>如果你用的主题更新的很频繁的话，其实这都是在主题配置文件里的功能选项，直接在里面添加就好了</p>
<p>我用的是最新版的Next主题，主题下的_config.yml都已经留好了功能位置</p>
<p>在常用的google、bing和百度下填好自己网站的验证码，将enable baidu push从 <strong>false改成true</strong>，如图所示：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># SEO Settings

index_with_subtitle: true

# Automatically add external URL with Base64 encrypt &amp; decrypt.
exturl: false
# If true, an icon will be attached to each external URL
exturl_icon: true

# Google Webmaster tools verification.
# See: https:&#x2F;&#x2F;developers.google.com&#x2F;search
google_site_verification: 自己填

# Bing Webmaster tools verification.
# See: https:&#x2F;&#x2F;www.bing.com&#x2F;webmasters
bing_site_verification: 自己填

# Baidu Webmaster tools verification.
# See: https:&#x2F;&#x2F;ziyuan.baidu.com&#x2F;site
baidu_site_verification: 自己填<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>传统的收录教程也附上：</p>
<ul>
<li><a href="https://www.cnblogs.com/Likfees/p/16352073.html#%E9%85%8D%E7%BD%AE-%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81">Hexo-域名设置+收录</a></li>
</ul>
<p>再附上三个平台的站点管理链接：</p>
<ul>
<li><a href="https://ziyuan.baidu.com/">百度站点管理</a></li>
<li><a href="https://www.bing.com/webmasters/">bing站点管理</a></li>
<li><a href="https://developers.google.com/">google站点管理</a></li>
</ul>
<h1 id="添加-只言片语-页面"><a href="#添加-只言片语-页面" class="headerlink" title="添加 只言片语 页面"></a>添加 只言片语 页面</h1><p>目前用的是 artitalk.js，其实不太好用，加速速度也挺慢，界面我也不是很喜欢，后面有时间精力再换一个~~</p>
<p>配置起来倒是很简单，新建一个页面，<code>hexo new page</code> 自己给个名字，我给的是 shuoshuo，直接在新建页面下输入：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引用 artitalk <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://unpkg.com/artitalk"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 存放说说的容器 <span class="token operator">--</span><span class="token operator">></span>

<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"artitalk_main"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">new</span> <span class="token class-name">Artitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// Your LeanCloud appId</span>
    <span class="token literal-property property">appKey</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// Your LeanCloud appKey</span>
    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>appId</code>和<code>appKey</code>需要自己去申请账号等获得，跟着教程去一步步设置即可</p>
<p>更高级的配置方法可以自己的配置，具体过程参考下文：</p>
<ul>
<li><a href="https://artitalk.js.org/">hexo添加 只言片语 页面</a></li>
</ul>
<h1 id="博客访问量统计"><a href="#博客访问量统计" class="headerlink" title="博客访问量统计"></a>博客访问量统计</h1><p>修改 <code>Hexo/theme/next/_config.yml</code>文件， <code>ctrl+f</code> 搜索全局 输入busuanzi_count，修改配置项，具体如下：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi.
# Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi
busuanzi_count:
  enable: ture
  total_visitors: true
  total_visitors_icon: fa fa-user
  total_views: true
  total_views_icon: fa fa-eye
  post_views: false
  post_views_icon: fa fa-eye
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然也有其他的工具也可以做访客统计，但是有些繁琐，我就没有花时间去探索了</p>
<p><strong>有一点值得注意，hexo s部署在本地预览效果的时候，统计数会不正常，当把博客部署到云端时即可恢复正常</strong></p>
<blockquote>
<p>这里需要注意：需要保存好源码，不然容易统计量清零</p>
</blockquote>
<h1 id="博客添加置顶页面"><a href="#博客添加置顶页面" class="headerlink" title="博客添加置顶页面"></a>博客添加置顶页面</h1><p>无需下载插件，添加一段代码即可</p>
<p>修改 <code>Hexo/yourblog</code>文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code></p>
<p>添加如下代码 <em>(其实仔细看看，也很好懂)</em> ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">posts<span class="token punctuation">.</span>data <span class="token operator">=</span> posts<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">==</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>date <span class="token operator">-</span> a<span class="token punctuation">.</span>date<span class="token punctuation">;</span>
          <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>top <span class="token operator">-</span> a<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>date <span class="token operator">-</span> a<span class="token punctuation">.</span>date<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用时：在需要置顶的文章添加top属性即可，数字越大 置顶越靠前</p>
<img data-src="https://lxiuaunng.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6.png" style="zoom:67%;" />

<p>具体过程参考下文：</p>
<ul>
<li><a href="https://lxiuaunng.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/">Lxuan‘s blog</a></li>
</ul>
<h1 id="通过点击放大图片"><a href="#通过点击放大图片" class="headerlink" title="通过点击放大图片"></a>通过点击放大图片</h1><p>修改 <code>Hexo/theme/next/_config.yml</code>文件</p>
<p>ctrl+f 搜索全局 输入FancyBox，修改配置项，具体如下</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.

fancybox: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="优化网站字体"><a href="#优化网站字体" class="headerlink" title="优化网站字体"></a>优化网站字体</h1><p>具体过程参考下文：</p>
<ul>
<li><a href="https://blog.csdn.net/sailist/article/details/104114578#:~:text=Hexoto%E5%AD%97%E4%BD%93,%E6%9C%AF%E8%AE%BE%E8%AE%A1%E6%96%B9%E9%9D%A2%E7%9A%84%E5%AD%97%E4%BD%93">Hexo-Next主题更改字体</a></li>
</ul>
<h1 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h1><p><a href="https://zxiaosi.cn/archives/c776502.html">https://zxiaosi.cn/archives/c776502.html</a></p>
<h1 id="粒子时钟"><a href="#粒子时钟" class="headerlink" title="粒子时钟"></a>粒子时钟</h1><p><a href="https://zxiaosi.cn/archives/c776502.html">https://zxiaosi.cn/archives/c776502.html</a></p>
<h1 id="超萌看板娘上线"><a href="#超萌看板娘上线" class="headerlink" title="超萌看板娘上线"></a>超萌看板娘上线</h1><p>看板娘有的插件可以搞得功能很多，换装、拍照、换人物等，但我个人觉得还挺分散注意力的，所以我的博客里就固定放只小猫咪吧</p>
<p>流程也很简单：</p>
<ol>
<li>安装hexo-helper-live2d</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>下载一个模型</li>
</ol>
<p>从中挑选一个模型 <a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a> ，执行下载</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install live2d-widget-model-tororo //假设你选择的看板娘是白色小猫咪tororo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>修改根目录下的_config.yml配置文件</li>
</ol>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#看板娘  Live2D动画
live2d:
  enable: true
  scriptFrom: local
  pluginRootPath: live2dw&#x2F;
  pluginJsPath: lib&#x2F;
  pluginModelPath: assets&#x2F;
  tagMode: false
  debug: false
  model:
    use: live2d-widget-model-tororo
  display:
    position: left
    width: 150
    height: 300
    hOffset: 100
  mobile:
    show: true
  dialog:
    enable: true
    hitokoto: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>个人觉得我这个配置还是挺舒服的，如何自定义自己的配置，请看参考资料中的  详细中文文档说明  和  详细参数配置，参考资料：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/350654582">如何开始使用</a></li>
<li><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">详细中文文档说明</a></li>
<li><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init">详细参数配置</a></li>
</ul>
<h1 id="waline评论系统"><a href="#waline评论系统" class="headerlink" title="waline评论系统"></a>waline评论系统</h1><p>评论系统折腾了很久，之前配置的是valine，配好之后好久之后才发现根本用不了，我又花了好久去折腾，按理说不应该呀，搞了好久，也不知道问题出在了哪，人当时裂开了。</p>
<p>只能选择换个评论系统试试，又去调研了一番</p>
<p>综合比较之后选择了waline，这是基于valine开发的一套系统，<strong>最近两年才开始普遍使用起来</strong>，外观也很清爽大方</p>
<p>关于一些比较问题，这个博客讲得特别好，我基本是跟着他做的，就不赘述了，放上大神博客链接</p>
<p><a href="https://finisky.github.io/hexowaline/">Hexo使用Waline评论系统</a></p>
<p>配置过程分为服务器和客户端两方面，服务器就是  博主使用的评论系统后台，管理评论；客户端就是在博客里配置好，方便游客评论</p>
<p>根据以下链接做就行，真的很快： <a href="https://waline.js.org/guide/get-started.html#leancloud-settings-database">waline官网快速上手教程</a></p>
<p><img data-src="https://s2.loli.net/2022/03/18/w7ldAOfNLsgkFmh.png"></p>
<p>这里的客户端配置如果用HTML引入，那么每个页面都要加这段代码，那就需要到POST里面去改，挺麻烦的，<a href="https://waline.js.org/guide/get-started.html#leancloud-settings-database">那么就用第三方插件</a>，安装完后按照要求在config_yml配置后，发现会出问题…..</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo s
INFO  Validating config
INFO  Start processing
INFO  Hexo is running at http:&#x2F;&#x2F;localhost:5000 . Press Ctrl+C to stop.
Unhandled rejection Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig)
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig) [Line 41, Column 16]
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig) [Line 54, Column 17]
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig)
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head&#x2F;head-unique.swig) [Line 10, Column 23]
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig) [Line 3, Column 3]
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;post.swig)
  Template render error: (&#x2F;home&#x2F;finisky&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;header&#x2F;index.swig) ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>后面发现了问题，就是next版本问题，裂开，按照官方推荐的解决方式做更新升级：先下载最新版，再做升级</p>
<p><a href="https://theme-next.js.org/docs/getting-started/upgrade.html">如何更新Next版本</a></p>
<p><a href="https://theme-next.js.org/docs/getting-started/installation.html">如何下载最新版next，拒绝直接下载安装包解压的方式</a></p>
<p>后面单出一篇文章讲hexo升级需要注意的事项吧，也挺折腾的~~~</p>
<h1 id="加个友链"><a href="#加个友链" class="headerlink" title="加个友链"></a>加个友链</h1><p>友链有助于交朋友和互相推广，next主题 <code>_config.yml</code> 配置文件支持友链添加，如代码所示：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Blog rolls
links_settings:
  icon: fa fa-globe
  title: 友链请留言
  # Available values: block | inline
  layout: inline

links:
  #Title: https:&#x2F;&#x2F;example.com
  ychch&#39;s blog: https:&#x2F;&#x2F;ychch.top<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果就是会在边栏下方显示，其实挺简洁的，我个人比较喜欢</p>
<p><img data-src="https://s2.loli.net/2022/03/18/iHb9cGM5qFxaSRQ.png"></p>
<p>但是考虑到友链如果一多，边栏就会变得很繁重，不美观，没有专门的友链页面的话，都不知道去哪里留言</p>
<p>个人又不想专门搞一个页面放友链，所以我就把友链作为放在了 个人页面里的一个模块呈现</p>
<p>Markdown语法天然支持内嵌html，所以我们直接加一段代码即可</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
         <span class="token selector">.links-content</span><span class="token punctuation">&#123;</span>
         <span class="token property">margin-top</span><span class="token punctuation">:</span>1rem<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.link-navigation::after</span> <span class="token punctuation">&#123;</span>
         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
         <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
         <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card</span> <span class="token punctuation">&#123;</span>
         <span class="token property">width</span><span class="token punctuation">:</span> 45%<span class="token punctuation">;</span>
         <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
         <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
         <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
         <span class="token property">transition-duration</span><span class="token punctuation">:</span> 0.15s<span class="token punctuation">;</span>
         <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
         <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card:nth-child(odd)</span> <span class="token punctuation">&#123;</span>
         <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card:nth-child(even)</span> <span class="token punctuation">&#123;</span>
         <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card:hover</span> <span class="token punctuation">&#123;</span>
         <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 6px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.12<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 0 6px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.04<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card a</span> <span class="token punctuation">&#123;</span>
         <span class="token property">border</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card .ava</span> <span class="token punctuation">&#123;</span>
         <span class="token property">width</span><span class="token punctuation">:</span> 3rem<span class="token important">!important</span><span class="token punctuation">;</span>
         <span class="token property">height</span><span class="token punctuation">:</span> 3rem<span class="token important">!important</span><span class="token punctuation">;</span>
         <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token important">!important</span><span class="token punctuation">;</span>
         <span class="token property">margin-right</span><span class="token punctuation">:</span> 1em<span class="token important">!important</span><span class="token punctuation">;</span>
         <span class="token property">border-radius</span><span class="token punctuation">:</span>4px<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card .card-header</span> <span class="token punctuation">&#123;</span>
         <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
         <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card .card-header a</span> <span class="token punctuation">&#123;</span>
         <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
         <span class="token property">color</span><span class="token punctuation">:</span> #2bbc8a<span class="token punctuation">;</span>
         <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
         <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card .card-header a:hover</span> <span class="token punctuation">&#123;</span>
         <span class="token property">color</span><span class="token punctuation">:</span> #d480aa<span class="token punctuation">;</span>
         <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
         <span class="token selector">.card .card-header .info</span> <span class="token punctuation">&#123;</span>
         <span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span>
         <span class="token property">color</span><span class="token punctuation">:</span>#a3a3a3<span class="token punctuation">;</span>
         <span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span>
         <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
         <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link-navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ava<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://finisky.github.io/images/avatar.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://finisky.github.io/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Finisky Garden<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Easy doesn’t enter into grown-up life.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            ....自由添加 
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以后每加一个友链，在下面复制一段即可：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ava<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://finisky.github.io/images/avatar.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://finisky.github.io/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Finisky Garden<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Easy doesn’t enter into grown-up life.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如链接所示：</p>
<p><a href="https://ychch.top/about/">https://ychch.top/about/</a></p>
<h1 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h1><p>hexo-next主题如何在文章末尾添加版权信息呢？</p>
<p>修改 <code>Hexo/theme/next/_config.yml</code>文件</p>
<p>ctrl+f 搜索全局 输入 creative_commons ，把 post 从 false 改为 true 即可，具体如下</p>
<p><img data-src="https://s2.loli.net/2022/04/20/EqIv8MYmr3a5S19.png"></p>
<h1 id="美化归档-标签-分类页"><a href="#美化归档-标签-分类页" class="headerlink" title="美化归档/标签/分类页"></a>美化归档/标签/分类页</h1><p>参考这位博主</p>
<ul>
<li><a href="https://jrbcode.gitee.io/posts/be9758cd.html">https://jrbcode.gitee.io/posts/be9758cd.html</a></li>
</ul>
<h1 id="随时上锁日志"><a href="#随时上锁日志" class="headerlink" title="随时上锁日志"></a>随时上锁日志</h1><p>配置参考如下：</p>
<ul>
<li><a href="https://easyhexo.com/3-Plugins-use-and-config/3-4-hexo-blog-encrypt/#%E7%AE%80%E4%BB%8B">hexo-blog-encrypt</a></li>
<li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">hexo-blog-encrypt-github</a></li>
</ul>
<h1 id="自动上传图片链接"><a href="#自动上传图片链接" class="headerlink" title="自动上传图片链接"></a>自动上传图片链接</h1><p>smms图床，国内外都可以稳定访问，且有足够的免费空间</p>
<p>PicGo可以安装compress插件，以做压缩图片之用</p>
<p>配置参考如下：</p>
<ul>
<li><a href="https://juejin.cn/post/6961715948755615774">Smms+PicGo实现Typora插入图像时上传到线上</a></li>
</ul>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><p>hexo在使用过程中陆陆续续有不少的问题，不想在每一次百度之后就抛之脑后，所以在这里记录一下…<br>主要包括有：</p>
<ul>
<li>hexo d 推送至远程库时报错</li>
<li>hexo-douban库爬取错误</li>
</ul>
<h2 id="hexo-d-推送至远程库时报错"><a href="#hexo-d-推送至远程库时报错" class="headerlink" title="hexo d 推送至远程库时报错"></a>hexo d 推送至远程库时报错</h2><p>报错信息如下：</p>
<p><img data-src="https://s2.loli.net/2023/04/02/ynfrHWdbotcUpa2.png"></p>
<p>对git不是很熟悉，网上针对这个问题有很多不同的解法，试了好几个，都没有成功,其中按照以下步骤成功解决了这个问题<br>步骤如下：</p>
<ol>
<li>删除主目录下的.deploy_git文件夹</li>
<li>运行这个命令：git config –global core.autocrlf false</li>
<li>hexo clean &amp; hexo g &amp; hexo d</li>
<li>打开自己的网站，验证是否成功 </li>
</ol>
<p>其中git config –global core.autocrlf false的意思是，将core.autocrlf配置成false，即不开启自动转换功能。不懂……</p>
<h2 id="hexo-douban库爬取错误"><a href="#hexo-douban库爬取错误" class="headerlink" title="hexo-douban库爬取错误"></a>hexo-douban库爬取错误</h2><p>安装了第三方库hexo-douban爬取数据时总是发生错误<br>需要把node.js版本降成12版本，高版本不支持<br>直接卸载当前的node，安装12版本的即可<br>hexo-douban开发者已停止维护了，如果还是要用这个库的话，暂时只有这个解决办法</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.zhihu.com/question/38219432/answer/123443945">出现hexo -d 报错如何解决</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>sps搜我广播12</title>
    <url>/archives/50f611c7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SPS是一款在线听歌/听播客/听广播的Chrome插件<br>没有特别复杂的功能，只是做了众多的音乐源的聚合<br>但是用户体验感很好，常常被我用来听各种电台广播节目(￣︶￣*))<br><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/SPS.1g3uqq5k60ps.webp"></p>
<span id="more"></span>

<p>点击左上角的按钮，即可在三种模式（音乐、广播、博客）之间进行切换</p>
<p>首先是听歌界面，聚合了网易、QQ、咪咕和油管四个平台的歌曲，免去了要下载多个软件的麻烦，其中付费的歌曲等（例如JAY）最好在咪咕平台听…这</p>
<p>搜索中默认只显示5条，如果想搜索更多，输入：歌曲 or 歌手 ## 数量，比如 周杰伦##20</p>
<p>缺点是 不能导入已有账号的歌单，这个缺点可能会劝退很多人，所以我一般也不用这个插件来听歌，更多是在听广播和听播客</p>
<img data-src="https://s2.loli.net/2022/03/18/vbzBTs9DG8kmYwO.png" style="zoom:67%;" />

<p>在机房“坐牢”的时候，戴着耳机听歌有时候会分散注意力，影响做事效率，但是有时候静不下来心，总是想听点东西，这个时候就推荐听听广播</p>
<p>如下所示，可以听内陆和香港的电台节目，任你选择</p>
<p>我一般喜欢听音乐广播节目，偶尔也会听听新闻广播，经常会听到一些宝藏的歌曲</p>
<p>再加上播音主持人的聊天，也不觉得时间那么难熬了</p>
<p>这里推荐几个广播：</p>
<ul>
<li>北京音乐广播</li>
<li>959年代音乐怀旧好声音</li>
<li>北京故事广播</li>
</ul>
<img data-src="https://s2.loli.net/2022/03/18/AsLRHBbeuyYZPXj.png" style="zoom:67%;" />

<p>博客倒是听的很少，感觉上次听播客都是高中的时候了…</p>
<p>附上下载地址：<a href="https://chrome.google.com/webstore/detail/search-to-play-the-song/anfmgjkkbagjfdejhbjdiapgkbhpigpm?utm_source=chrome-ntp-icon">SPS下载地址</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Typora提升效率+破解版安装包</title>
    <url>/archives/b19d3262.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Typora破解版安装包，分享一波~</p>
<p>typora_64bit_v1.0.2_setup <a href="https://www.aliyundrive.com/s/9pPGTu37PoS">https://www.aliyundrive.com/s/9pPGTu37PoS</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>
<p>使用方式：</p>
<ol>
<li>将 app.txt 改成 app.asar 文件</li>
<li>将 app.asar 文件复制到软件安装目录下的 resources 文件夹中替换</li>
</ol>
<p>详情页是 现阶段工作流方案，全是干货</p>
<img data-src="https://s2.loli.net/2022/03/18/yBCt6ZDejcrTqEJ.png" style="zoom: 67%;" />

<span id="more"></span>

<p>Typora作为Markdown编辑器，图片自动上传功能用<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></p>
<p>PicGo是专门做图片自动上传的一款开源小软件，十分好用，也可以和Typora搭配使用，刚做了更新升级，比之前版本更好用了。</p>
<p>有了好用的编辑器和图片自动上传图床神器，现在还缺一个免费可靠的图床</p>
<p>这里我推荐 <a href="https://sm.ms/login">smms</a>，smms提供了5G的免费空间存放图片，可以提供国内外稳定访问，对我来说是足够了。</p>
<p>这里还需要搭配 PicGo中图片压缩的小插件 compress，能将每张图片压缩到几十几百K，画质不受太大影响，对网络传输的压力也小，我目前写了几十篇文章，上传了两三百张照片，只用了五十多兆</p>
<p>当然我明白把图片放在外面的图床总是有些不安全，但是现阶段没精力搞这些细枝末节，以后有精力了再优化，现阶段的配置我还是比较满意的。</p>
<p>具体配置 网上太多了 我就不赘述了 仅提供工作流思路</p>
<p><img data-src="https://s2.loli.net/2022/12/06/7dK3v5UAyZVueg6.png" alt="PicGo功能介绍"></p>
<p><img data-src="https://s2.loli.net/2022/12/06/p9rHqDJT7C62F8R.png" alt="Typora里配置PicGo"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在hexo中播放音乐</title>
    <url>/archives/884863d2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前一直觉得自己会不需要音乐播放这个功能，觉得太鸡肋了，但某一天又想加上，所以也配置上来了。</p>
<p>我这里用的是 <a href="https://github.com/MoePlayer/APlayer">APlayer</a>播放器的 Hexo 标签插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a></p>
<span id="more"></span>

<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>meting 引用：</p>

    <div id="aplayer-VRZwKZuE" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="0030R0gA49FWxZ" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>

<p>aplayer 引用：</p>
<div id='demo1'></div>
<script> 
    const ap = new APlayer({
    container: document.getElementById('demo1'),
    audio: [{
        name: '给我一首歌的时间',
        artist: '周杰伦',
        url: 'https://echeverra.cn/wp-content/uploads/2021/06/周杰伦-给我一首歌的时间.mp3',
        cover: 'https://echeverra.cn/wp-content/uploads/2021/06/周杰伦-给我一首歌的时间-mp3-image.png'
    }]
});
</script>
### 食用方法

<p>安装和配置 官方文档里已经说的很清楚了，我就不赘述了</p>
<p>meting 的配置：</p>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td><strong>必须值</strong></td>
<td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>
</tr>
<tr>
<td>server</td>
<td><strong>必须值</strong></td>
<td>音乐平台: <code>netease</code> , <code>tencent</code> , <code>kugou</code> , <code>xiami</code> , <code>baidu</code></td>
</tr>
<tr>
<td>type</td>
<td><strong>必须值</strong></td>
<td><code>song</code> , <code>playlist</code> , <code>album</code> , <code>search</code> , <code>artist</code></td>
</tr>
</tbody></table>
<p><strong>高级配置需要去看 aplayer说明文档！</strong></p>
<p>这里有几点需要说明：</p>
<ul>
<li><p><code>&#123;% aplayer  %&#125;</code> 和 <code>&#123;% meting %&#125;</code> 在一个页面中不可以同时使用，如果需要同时使用直接  <code>&#123;% aplayer  %&#125;</code> 替换成 html+js代码</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>demo1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> 
    <span class="token keyword">const</span> ap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APlayer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">container</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'给我一首歌的时间'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">artist</span><span class="token operator">:</span> <span class="token string">'周杰伦'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'https://echeverra.cn/wp-content/uploads/2021/06/周杰伦-给我一首歌的时间.mp3'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cover</span><span class="token operator">:</span> <span class="token string">'https://echeverra.cn/wp-content/uploads/2021/06/周杰伦-给我一首歌的时间-mp3-image.png'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><code>&#123;% meting %&#125;</code>  适用于 在大平台可以免费听的曲子，当涉及到一些付费歌曲，就不好使了</p>
</li>
<li><p><code>&#123;% aplayer  %&#125;</code> 则支持自己配置歌曲的URL，所以可以将一些付费歌曲上传到自己的服务器</p>
<ul>
<li><a href="https://www.hifini.com/">https://www.hifini.com/</a> 这是一个强大的下歌网站</li>
</ul>
</li>
<li><p>为了在目录页也可以正常显示歌曲，需要在配置项添加</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 音乐播放器
aplayer:
  meting: true       # MetingJS 支持
  asset_inject: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在本地部署时，偶尔会出现页面没有播放器的情况，刷新一下就好了，上线之后这种情况就不会出现了</p>
</li>
</ul>
<p>当我配置完以上这些，追本溯源才发现 APlayer 竟然是DIYgod开发的，这是我从RSSHub的使用开始关注的一个技术博主，真是巧了。</p>
<p>看到大佬在开源社区做的东西能够被广泛使用，希望后面自己也有能力为开源社区做一份贡献~~</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://aplayer.js.org/#/zh-Hans/">首页 - APlayer</a></p>
</li>
<li><p><a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#%E4%BB%8B%E7%BB%8D">hexo-tag-aplayer | Easy Hexo 👨‍💻</a></p>
</li>
<li><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE30-%E6%96%B0%E5%8A%9F%E8%83%BD">hexo-tag-aplayer | github</a></p>
</li>
<li><p><a href="https://echeverra.cn/aplayer">如何在博客中添加Aplayer音乐播放器 - echeverra</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>提升hexo静态网站加载速度</title>
    <url>/archives/6ec3525c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>和博主**<a href="https://finisky.github.io/">finisky</a>**互换友链的时候，他建议我优化一下网站加载速度</p>
<p>不说还没感觉，回头发现博客虽然内容不多，但是加载起来却很慢，再加上前阵子部署方式也做了改变，所以在此记录一下</p>
<span id="more"></span>

<h1 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h1><p><a href="https://ping.chinaz.com/">站点之家</a>可以检查网站在国内外是否可以正常访问，之前网站部署在github page，但是这样国内访问不了，前阵子 gitee 貌似取消了 gitee page，双线部署也比较麻烦，索性我直接换到了支持国内外访问的vercel。</p>
<p>如下图所示，现在基本国内外都可以流畅访问网站！</p>
<p><img data-src="https://s2.loli.net/2022/09/15/Sv8MWGBrjTfFgqe.png"></p>
<p>将源码同步到vercel重新部署会损失之前的访客记录，有点不舍得，所以这里我采用的是将 github page对应的仓库部署到vercel中，源码仍然存放在本地。</p>
<p>前几天更换机房电脑 差点损失了博客源码，目前没有精力去配置云服务器，所以我赶紧用坚果云做了一个最简单的实时同步，1GB的免费空间也足够我写博客用了。</p>
<p>机房的电脑和个人笔记本也借此做到了实时云同步，整挺好！</p>
<h1 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h1><p><a href="https://developers.google.com/speed/pagespeed/insights/">Google Page Speed Insight</a> 是个很好的网页性能分析工具，可以根据它的分析结果有针对性地对网页进行优化</p>
<p>以下是我未优化的结果：</p>
<p><img data-src="https://s2.loli.net/2022/09/15/IiSHqW4Yytr9Q6v.png" alt="优化前"></p>
<p>测完真的裂开，没想到它的性能这么差！</p>
<p>测评网页也给出了造成性能低的原因和如何优化的做法，我这里就不过多截图了，直接结合具体给出的优化建议一步步优化吧~</p>
<h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><h2 id="CDN设置为本地"><a href="#CDN设置为本地" class="headerlink" title="CDN设置为本地"></a>CDN设置为本地</h2><p>在国内的环境下，加载第三方CDN其实是很慢的，next官方配置文档也建议如果网站访客主要在国内的话，不要用jsDeliver、unpkg这些CDN服务商</p>
<p><img data-src="https://s2.loli.net/2022/09/15/9mncfNyOtBHFd7g.png" alt="image-20220915204217270"></p>
<p>所以我在这里就直接把这些全部转到本地了，在 next主题配置里 <code>plugins: local</code></p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">vendors:
  # Warning: If you are using the latest master branch of NexT, please set &#96;internal: local&#96;
  internal: local
  # The default CDN provider of third-party plugins.
  # Available values: local | jsdelivr | unpkg | cdnjs | custom
  plugins: local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还需要安装插件 @next-theme/plugins</p>
<pre class="line-numbers language-none"><code class="language-none">npm install @next-theme&#x2F;plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用</p>
<pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>即可。</p>
<h2 id="图片格式转换与压缩"><a href="#图片格式转换与压缩" class="headerlink" title="图片格式转换与压缩"></a>图片格式转换与压缩</h2><p>我原来网站的背景和头像之类的图片全部都用的是JPG或者是PNG格式，比较耗费资源。</p>
<p>借助下面这个网站，我把这些图片全部转为 webp格式</p>
<p><a href="https://www.aconvert.com/image/">Convert image online (aconvert.com)</a></p>
<p>原来一张6M的图片，现在就几百K了，图片质量也并未受太大影响</p>
<h2 id="更换字体源"><a href="#更换字体源" class="headerlink" title="更换字体源"></a>更换字体源</h2><img data-src="https://s2.loli.net/2022/03/18/s5jkFi8ZhB2tCYe.png" style="zoom:80%;" />

<p>这里看到加载google字体消耗了大量的资源，这里的host用的是国外的资源，去网上搜搜有无替代方案，果然搜到了合适的，替换如下：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">font:
  enable: true
  # 有两个，任选其一
  # 国内源  https:&#x2F;&#x2F;fonts.loli.net  or https:&#x2F;&#x2F;fonts.font.im
  host: https:&#x2F;&#x2F;fonts.loli.net
  # 国外源： https:&#x2F;&#x2F;fonts.googleapis.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>懒加载，即在关键资源加载完毕后推迟加载屏幕外图片和处于隐藏状态的图片，从而缩短可交互前的耗时</p>
<p>hexo-lazyload-image 这个插件不知道为什么用了之后只显示 loadingImg ，无奈放弃了</p>
<p>最后发现 新版的NEXT配置文件里加入了懒加载插件，直接启动就好</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">lazyload:
  enable: true
  onlypost: false
  loadingImg: &#x2F;images&#x2F;loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="关闭动态特效"><a href="#关闭动态特效" class="headerlink" title="关闭动态特效"></a>关闭动态特效</h2><p>减少动画在mobile上的优化效果最为明显，关闭的办法也很简单，修改next配置文件</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Use Animate.css to animate everything.
motion:
  enable: false
  async: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>写到这里我就想到 看板娘应该很消耗资源吧</p>
<p>查看详情一看，果然，长时间运行的主线程任务就两个，一个是next的动态，另一个就是引入的看板娘(ง •_•)ง</p>
<p><img data-src="https://s2.loli.net/2022/03/18/HZKYzy3BXUO8N2k.png"></p>
<p>罢了罢了，看板娘就不关了~~~</p>
<p>再顺便把页脚的icon动效也关了，反正没人看最底下</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">icon:
    # If you want to animate the icon, set it to true.
    animated: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>后面还是都打开了，看上去好看一些</p>
<h2 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h2><p>看了网上主要有三种方法：gulp插件、hexo-neat、hexo-all-minifier</p>
<p>自己也懒得去做比较了，<a href="https://blog.luzy.top/posts/2009685483/">博客访问速度优化</a></p>
<p>这篇文章尝试了以上三种方法，最后选择了hexo-all-minifier，我也就跟着用了</p>
<p>配置方法也不赘述了，跟着github文档直接来的</p>
<h1 id="优化后效果"><a href="#优化后效果" class="headerlink" title="优化后效果"></a>优化后效果</h1><p>可以看出，效果已经好了不少！</p>
<p>虽然还是有很大优化空间，暂时先这样吧，又花费了一下午在博客上……</p>
<p><img data-src="https://s2.loli.net/2022/09/15/bXLUCZauqptIOFg.png" alt="image-20220915210502901"></p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://theme-next.js.org/docs/advanced-settings/vendors">Vendors | NexT (theme-next.js.org)</a></p>
<p><a href="https://uprightokra.github.io/2022-04-19-hexo-you-hua-zhi-lazyload-tu-pian-lan-jia-zai.html#:~:text=%E7%BB%8F%E8%BF%87%E4%B8%80%E7%95%AA%E5%AF%BB%E6%89%BE%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%8C%E9%80%9A%E4%BF%97%E7%82%B9%E8%AE%B2%E5%B0%B1%E6%98%AF%E5%BD%93%E4%BD%A0%E7%BF%BB%E5%88%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E5%8A%A0%E8%BD%BD%E9%82%A3%E5%BC%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BB%A5%E4%B8%8B%E5%B0%86%E6%9C%AC%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E9%83%BD%E5%8A%A0%E8%BD%BD%E5%AE%8C%E3%80%82%20%E9%85%8D%E7%BD%AE%20%E5%9C%A8%E4%BD%A0%E7%9A%84%20Hexo%20%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%EF%BC%9A%20npm%20install%20hexo-lazyload-image,onlypost%3A%20false%20loadingImg%3A%20%2Fimages%2Floading.gif%20%E6%B3%A8%E6%84%8F%20onlypost%EF%BC%9A%E6%98%AF%E5%90%A6%E4%BB%85%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E5%81%9A%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%BA%20false%EF%BC%8C%E5%88%99%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84%E5%85%B6%E4%BB%96%E5%9B%BE%E7%89%87%EF%BC%8C%E4%B9%9F%E4%BC%9A%E5%81%9A%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%8C%E5%A6%82%E5%A4%B4%E5%83%8F%EF%BC%8Clogo%20%E7%AD%89%E4%BB%BB%E4%BD%95%E5%9B%BE%E7%89%87%E3%80%82">Hexo优化之lazyload图片懒加载</a></p>
<p><a href="https://blog.luzy.top/posts/2009685483/">Hexo折腾系列（一）博客访问速度优化 - 江风引雨の小po站 (luzy.top)</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>效率</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何科学上网</title>
    <url>/archives/c827b2d4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>科学上网，懂得都懂<br>绝对不能说 国外的风景有多好，其实看了一阵，你会发现国外很多媒体挺离谱的，没必要多当回事<br>更多的只是为了提高学习工作效率，不要在没必要的地方浪费太多时间，篇尾给出链接</p>
<img data-src="https://s2.loli.net/2022/08/24/XscFo412ydraIv6.jpg"  />
<span id="more"></span>
大学的时候一直热衷白嫖，感觉嫖到就是赚到，但是实际上有时候在免费的事情上花费了太多的时间精力，反而得不偿失
对于这种长期使用的东西，建议就是找个价格便宜，稳定好用的即可

<blockquote>
<p><strong>机场都有跑路可能</strong>，尽量不要一次性购买太长时间，建议<code>一个月 一个月 一个月</code>这样买！</p>
</blockquote>
<p>话不多说，给上链接：<br><a href="https://www.mioyun.net/#/login">https://www.mioyun.net/</a></p>
<p><del>mioyun优点：</del></p>
<ul>
<li><del>价格：10元每个月300G，使用了快一年了，都很稳定，流量也足够用了</del></li>
<li><del>平台：全平台支持，Windows、Android、ios、maxOS…没有设备数量限制</del></li>
<li><del>经常做活动，做活动的时候更便宜，去年赶活动，70买了一年</del></li>
<li><del>平台还提供了一个ios国外账号，i了i了</del></li>
</ul>
<p>笑死，mioyun已经倒闭了，换了一个其他的</p>
<p>目前在用的是这个 ikuuu，附上链接：</p>
<p><a href="https://ikuuu.dev/auth/register?code=ZDZS">https://ikuuu.dev/auth/register?code=ZDZS</a></p>
<p>这是一个机场概括很全面的长期更新的网址：</p>
<p><a href="https://mofa.ga/2022/02/01/ji-chang-tui-jian-chang-qi-geng-xin/">机场推荐🚀（长期更新） | 魔法咖 (mofa.ga)</a></p>
]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>上网</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例10—实景三维建设与应用</title>
    <url>/archives/32592c6d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最后一节课依然很无聊，就不做记录了，课程结束啦，finally！</p>
<p>这学期又算是稀里糊涂的过去了吧，真是折磨的研一</p>
<p>希望后面还是能继续记录┗|｀O′|┛ 嗷~~</p>
<span id="more"></span>]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>实景三维</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例1—地图数据算法工程化</title>
    <url>/archives/577e831b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天上了工程案例课程的第一节课，请到了丰图科技陈总工程师为我们做了一次有关地图数据工程化的技术讲座，收获颇多，下面就讲座内容做一下总结分析。</p>
<img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli1.6rkmo0kk7kk0.webp" style="zoom: 67%;" />

<span id="more"></span>

<h1 id="工程案例课程设置"><a href="#工程案例课程设置" class="headerlink" title="工程案例课程设置"></a>工程案例课程设置</h1><p>一开始，吴老师说了一些关于课程设置方面的思考。</p>
<p>在以往的工程案例分享课程中，请来的行业大佬们主要就创业创新、公司发展历程等较宏观问题作了很多精彩生活的经验分享，但是研究生这个阶段里对于创新创业等感悟吸收往往还没有那么深刻。</p>
<p>所以这学期做了调整，请的都是行业内的技术人员，他们讲的内容可以聚焦于行业内具体的需求和技术，对于学生们更好了解行业和今后的实习、求职会更有帮助。我十分认可吴老师的这番话。</p>
<p>陈工的讲座主要分为两部分，一是丰图公司的简短介绍，二是他们公司是如何做地图数据算法工程化这件事的。</p>
<h1 id="丰图科技"><a href="#丰图科技" class="headerlink" title="丰图科技"></a>丰图科技</h1><p>丰图科技（深圳）有限公司成立于2018年6月，前身为顺丰科技地理信息研发中心，是顺丰集团内部孵化的一家专注于地图领域的科技公司。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli1-4.2av6hgy6g268.webp"></p>
<p>截至目前公司员工近500人，核心成员多来自行业内知名图商、GIS行业公司，具有丰富的互联网高精地图开发及GIS行业信息化项目经验。</p>
<p>丰图科技以时空大数据底板，即工业级地图为依托，打造物流数字孪生平台和城市数字孪生平台两大指挥中枢，聚焦交通、社区、产业经济三大场景，去孵化更多的具体业务应用。</p>
<p>相较于高德、百度这种老牌图商，他们的核心竞争力主要体现在 <strong>鲜活、精准、稀缺和独特的数据资源</strong>。每天上千万频次的送货到门的物流订单是他们最主要的优势数据，将测绘地图数据和业务数据结合起来就可以打造一个包含AOI、POI、房屋地址、语义地址、实景图片、企业经营地址、实时路况等众源数据的高精度、高更新频次数据库。</p>
<h1 id="地图数据算法工程化"><a href="#地图数据算法工程化" class="headerlink" title="地图数据算法工程化"></a>地图数据算法工程化</h1><p>陈工将地图数据算法工程化分为三块内容做了进一步阐述</p>
<ul>
<li>地址信息挖掘提取（优势）</li>
<li>路网信息挖掘提取（与高德、百度的差别）</li>
<li>城市三维建模（未来）</li>
</ul>
<h2 id="地址信息挖掘提取"><a href="#地址信息挖掘提取" class="headerlink" title="地址信息挖掘提取"></a>地址信息挖掘提取</h2><h3 id="地址是什么"><a href="#地址是什么" class="headerlink" title="地址是什么"></a>地址是什么</h3><p>地址信息的挖掘提取是丰图科技<strong>最关键最核心</strong>的技术。</p>
<p>首先，地址是什么，和与之相关的一系列延伸概念。</p>
<p>地址的概念很简单普遍，即你在哪，通常我们不会以经纬度去判断位置信息，更多的是通过文本信息去找位置，例如我们互相告知位置时，不会说经纬度，而是说我在武汉大学信息学部某某栋楼的几层几零几，这就是地址。</p>
<p>地址可以延伸一系列的新功能，如</p>
<p><strong>地址的处理</strong>：地址拆分治理、地址名称标准化</p>
<p><strong>地址的深度</strong>：地址上图、地址调度、专业市场、地址类型、地址上楼、地址可达、地址真假、地址活跃度</p>
<p><strong>地址聚合分析：</strong>楼盘表、停电地址聚合通知、地址画像、选址</p>
<p>以上每一个新概念都代表一种研究方向or业务方向，都可以往下延伸…</p>
<h3 id="地址怎么做"><a href="#地址怎么做" class="headerlink" title="地址怎么做"></a>地址怎么做</h3><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli1-1.7pvqlepg8mw.webp" alt="anli1-1" style="zoom: 50%;" />

<p>如上图所示</p>
<p>如何做好地址具体分为模型、算法、数据和工程化应用四个步骤</p>
<h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>模型就是如何去定义地址这个类，地址可不只是一串文本，它是个下属很多功能细节的标准类，举例说明 地址模型可能包含的属性：</p>
<table>
<thead>
<tr>
<th>class</th>
<th align="center">省/市/街道/社区</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td align="center">标准名称</td>
</tr>
<tr>
<td>semantics</td>
<td align="center">别名 or 标签</td>
</tr>
<tr>
<td>geometry</td>
<td align="center">id  OR point  OR 2D OR 3D</td>
</tr>
<tr>
<td>relation</td>
<td align="center">拓扑空间关系</td>
</tr>
</tbody></table>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>众源数据包括影像、轨迹、视频等等，不同的数据有各自的优劣所在，针对不同的数据又有不同的算法</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli1-2.10g1rlb3r4r4.webp"></p>
<p>目前做地址判别这块 比较好的 还是用规则+人工，机器学习并不理想。</p>
<p>以下面这个例子说明，这机器学习咋学特征，</p>
<p>目前来说工业界的地址生成 还是靠规则+人工更靠谱一点</p>
<p>当然，这不是说研究那些算法就没意义了 ，知识是可以迁移的，像挖掘人群活动、用户画像，预测分析等等还是需要大量的算法做支撑。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli1-3.yi50yc4f4dc.webp"></p>
<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>这一部分主要回答两个问题，工业界是如何对数据做定义的，工业界是如何来生成数据的。</p>
<p><strong>数据是什么？</strong></p>
<p>按要素分类：行政区划、AOI 、BLD、ROOM…</p>
<p>按功能分级：有无数据、数据是否重合、从数据中挖掘的个体与群体的关系..</p>
<p><strong>如何生成数据？</strong></p>
<p>按流程分阶段：工艺 —&gt; 平台 —&gt; 生产运营；先初始化 —&gt; 再不断更新</p>
<p>按手段渐进：自动为主、人工补充，再不断精进自动</p>
<p><strong>检验质量的三大指标：成本、质量和周期</strong></p>
<h4 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h4><p>一个东西一旦工程化就要思考这三个问题</p>
<ol>
<li>如何从功能到体系</li>
<li>如何从项目到能力</li>
<li>如何去打造这个工程</li>
</ol>
<p>用户在输入端输入一串地址文本，要经过哪些流程才可以正确地生成一个快递单号。中间要走的逻辑层有哪些，平台背后有哪些部门在相互配合</p>
<p>逻辑层：输入 —&gt; GEO —&gt; 定制匹配 —&gt; 审补服务 —&gt;人工审补 —&gt; 输出</p>
<p>平台支撑：运营 + 算法 + 数据生成</p>
<h2 id="路网和三维"><a href="#路网和三维" class="headerlink" title="路网和三维"></a>路网和三维</h2><p>路网和三维的内容就比较常规了，不再过多阐述</p>
<h2 id="个人总结与思考"><a href="#个人总结与思考" class="headerlink" title="个人总结与思考"></a>个人总结与思考</h2><p>本次讲座还是学到了很多东西，从业界去看待问题会以<strong>经济实用可靠</strong>作为首要考虑因素。有以下思考：</p>
<ol>
<li>相较于高德百度这种高精度道路图商，丰图做的更多是社区级识别探测、关注城市内部各因素的变化，地址是他们的优势服务领域</li>
<li>丰图快递行业的及时无误性 要求他们的地址精度要做的很高</li>
<li>美团其实和快递很像，甚至美团每天的外卖单据数量还要多余快递（我觉得），丰图目前的优势感觉美团也可以做的很好，而且美团涉及的人们生活更为深入（外卖、自行单车、电单车、无人配送..)，这样相比，丰图较之美团的优势在哪里呢？</li>
</ol>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>地图算法</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例3—块数据智能底板赋能政务数据治理</title>
    <url>/archives/da3e0128.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天上了工程案例课程的第三节课，请到了武大吉奥姚明副总经理为我们做了一次有关块数据智能底板赋能政务数据治理的讲座，收获颇多，下面就讲座内容做一下总结分析。</p>
<p><img data-src="https://s2.loli.net/2022/03/19/l7nBuzOZCR46c8A.png"></p>
<span id="more"></span>

<h1 id="武大吉奥"><a href="#武大吉奥" class="headerlink" title="武大吉奥"></a>武大吉奥</h1><p>武大吉奥成立于1999年，是武汉大学科技成果转化企业、国家高新技术企业和国家规划布局内重点软件企业。该公司在北京、广州、深圳、西安、江苏等地都设有分支机构，拥有各类人才1200余人，服务我国29个省及400多个县市的千余家客户。</p>
<p>吉奥自研GIS基础平台系列软件和时空大数据平台产品，主要着力于推动政务管理数字化，智能化。以“挖掘数据价值、服务数字中国”为使命，为数字中国和智慧社会建设不断贡献力量。</p>
<p>在讲座中，姚总就 <strong>块数据智能底板赋能政务数据治理</strong> 这个问题划分了四块内容层层递进的讲述。</p>
<img data-src="https://s2.loli.net/2022/03/19/IGk7KVPBWxwv6tR.png" alt="image-20220319174737561" style="zoom: 33%;" />

<h1 id="什么是政务数据"><a href="#什么是政务数据" class="headerlink" title="什么是政务数据"></a>什么是政务数据</h1><p>政务数据，即政务部门在依法履行职责过程中获取的数据。</p>
<p>传统地信行业内处理的很多数据其实都可以归属为政务数据，像土地利用类、城市规划类、资源、税收等</p>
<p>这些数据一般来说只有政府有权利采集，有可能做汇总，这也解释了传统的地信行业公司的甲方一般都是政府机构。</p>
<p>国家近些年来也专门成立了一系列主管政府信息化和政务数据的部门，例如大数据局/政数局</p>
<h1 id="政务数据现状"><a href="#政务数据现状" class="headerlink" title="政务数据现状"></a>政务数据现状</h1><h2 id="烟囱化"><a href="#烟囱化" class="headerlink" title="烟囱化"></a>烟囱化</h2><p>在数字化建设的初期，每个政府部门都有各自部门的海量数据，这些数据往往是彼此割裂，这种<strong>条数据</strong>就像是每个部门都耸立起自己的一个烟囱，高高耸起，互不相通。</p>
<p>这也带来了两点问题：</p>
<ol>
<li>数据垄断现象，条数据被各自部门占有，不利于全局性资源整合及大数据综合分析利用</li>
<li>数据失真现象，仅凭借各自部门产生的有限数据，无法很好地解决社会的各类问题，不能很好地达到数字化、智能化治理</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/03/19/Y6JXjPQIZAVB2kq.png"></p>
<h2 id="丛林化"><a href="#丛林化" class="headerlink" title="丛林化"></a>丛林化</h2><p>在没有打破各部门之间的数据壁垒前，随着信息化在各部门普及深入，烟囱化会慢慢趋向于丛林化。就像是在错误的道路上越走越远，最后想再做整合其实就愈发困难。具体表现在两点：</p>
<ol>
<li>政务数据的<strong>自成体系</strong>。采集的数据由于采集的目的不同，参照标准不同，会录入不同的部门，最后导致基层政务数据库中的<strong>数据概念不统一，要素不完整，编码不唯一</strong>。使各类业务、执法等数据自成体系的存储在不同部门</li>
<li>数据价值难以体现。大规模的数据形成了一个分散的点数据，使得基层工作人员被困在数据从林中，这也导致基层行政效率低下。</li>
</ol>
<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>姚总举了一个很形象的例子来说明这个问题。</p>
<p>在数据分割的时候，一个社区网格员需要将获取的数据通过不同的app上传给各个部门，其中很多数据又却是重复的。</p>
<h1 id="块数据为突破口"><a href="#块数据为突破口" class="headerlink" title="块数据为突破口"></a>块数据为突破口</h1><p>针对以上的问题，提出了从“条数据”到“块数据”的转变</p>
<h2 id="什么是块数据"><a href="#什么是块数据" class="headerlink" title="什么是块数据"></a>什么是块数据</h2><p>块数据 是贵阳发展大数据以来的产物。</p>
<p><strong>块数据是将分散在各行各部门的人、事、物、组织等要素，按照管理层级封装到市、区、街道、社区、网格、房屋等块结构中。</strong></p>
<h2 id="块数据的本质"><a href="#块数据的本质" class="headerlink" title="块数据的本质"></a>块数据的本质</h2><p>块数据,利用<strong>位置信息</strong>作为底板进行数据的定位、下沉，利用<strong>地址信息</strong>作为业务数据之间互相识别的桥梁。</p>
<img data-src="https://s2.loli.net/2022/03/19/h9I2mT8NbVgwQvR.png" alt="image-20220319193828609" style="zoom: 67%;" />

<h2 id="块数据的实践路线"><a href="#块数据的实践路线" class="headerlink" title="块数据的实践路线"></a>块数据的实践路线</h2><h3 id="一码多址是基础"><a href="#一码多址是基础" class="headerlink" title="一码多址是基础"></a>一码多址是基础</h3><p>如何统一各部门对于同一事务的认知，最直接高效的办法就是构建统一的地址库。为每一个地址实体赋予一个唯一的统一地址编码，以 一码多址 的管理理念，建立城市治理参照体系。</p>
<img data-src="https://s2.loli.net/2022/03/19/e2xsSqWd7LQFBin.png" style="zoom:80%;" />

<h3 id="构建块数据智能底板"><a href="#构建块数据智能底板" class="headerlink" title="构建块数据智能底板"></a>构建块数据智能底板</h3><p>以统一地址为关联纽带，将原本分散在各部门的人、房、企、事、物等要素，按照管理层级封装到省、市、区、街道、社区、网格、建筑物等治理单元内</p>
<p><strong>地图为载体，统一地址为纽带，建筑物实体为管理对象</strong></p>
<h3 id="提供块数据智能服务"><a href="#提供块数据智能服务" class="headerlink" title="提供块数据智能服务"></a>提供块数据智能服务</h3><p>有了数据，接下来就是设计一系列的智能服务，类似于在设计API</p>
<p><img data-src="https://s2.loli.net/2022/03/19/WqorFbhYNHJnxZD.png"></p>
<h3 id="基于底板开展应用"><a href="#基于底板开展应用" class="headerlink" title="基于底板开展应用"></a>基于底板开展应用</h3><p>有了数据和API，接下来就是针对具体的应用场景做功能设计，开展相应应用。</p>
<p>这里还是回归网格员的案例来比较 数据治理前后的业务模式差异。</p>
<img data-src="https://s2.loli.net/2022/03/19/a1ybIEGNvcLX9jh.png" style="zoom:67%;" />

<p>数据治理前：网格员的任务很重，需要根据不同的部门的要求去采集不同的数据再做上传，居民也很受打扰；</p>
<p>数据治理后：一次上门，全要素采集。方便了居民，轻松了基层人员，提高了办事效率。</p>
<h1 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h1><p>姚总介绍了很多落地的案例，其中给我印象比较深的就是 这张PPT</p>
<img data-src="https://s2.loli.net/2022/03/19/HXuC7f2Fgkdb98p.png" style="zoom: 67%;" />

<p>这位政协委员的发言也形象的描述了传统政府和改革一线政府的服务差异化，这也反映了数据整合的重要性。</p>
<p>我相信这也是为什么很多年轻人愿意去一线城市发展的原因，不只是有良好的就业环境和就业机会，也因为那里的政府在不断地创新以提高办事效率，优化服务质量。</p>
<p>姚总最后还介绍了企业在处理政府信息化项目中的三个主要跟进角色：</p>
<p><img data-src="https://s2.loli.net/2022/03/19/SCIAirjJE9nLcs4.png"></p>
<p>销售经理：需要有良好的沟通表达能力，擅长与客户打交道</p>
<p>售前经理：结合公司的技术能力和客户的需求，做一个前期的项目方案去参与招投标</p>
<p>实施经理：主要是负责产品的实现和交付，需要有过硬的技术能力</p>
<p>我们常听到的产品经理和研发一般是归属于实施下面。</p>
<p>姚总给我们的就业建议是 从技术出发，在积累了一定的经验之后再进一步做规划发展。</p>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>数据治理</tag>
        <tag>政务数据</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例6—企业视角下的时空信息创新</title>
    <url>/archives/5c4085f6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本次报告实在过于无聊，没什么好记录的…</p>
<span id="more"></span>

<p>nothing worth to see…</p>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
  </entry>
  <entry>
    <title>工程案例4—水利遥感与空间信息工程</title>
    <url>/archives/94b0b36a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天上了工程案例课程的第四节课，请到了长江空间信息技术工程有限公司副经理马力为我们做了一次有关水利遥感与空间信息工程的讲座，收获颇多，下面就讲座内容做一下总结分析。</p>
<img data-src="https://s2.loli.net/2022/03/30/JjYope8m6sqRvtN.png" style="zoom:67%;" />

<span id="more"></span>

<h1 id="长江空间信息技术工程有限公司"><a href="#长江空间信息技术工程有限公司" class="headerlink" title="长江空间信息技术工程有限公司"></a>长江空间信息技术工程有限公司</h1><p>长江空间信息技术工程有限公司(武汉)于2005年11月10日成立。</p>
<p>公司经营范围包括有：大地测量；全球卫星定位系统、水准、三角、导线测量；航空摄影测量与遥感测绘；工程测量、隧道、建筑工程、桥梁测量；管网、水下、海洋、线路测量；地籍测绘；房产测绘；地理信息系统工程技术开发；地图与专题图数字化制作；专题地图编制；电子印前处理；工程安全监测；工程质量检测；计算机软件及系统开发等</p>
<h1 id="案例分析—以可可西里水患为例"><a href="#案例分析—以可可西里水患为例" class="headerlink" title="案例分析—以可可西里水患为例"></a>案例分析—以可可西里水患为例</h1><p>青海可可西里位于青藏高原东北部，青海省西北角，是昆仑山脉以南，唐古拉山以北，青藏公路以西的地区，面积位于8.31万平方千米，平均海拔约5000米。</p>
<p>在寥无人烟的可可西里地区，存在着四个湖泊，在2011年之前，四个湖泊相安无事，但在2011年，可可西里地区发生了显著的地质构造变化，这直接导致了位于最西边的卓乃湖发生了溃决，溃决出的湖水冲出了新的河道，将水引入了其他三个湖泊。这直接导致了其他湖泊的面积水位发生了变化。</p>
<p>距离青藏铁路最近的湖泊已经扩散至其10公里，这显然是一件非常严重的事情。就此，2017年，长江空间信息技术工程有限公司应青海省政府邀请，前往了实地做水患监测方案，为应急治理方案提供支撑。</p>
<p>本次的任务目标主要有三点：</p>
<ul>
<li>形态变化：四个湖泊是如何变化的</li>
<li>现状调查：四个湖泊的现状是如何</li>
<li>参数预测：四个湖泊的未来演变是怎样的</li>
</ul>
<p>在第一次的实地调研中遇到了很多困难，并不顺利，因为冻土融化导致的地质松软，甚至车子都没有开到湖泊边上实地看上一眼。在这种人烟稀少，信号差，历史数据资料不全的情况下，选择遥感技术手段无疑是最佳的选择之一。</p>
<p>根据近十年的高分辨率遥感影像，直观的感受到了湖泊之间的增减，粗略了计算了每年扩大的面积。在结合了立体卫片后，计算得到了湖泊的地形信息，对湖泊进行了精细测量。最后得出结论：盐湖10年内对于铁路等基础设施的威胁还是很大的，建议相关部门引起重视。</p>
<p>有意思的是，当时很多其他的科研团队也对这一问题进行了研究，却得出了差异较大的结论——认为10年内不会出现问题。这里马总做出了解释，由于学科背景、看待问题的角度不同，科研团队在分析盐湖问题时考虑的是湖面的面积，而马总认为应该考虑的是盐湖的容积。</p>
<p>马总在最后总结到，科研和工程本质的不同，就是科研可以试错而工程不能出错，工程必须把所有可能的因素都考虑在内。科研可以凭借思路、方法上的创新探索产出一篇高质量的论文，而工程上则看重最后结果的正确性。</p>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>遥感</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例2—文化遗产数字化保护思考</title>
    <url>/archives/e682c69c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天上了工程案例课程的第二节课，请到了大势智慧徐副总裁为我们做了一次有关文化遗产数字化保护思考的讲座，收获颇多，下面就讲座内容做一下总结分析。</p>
<img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli2.grlmbx74zcw.webp" style="zoom:80%;" />

<span id="more"></span>

<h1 id="大势智慧"><a href="#大势智慧" class="headerlink" title="大势智慧"></a>大势智慧</h1><p>大势智慧，是一家专注于真实世界三维数字化重建及三维数据服务的高新技术企业。初创团队主要来自于重点实验室，这家企业将科研技术带到了活跃的市场环境，很好地完成了从“学和研”到“产和用”的转变。</p>
<p>大势智慧主要涉足领域包括有城市高精度三维建模、模型应用及语义化理解和文化遗产数字化保护，有着领先的技术优势和丰富的实战经验。</p>
<img data-src="工程案例2—文化遗产数字化保护思考/image-20220315110633651-16473135983361.png" style="zoom:80%;" />

<h1 id="文化遗产数字化"><a href="#文化遗产数字化" class="headerlink" title="文化遗产数字化"></a>文化遗产数字化</h1><p>文化遗产对于每个国家、每个民族的重要性不言而喻。</p>
<p>目前将文化遗产主要划分为三类，分别是可移动文物、不可移动文物和非物质文化遗产。其中物质文化遗产占据了绝大多数，物质文化遗产是珍贵的同时也是脆弱的，在漫长的岁月长河里，他们会经历长时间的风化侵蚀剥落，又或是在某一意外中直接被损毁。</p>
<p>习近平总书记曾指出，“历史文化遗产不仅生动述说着过去，也深刻影响着当下和未来；不仅属于我们，也属于子孙后代。<strong>保护好、传承好历史文化遗产是对历史负责、对人民负责</strong>”。</p>
<img data-src="https://s2.loli.net/2022/03/18/woAY1bFHyuJ3kDj.png" style="zoom: 50%;" />

<p>在众多文化遗产保护措施中，数字化保护无疑是<strong>非常重要</strong>的一种手段。</p>
<p>我曾经看过一句话，<strong>人类的活动创造了历史，也不断把曾经留下的痕迹抹去毁灭。数字化技术成了与后者相对抗的关键工具，阻止文化遗产遗址“从人类记忆中被彻底删除”。</strong></p>
<h1 id="石窟寺数字化案例"><a href="#石窟寺数字化案例" class="headerlink" title="石窟寺数字化案例"></a>石窟寺数字化案例</h1><p>石窟寺简称“石窟”，是古代开凿于河畔山崖的佛教寺院。</p>
<p>石窟寺源于印度，中国的石窟寺则约于3世纪始建于新疆，随后逐渐向东、向南传播，至5-8世纪时臻于繁盛，分布于国内各地区，此后渐趋衰落。</p>
<p>在最近的一次全国石窟寺专项调查中，共统计有石窟寺2155处，摩崖造像3831处，全国重点文化保护单位有288处。其中最耳熟能详的莫过于 四大石窟，分别是甘肃 敦煌莫高窟、山西 云冈石窟、河南 龙门石窟和甘肃天水 麦积山石窟。</p>
<img data-src="https://s2.loli.net/2022/03/18/q2bmVLBuvkHdoKC.png" style="zoom:50%;" />

<p>目前来说，我国石窟寺数字化保护过程中主要存在四点技术难题：</p>
<ul>
<li>数据采集</li>
<li>点云拼接</li>
<li>几何模型</li>
<li>纹理重建</li>
</ul>
<img data-src="https://s2.loli.net/2022/03/18/4J6BrOcPuaTeDjA.png" style="zoom: 50%;" />

<p>后面徐总就莫高窟、云冈石窟等案例给我们做了详细的阐述，这里我就不一一说明了，因为在技术层面上很多都是三维重建的内容，我就汇报过程中印象较为深刻的几点做一些记录。</p>
<ul>
<li>项目实施中对于文物的安全保证。这是最基本也是最重要的一点，文物的损坏是不可逆的，不可以说为了文物数字媒介的留存而损坏了其实体，那完全是本末倒置了</li>
<li>选取洞窟内部的自然特征点作为控制点。在传统的外业测量中，控制点的选取是可以通过标靶自由设置的，但是在洞窟内部却没有这样的条件，因为遵循上述原则不可用对墙壁、塑像有接触，所以实际作业中只能选取<strong>几何和纹理特征明显、且多角度通视的自然点</strong>作为控制点</li>
<li>项目实施中的规范流程化。在洞窟内作业是代价很大的，十几米的高度需要搭建多层的脚手架，为了保证高精数据的获取只能是“慢工出细活”，整个过程，耗时耗力。<strong>没有重来的机会，必须制定规范的作业流程</strong>，包括现场质检、当天补色、及时补拍等。我相信在这方面经验比技术更重要，需要积累。</li>
<li>必须有先进的技术。对于纹理映射、精细贴图、超大数据量的计算等这些我不太了解，但是整体听完，我的感受是没有金刚钻，别揽瓷器活。<strong>技术上的自研攻关突破是一切的基础</strong>，看到大势智慧的自研一系列软硬件产品在行业领域的广泛应用，更加觉得在校期间需打好自身本领。</li>
</ul>
<h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>我个人是非常喜欢文化遗产的，四大石窟除了大同的云冈石窟没有看过，其他三个都去实地造访过，确实是非常震撼也更加觉得文化遗产保护的重要性和迫切性。</p>
<p><img data-src="https://s2.loli.net/2022/03/18/O5blrJHMABdZLXE.jpg" alt="麦积山" style="zoom: 25%;" /><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli2-2.4191n4se3140.jpg" alt="莫高窟" style="zoom: 25%;" /><img data-src="https://cdn.jsdelivr.net/gh/ych-chen/image_hosting@main/content/anli2-3.1rdtk32rja0w.jpg" alt="龙门石窟" style="zoom:25%;" /></p>
<p>本次文化遗产数字化，以石窟寺为例的工程案例汇报，让我了解了传统的测绘技术如何在文物保护上发挥作用，也了解了项目方案的一系列流程和如何解决遇到的困难。</p>
<p>大势智慧是一个由实验室孵化出的优质企业，也让我加深对于如何将所学所研运用到今后就业的理解。</p>
<p>本次汇报是一次受益颇多的案例汇报。</p>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>文化遗产数字化</tag>
        <tag>三维重建</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例7—商用车智能网联发展态势和未来布局</title>
    <url>/archives/3179256a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天报告的题目是商用车智能网联发展态势和未来布局，报告人是中寰卫星的技术总监熊继林。熊总依次从商用车智能网联的基本情况、发展现状和未来布局三个方面进行介绍。本次报告非常精彩，下面附上PPT和个人感受。</p>
<img data-src="https://s2.loli.net/2022/04/24/GKERw6nTX9fgMCb.png" style="zoom:67%;" />

<span id="more"></span>

<hr>
<h2 id="讲座PPT"><a href="#讲座PPT" class="headerlink" title="讲座PPT"></a>讲座PPT</h2><p><img data-src="https://s2.loli.net/2022/04/24/EkCxH1GVdjAOWuT.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/rKjtuXiSw6BZMl5.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/MSKBA7I1QVZp4ev.jpg"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/DQW5y6xSj4OwLNn.jpg"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/4lKIOr8vgzWJas1.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/2YmNZzulcWeJ4AK.jpg"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/3dgeCqmGIVMoaQp.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/niFgmS5PCJoj9xs.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/wOA5HfUx9TXP6yu.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/8nZvgxqJL4UwVay.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/xehLrJBFcksuYvd.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/dPOTjwAJEBVyxWH.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/T1EfediJxPhMRV8.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/C5OPQ3UcksXe8l2.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/J5UqhjiIX3wQ2bk.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/1KmxPH8SuaCTjDW.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/yC3AgMe2dhT4r9t.png"></p>
<p><img data-src="https://s2.loli.net/2022/04/24/dIaNEx4cKODYzF3.png"></p>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ul>
<li><p>在车联网产业链图谱中，我们可以直观的看到其中各个环节以及相互依赖关系。有一个大体观念是非常重要的，我们可以把读书期间学习的技术与行业中各环节相对应，一方面思考如何把所学更好的对应到工作，另一方面也可以调整自己的专精方向，从供需方面出发去培养自己。</p>
</li>
<li><p>熊总在谈及无人驾驶时说道，万物互联模式下的无人驾驶是公认的未来形态，近些年来，有不少公司在一开始就朝着无人驾驶方向努力，大部分都已经消失不见了，存活下来的目前也没有做到从市场上盈利，也只是靠着融资在撑着。他们吸取的教训就是从“一路下蛋”，要不断的从市场上获得盈利再投入到研发中，一口吃不成胖子，要一步步踏实前进。</p>
</li>
<li><p>本次报告非常的精彩，十分开拓我的眼界。熊总从为什么要智能车联开始谈起，进而谈到智能车联的全产业链、政策如何驱动市场、产品形态在新技术的加持下一系列迭代，后面又谈到互联网大厂的新玩家对传统玩家的挑战、市场如何发展变化，最后谈到智能网联终局的三个0生态，即零排放、零拥堵和零死亡。本次报告内容上从浅入深，有很多案例帮助理解，结构上环环相扣，清晰地介绍了智能车联的来龙去脉，是一次很好的行业科普报告。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>智能网联</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例5—雷达遥感大数据工程实践与思考</title>
    <url>/archives/6c5dbd60.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天报告的题目是<strong>雷达遥感大数据工程实践与思考</strong>，请到了北京东方至远科技有限公司董事长李吉平为我们做本次报告。</p>
<p>李总依次从工程化基础、雷达遥感大数据时空特性、雷达遥感工程化实践、星载雷达智能化测绘的思考四个方面向我们介绍和展现了 遥感数据如何在商用化市场中发挥出其独特的价值魅力。</p>
<p>这是一次非常精彩的报告，下面就讲座内容做一下总结分析。</p>
<img data-src="https://s2.loli.net/2022/04/14/PD4MO5CvAlV9bYp.png" style="zoom: 67%;" />

<span id="more"></span>

<h2 id="东方至远公司介绍"><a href="#东方至远公司介绍" class="headerlink" title="东方至远公司介绍"></a>东方至远公司介绍</h2><p>东方至远是一家基于时空信息技术的风险应急和资源环境管理大数据平台服务商，依托遥感、云计算、物联网、大数据、人工智能等高新技术，建设相应的大数据平台，对城乡地址和设施风险灾害的<strong>事前预警预防、事中科学应急、事后救援指导</strong>全过程提供高效率、低成本、近实时的综合解决方案，为政府提供科学、高效、及时的决策支持，为行业提供专业、全面、高性价比的综合服务。</p>
<img data-src="https://s2.loli.net/2022/04/16/5fOUkGvN2eiLKmn.png" style="zoom:60%;" />

<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>总的来说，这是一次收获非常大的讲座，我结合李总的一些观点和自己的一些感受做了几点总结如下：</p>
<h3 id="1-遥感领域也有广阔的商用化前景"><a href="#1-遥感领域也有广阔的商用化前景" class="headerlink" title="1.遥感领域也有广阔的商用化前景"></a>1.遥感领域也有广阔的商用化前景</h3><p>在我之前的认知里，遥感在中国基本上都是政府在主导，很少见到有专门的从事商用卫星业务的公司。但是在李总的介绍之后我才知道 遥感不仅可以商用化，而且可以做的非常好。</p>
<p>在之前介绍的建筑物风险排查、地面塌陷等案例里，我们可以发现遥感在公共基础设施、公共安全、智慧城市等方面是有非常可以大施拳脚的地方，但其中主要需求方是政府或企业，不是个人用户，这就让我们觉得遥感其实距离我们很远。</p>
<h3 id="2-工程化不能只停留于表面"><a href="#2-工程化不能只停留于表面" class="headerlink" title="2. 工程化不能只停留于表面"></a>2. 工程化不能只停留于表面</h3><p>遥感手段可以最直观的让我们知道地表正在发生着什么，但遥感如果要走上工程化，就不能止步于看图片的地步，要结合多源数据、具体的工作场景来分析因果。</p>
<p>不仅要知道发生了什么，更要知道为什么会发生。这点是推动遥感行业做大做强的关键点。</p>
<h3 id="3-基础数据被越多的行业运用越好"><a href="#3-基础数据被越多的行业运用越好" class="headerlink" title="3. 基础数据被越多的行业运用越好"></a>3. 基础数据被越多的行业运用越好</h3><p>遥感作为一种基础观测数据，被行业人士广泛使用，但是对于很多其他行业的人来说，遥感只是从太空向地表拍摄的一张超大图片，很多时候我们的数据并不能很好地被外界所使用，但是在实际很多工程问题中，只有结合多源数据才能更好的刻画清楚某个现象。</p>
<p>从另外一个角度来说，一种基础数据如果被多行业广泛运用，也代表了它是非常有价值的。</p>
<p>``python</p>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>遥感</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例8—大数据技术赋能数字乡村建设</title>
    <url>/archives/cd9e5954.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天报告的题目是大数据技术赋能数字乡村建设，报告人是东方有道公司的董事长王力鸿。王总重点介绍了近10年来农村农业部门中3S应用的重大工程实践，具体包括农村土地承包经营权确权、两区划定、第三次国土利用调查、农村宅基地、农业农村大数据平台等。下面结合讲座内容和个人感受做如下总结。</p>
<img data-src="https://s2.loli.net/2022/05/14/9fakLKvsTrJYtlq.png" alt="" style="zoom: 33%;" />

<span id="more"></span>

<h1 id="报告基本内容"><a href="#报告基本内容" class="headerlink" title="报告基本内容"></a>报告基本内容</h1><h2 id="国家关于农业农村重大项目与政策背景"><a href="#国家关于农业农村重大项目与政策背景" class="headerlink" title="国家关于农业农村重大项目与政策背景"></a>国家关于农业农村重大项目与政策背景</h2><p>讲座的基本内容主要基于这张PPT展开，围绕着国家近十年在农村农业部门的相关政策展开的具体实践工作。</p>
<p><img data-src="https://s2.loli.net/2022/05/14/JLHIzWMi5AmovtV.png"></p>
<h2 id="土地承包经营权确权"><a href="#土地承包经营权确权" class="headerlink" title="土地承包经营权确权"></a>土地承包经营权确权</h2><p><img data-src="https://s2.loli.net/2022/05/14/tOlxLkEud3TYHyz.png" alt="image-20220514143327529"></p>
<h2 id="农村集体产权制度改革"><a href="#农村集体产权制度改革" class="headerlink" title="农村集体产权制度改革"></a>农村集体产权制度改革</h2><p><img data-src="https://s2.loli.net/2022/05/14/iUCGRYxBzXvNnHt.png"></p>
<p><img data-src="https://s2.loli.net/2022/05/14/2LwnS7N3AW8Z1rh.png"></p>
<p><img data-src="https://s2.loli.net/2022/05/14/6F8EmXBHcGPU2W4.png"></p>
<h2 id="两区划定"><a href="#两区划定" class="headerlink" title="两区划定"></a>两区划定</h2><p><img data-src="https://s2.loli.net/2022/05/14/J9cUpSbMRBKkoQY.png"></p>
<p><img data-src="https://s2.loli.net/2022/05/14/iWzGj98pCvt4f5H.png"></p>
<p><img data-src="https://s2.loli.net/2022/05/14/zkMSKE65fjYs8Tq.png"></p>
<h2 id="三调成果"><a href="#三调成果" class="headerlink" title="三调成果"></a>三调成果</h2><p><img data-src="https://s2.loli.net/2022/05/14/hMDqXiy3OPmnFaE.png"></p>
<h2 id="乡村治理现代化"><a href="#乡村治理现代化" class="headerlink" title="乡村治理现代化"></a>乡村治理现代化</h2><p><img data-src="https://s2.loli.net/2022/05/14/apP5YG1Mw6m8eLI.png"></p>
<p><img data-src="https://s2.loli.net/2022/05/14/ZrM4xSqBW9T1bpk.png"></p>
<h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><ol>
<li><p>本次讲座报告还是比较精彩的，王总没有涉及到具体的技术细节，更多的是介绍了3S手段如何在农业农村领域上发光发热。 其实手段无非是那些手段，传统测绘、遥感影像、地物划分等。但是角度从我们平时听的很多的智慧城市转向了农村农业建设还是比较有新意，其次本次报告涵盖的内容比较丰富，主要是围绕政策做的一系列工作。总的来说，是一次不错的报告。</p>
</li>
<li><p>在问答环节中，我提到了这么一个问题：如今在很多行业领域都有很多大屏的推广，交通领域、农业领域等，但实际上智慧大屏的效果怎么样，能不能被实际的用起来？</p>
<ol>
<li>智能大屏是信息化发展阶段中的一个产物，是当下收集好的政务信息的一种呈现方式，在实际使用中确实存在着利用率不高，展示效果大于实用效果的问题，没有充分发挥出作用。但信息化的过程就是一个不断投资和不断探索的过程，可以理解成新型基础设施的建设。这就好比于高速公路的投资建设，虽然是赔本的买卖，但还是要坚持做下去。又好比于发展初期的电脑，电脑功能的不断拓展和升级与电脑的普及是分不开的。目前智能大屏可能算是一种不太成熟的产物，但不代表这条路不应该继续发展下去。</li>
</ol>
</li>
<li><p>第二个问题，如何看待众包测绘在农村的发展？</p>
<ol>
<li>就我个人的实践而言，测绘在真正的工作量中可能只占了30%，在实际工作中除了测绘还有很多内容，比如了解政策法规、与村民的沟通、软件平台的开发等。测绘是一种技术手段和工具，不宜将测绘的技术要求上升到整个项目过程中，这会加大整体的难度。（王总在回答的时候理解错了题意，回答成了测绘在实际工程应用中的角色和所占的比例，问题不大）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>数字农村</tag>
      </tags>
  </entry>
  <entry>
    <title>工程案例9—基础设施结构行面激光图像精密测量技术及应用</title>
    <url>/archives/1ded5f68.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天报告的题目是基础设施结构形面激光图像精密测量技术及应用，报告人是武汉汉宁轨道交通技术有限公司研发总监熊勇钢。本课程围绕基础设施结构形面激光图像检测技术展开讲解，具体针对轨道基础设施检测、轨道移动三维扫描系统、隧道移动三维激光图像检测技术、公路三维病害检测等领域介绍了具体的研究工作，并分享工程化过程中解决问题的思路和方法。是一次很不错的报告，下面结合讲座内容和个人感受做如下总结。</p>
<span id="more"></span>

<h1 id="武汉汉宁轨道交通"><a href="#武汉汉宁轨道交通" class="headerlink" title="武汉汉宁轨道交通"></a>武汉汉宁轨道交通</h1><p>武汉汉宁轨道交通技术有限公司成立于2008年，是国内领先的智能轨道交通运营安全解决方案提供商。公司依托多领域专家和学者，融合武汉大学宇航院前沿技术成果，致力于以自主研发的高精度三维激光测绘技术推动轨道交通数字化、智能化建设，为我国轨道交通运营安全提供坚实保障。</p>
<h1 id="讲座内容"><a href="#讲座内容" class="headerlink" title="讲座内容"></a>讲座内容</h1><img data-src="https://s2.loli.net/2022/05/21/dxZNhpEXQ1mc8kI.png" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/oQMP5sajOhvWZz7.png" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/qB2EzdamcS1U8HG.png" alt="" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/cNfT5ij9yn82tL1.png" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/2ZK6NwWlypCAVXS.png" style="zoom:80%;" />

<img data-src="https://s2.loli.net/2022/05/21/iQDFEesGk94CazP.png" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/mqbthIA8QJ563Xv.png" style="zoom:80%;" />

<img data-src="https://s2.loli.net/2022/05/21/QW1qDf5ZUE6vKos.png" style="zoom: 80%;" />

<p><img data-src="https://s2.loli.net/2022/05/21/htJc9ryMuo87bWC.png"></p>
<img data-src="https://s2.loli.net/2022/05/21/BEaFn8lAI6ZU42c.png" style="zoom: 80%;" />

<img data-src="https://s2.loli.net/2022/05/21/s28y9uJCA6DKNGQ.png" style="zoom: 80%;" />

<img data-src="https://s2.loli.net/2022/05/21/Wnu34GL2DqfFcvZ.png" style="zoom:67%;" />

<img data-src="https://s2.loli.net/2022/05/21/km5GvH6zuX4tsgF.png" style="zoom: 80%;" />

]]></content>
      <categories>
        <category>工程案例</category>
      </categories>
      <tags>
        <tag>基础设施</tag>
        <tag>精密测量</tag>
      </tags>
  </entry>
</search>
